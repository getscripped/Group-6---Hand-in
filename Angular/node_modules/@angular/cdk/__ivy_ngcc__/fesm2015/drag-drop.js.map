{"version":3,"sources":["D:/370/FinalFrontend/node_modules/@angular/cdk/fesm2015/drag-drop.js"],"names":[],"mappingskCAMmO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8GpO,iNAGC;;;;;;;;;;;;;;;uHAQwP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8RzP,8MAQC;;;;;;;;;;;;;;;;;;;;;;;;;oBAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAwCD,kKAKC;;;;;;;;;;;;;;;oBAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4BD,sJAKC;;;;;;;;;;;;;;;oBAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8ZD,s1BAYC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAiCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsND,uNAMC;;;;;;;;;;;;;oBAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eA0WD;;;;4BAI2B,AAkB1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgID;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAuBC","file":"drag-drop.js","sourcesContent":["import { Injectable, NgZone, Inject, ɵɵdefineInjectable, ɵɵinject, InjectionToken, Directive, ElementRef, Optional, Input, TemplateRef, EventEmitter, isDevMode, SkipSelf, ViewContainerRef, ChangeDetectorRef, ContentChildren, ContentChild, Output, NgModule } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { ViewportRuler } from '@angular/cdk/scrolling';\r\nimport { normalizePassiveListenerOptions, _supportsShadowDom } from '@angular/cdk/platform';\r\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\r\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\r\nimport { startWith, takeUntil, map, take, tap, switchMap } from 'rxjs/operators';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/cdk/drag-drop/drag-styling.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Extended CSSStyleDeclaration that includes a couple of drag-related\r\n * properties that aren't in the built-in TS typings.\r\n * @record\r\n */\r\nfunction DragCSSStyleDeclaration() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    DragCSSStyleDeclaration.prototype.webkitUserDrag;\r\n    /** @type {?} */\r\n    DragCSSStyleDeclaration.prototype.MozUserSelect;\r\n}\r\n/**\r\n * Shallow-extends a stylesheet object with another stylesheet object.\r\n * \\@docs-private\r\n * @param {?} dest\r\n * @param {?} source\r\n * @return {?}\r\n */\r\nfunction extendStyles(dest, source) {\r\n    for (let key in source) {\r\n        if (source.hasOwnProperty(key)) {\r\n            dest[key] = (/** @type {?} */ (source[key]));\r\n        }\r\n    }\r\n    return dest;\r\n}\r\n/**\r\n * Toggles whether the native drag interactions should be enabled for an element.\r\n * \\@docs-private\r\n * @param {?} element Element on which to toggle the drag interactions.\r\n * @param {?} enable Whether the drag interactions should be enabled.\r\n * @return {?}\r\n */\r\nfunction toggleNativeDragInteractions(element, enable) {\r\n    /** @type {?} */\r\n    const userSelect = enable ? '' : 'none';\r\n    extendStyles(element.style, {\r\n        touchAction: enable ? '' : 'none',\r\n        webkitUserDrag: enable ? '' : 'none',\r\n        webkitTapHighlightColor: enable ? '' : 'transparent',\r\n        userSelect: userSelect,\r\n        msUserSelect: userSelect,\r\n        webkitUserSelect: userSelect,\r\n        MozUserSelect: userSelect\r\n    });\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/cdk/drag-drop/transition-duration.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Parses a CSS time value to milliseconds.\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction parseCssTimeUnitsToMs(value) {\r\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\r\n    /** @type {?} */\r\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\r\n    return parseFloat(value) * multiplier;\r\n}\r\n/**\r\n * Gets the transform transition duration, including the delay, of an element in milliseconds.\r\n * @param {?} element\r\n * @return {?}\r\n */\r\nfunction getTransformTransitionDurationInMs(element) {\r\n    /** @type {?} */\r\n    const computedStyle = getComputedStyle(element);\r\n    /** @type {?} */\r\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\r\n    /** @type {?} */\r\n    const property = transitionedProperties.find((/**\r\n     * @param {?} prop\r\n     * @return {?}\r\n     */\r\n    prop => prop === 'transform' || prop === 'all'));\r\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\r\n    if (!property) {\r\n        return 0;\r\n    }\r\n    // Get the index of the property that we're interested in and match\r\n    // it up to the same index in `transition-delay` and `transition-duration`.\r\n    /** @type {?} */\r\n    const propertyIndex = transitionedProperties.indexOf(property);\r\n    /** @type {?} */\r\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\r\n    /** @type {?} */\r\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\r\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\r\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\r\n}\r\n/**\r\n * Parses out multiple values from a computed style into an array.\r\n * @param {?} computedStyle\r\n * @param {?} name\r\n * @return {?}\r\n */\r\nfunction parseCssPropertyValue(computedStyle, name) {\r\n    /** @type {?} */\r\n    const value = computedStyle.getPropertyValue(name);\r\n    return value.split(',').map((/**\r\n     * @param {?} part\r\n     * @return {?}\r\n     */\r\n    part => part.trim()));\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/cdk/drag-drop/drag-ref.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Object that can be used to configure the behavior of DragRef.\r\n * @record\r\n */\r\nfunction DragRefConfig() { }\r\nif (false) {\r\n    /**\r\n     * Minimum amount of pixels that the user should\r\n     * drag, before the CDK initiates a drag sequence.\r\n     * @type {?}\r\n     */\r\n    DragRefConfig.prototype.dragStartThreshold;\r\n    /**\r\n     * Amount the pixels the user should drag before the CDK\r\n     * considers them to have changed the drag direction.\r\n     * @type {?}\r\n     */\r\n    DragRefConfig.prototype.pointerDirectionChangeThreshold;\r\n}\r\n/**\r\n * Options that can be used to bind a passive event listener.\r\n * @type {?}\r\n */\r\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\r\n/**\r\n * Options that can be used to bind an active event listener.\r\n * @type {?}\r\n */\r\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\r\n/**\r\n * Time in milliseconds for which to ignore mouse events, after\r\n * receiving a touch event. Used to avoid doing double work for\r\n * touch devices where the browser fires fake mouse events, in\r\n * addition to touch events.\r\n * @type {?}\r\n */\r\nconst MOUSE_EVENT_IGNORE_TIME = 800;\r\n/**\r\n * Internal compile-time-only representation of a `DragRef`.\r\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\r\n * \\@docs-private\r\n * @record\r\n */\r\nfunction DragRefInternal() { }\r\n/**\r\n * Template that can be used to create a drag helper element (e.g. a preview or a placeholder).\r\n * @record\r\n * @template T\r\n */\r\nfunction DragHelperTemplate() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    DragHelperTemplate.prototype.template;\r\n    /** @type {?} */\r\n    DragHelperTemplate.prototype.viewContainer;\r\n    /** @type {?} */\r\n    DragHelperTemplate.prototype.context;\r\n}\r\n/**\r\n * Reference to a draggable item. Used to manipulate or dispose of the item.\r\n * @template T\r\n */\r\nclass DragRef {\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} _config\r\n     * @param {?} _document\r\n     * @param {?} _ngZone\r\n     * @param {?} _viewportRuler\r\n     * @param {?} _dragDropRegistry\r\n     */\r\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\r\n        this._config = _config;\r\n        this._document = _document;\r\n        this._ngZone = _ngZone;\r\n        this._viewportRuler = _viewportRuler;\r\n        this._dragDropRegistry = _dragDropRegistry;\r\n        /**\r\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\r\n         * passive transform in order for the dragged element to retain its new position\r\n         * after the user has stopped dragging and because we need to know the relative\r\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\r\n         */\r\n        this._passiveTransform = { x: 0, y: 0 };\r\n        /**\r\n         * CSS `transform` that is applied to the element while it's being dragged.\r\n         */\r\n        this._activeTransform = { x: 0, y: 0 };\r\n        /**\r\n         * Emits when the item is being moved.\r\n         */\r\n        this._moveEvents = new Subject();\r\n        /**\r\n         * Subscription to pointer movement events.\r\n         */\r\n        this._pointerMoveSubscription = Subscription.EMPTY;\r\n        /**\r\n         * Subscription to the event that is dispatched when the user lifts their pointer.\r\n         */\r\n        this._pointerUpSubscription = Subscription.EMPTY;\r\n        /**\r\n         * Subscription to the viewport being scrolled.\r\n         */\r\n        this._scrollSubscription = Subscription.EMPTY;\r\n        /**\r\n         * Subscription to the viewport being resized.\r\n         */\r\n        this._resizeSubscription = Subscription.EMPTY;\r\n        /**\r\n         * Cached reference to the boundary element.\r\n         */\r\n        this._boundaryElement = null;\r\n        /**\r\n         * Whether the native dragging interactions have been enabled on the root element.\r\n         */\r\n        this._nativeInteractionsEnabled = true;\r\n        /**\r\n         * Elements that can be used to drag the draggable item.\r\n         */\r\n        this._handles = [];\r\n        /**\r\n         * Registered handles that are currently disabled.\r\n         */\r\n        this._disabledHandles = new Set();\r\n        /**\r\n         * Layout direction of the item.\r\n         */\r\n        this._direction = 'ltr';\r\n        /**\r\n         * Amount of milliseconds to wait after the user has put their\r\n         * pointer down before starting to drag the element.\r\n         */\r\n        this.dragStartDelay = 0;\r\n        this._disabled = false;\r\n        /**\r\n         * Emits as the drag sequence is being prepared.\r\n         */\r\n        this.beforeStarted = new Subject();\r\n        /**\r\n         * Emits when the user starts dragging the item.\r\n         */\r\n        this.started = new Subject();\r\n        /**\r\n         * Emits when the user has released a drag item, before any animations have started.\r\n         */\r\n        this.released = new Subject();\r\n        /**\r\n         * Emits when the user stops dragging an item in the container.\r\n         */\r\n        this.ended = new Subject();\r\n        /**\r\n         * Emits when the user has moved the item into a new container.\r\n         */\r\n        this.entered = new Subject();\r\n        /**\r\n         * Emits when the user removes the item its container by dragging it into another container.\r\n         */\r\n        this.exited = new Subject();\r\n        /**\r\n         * Emits when the user drops the item inside a container.\r\n         */\r\n        this.dropped = new Subject();\r\n        /**\r\n         * Emits as the user is dragging the item. Use with caution,\r\n         * because this event will fire for every pixel that the user has dragged.\r\n         */\r\n        this.moved = this._moveEvents.asObservable();\r\n        /**\r\n         * Handler for the `mousedown`/`touchstart` events.\r\n         */\r\n        this._pointerDown = (/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        (event) => {\r\n            this.beforeStarted.next();\r\n            // Delegate the event based on whether it started from a handle or the element itself.\r\n            if (this._handles.length) {\r\n                /** @type {?} */\r\n                const targetHandle = this._handles.find((/**\r\n                 * @param {?} handle\r\n                 * @return {?}\r\n                 */\r\n                handle => {\r\n                    /** @type {?} */\r\n                    const target = event.target;\r\n                    return !!target && (target === handle || handle.contains((/** @type {?} */ (target))));\r\n                }));\r\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\r\n                    this._initializeDragSequence(targetHandle, event);\r\n                }\r\n            }\r\n            else if (!this.disabled) {\r\n                this._initializeDragSequence(this._rootElement, event);\r\n            }\r\n        });\r\n        /**\r\n         * Handler that is invoked when the user moves their pointer after they've initiated a drag.\r\n         */\r\n        this._pointerMove = (/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        (event) => {\r\n            // Prevent the default action as early as possible in order to block\r\n            // native actions like dragging the selected text or images with the mouse.\r\n            event.preventDefault();\r\n            if (!this._hasStartedDragging) {\r\n                /** @type {?} */\r\n                const pointerPosition = this._getPointerPositionOnPage(event);\r\n                /** @type {?} */\r\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\r\n                /** @type {?} */\r\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\r\n                /** @type {?} */\r\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\r\n                // Only start dragging after the user has moved more than the minimum distance in either\r\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\r\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\r\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\r\n                if (isOverThreshold) {\r\n                    /** @type {?} */\r\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\r\n                    if (!isDelayElapsed) {\r\n                        this._endDragSequence(event);\r\n                        return;\r\n                    }\r\n                    // Prevent other drag sequences from starting while something in the container is still\r\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\r\n                    // and can cause errors, because some elements might still be moving around.\r\n                    if (!this._dropContainer || !this._dropContainer.isDragging()) {\r\n                        this._hasStartedDragging = true;\r\n                        this._ngZone.run((/**\r\n                         * @return {?}\r\n                         */\r\n                        () => this._startDragSequence(event)));\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n            // We only need the preview dimensions if we have a boundary element.\r\n            if (this._boundaryElement) {\r\n                // Cache the preview element rect if we haven't cached it already or if\r\n                // we cached it too early before the element dimensions were computed.\r\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\r\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\r\n                }\r\n            }\r\n            /** @type {?} */\r\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(event);\r\n            this._hasMoved = true;\r\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\r\n            if (this._dropContainer) {\r\n                this._updateActiveDropContainer(constrainedPointerPosition);\r\n            }\r\n            else {\r\n                /** @type {?} */\r\n                const activeTransform = this._activeTransform;\r\n                activeTransform.x =\r\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\r\n                activeTransform.y =\r\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\r\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\r\n                // Apply transform as attribute if dragging and svg element to work for IE\r\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\r\n                    /** @type {?} */\r\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\r\n                    this._rootElement.setAttribute('transform', appliedTransform);\r\n                }\r\n            }\r\n            // Since this event gets fired for every pixel while dragging, we only\r\n            // want to fire it if the consumer opted into it. Also we have to\r\n            // re-enter the zone because we run all of the events on the outside.\r\n            if (this._moveEvents.observers.length) {\r\n                this._ngZone.run((/**\r\n                 * @return {?}\r\n                 */\r\n                () => {\r\n                    this._moveEvents.next({\r\n                        source: this,\r\n                        pointerPosition: constrainedPointerPosition,\r\n                        event,\r\n                        distance: this._getDragDistance(constrainedPointerPosition),\r\n                        delta: this._pointerDirectionDelta\r\n                    });\r\n                }));\r\n            }\r\n        });\r\n        /**\r\n         * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\r\n         */\r\n        this._pointerUp = (/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        (event) => {\r\n            this._endDragSequence(event);\r\n        });\r\n        this.withRootElement(element);\r\n        _dragDropRegistry.registerDragItem(this);\r\n    }\r\n    /**\r\n     * Whether starting to drag this element is disabled.\r\n     * @return {?}\r\n     */\r\n    get disabled() {\r\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set disabled(value) {\r\n        /** @type {?} */\r\n        const newValue = coerceBooleanProperty(value);\r\n        if (newValue !== this._disabled) {\r\n            this._disabled = newValue;\r\n            this._toggleNativeDragInteractions();\r\n        }\r\n    }\r\n    /**\r\n     * Returns the element that is being used as a placeholder\r\n     * while the current element is being dragged.\r\n     * @return {?}\r\n     */\r\n    getPlaceholderElement() {\r\n        return this._placeholder;\r\n    }\r\n    /**\r\n     * Returns the root draggable element.\r\n     * @return {?}\r\n     */\r\n    getRootElement() {\r\n        return this._rootElement;\r\n    }\r\n    /**\r\n     * Registers the handles that can be used to drag the element.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} handles\r\n     * @return {THIS}\r\n     */\r\n    withHandles(handles) {\r\n        (/** @type {?} */ (this))._handles = handles.map((/**\r\n         * @param {?} handle\r\n         * @return {?}\r\n         */\r\n        handle => coerceElement(handle)));\r\n        (/** @type {?} */ (this))._handles.forEach((/**\r\n         * @param {?} handle\r\n         * @return {?}\r\n         */\r\n        handle => toggleNativeDragInteractions(handle, false)));\r\n        (/** @type {?} */ (this))._toggleNativeDragInteractions();\r\n        return (/** @type {?} */ (this));\r\n    }\r\n    /**\r\n     * Registers the template that should be used for the drag preview.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} template Template that from which to stamp out the preview.\r\n     * @return {THIS}\r\n     */\r\n    withPreviewTemplate(template) {\r\n        (/** @type {?} */ (this))._previewTemplate = template;\r\n        return (/** @type {?} */ (this));\r\n    }\r\n    /**\r\n     * Registers the template that should be used for the drag placeholder.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} template Template that from which to stamp out the placeholder.\r\n     * @return {THIS}\r\n     */\r\n    withPlaceholderTemplate(template) {\r\n        (/** @type {?} */ (this))._placeholderTemplate = template;\r\n        return (/** @type {?} */ (this));\r\n    }\r\n    /**\r\n     * Sets an alternate drag root element. The root element is the element that will be moved as\r\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\r\n     * dragging on an element that you might not have access to.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} rootElement\r\n     * @return {THIS}\r\n     */\r\n    withRootElement(rootElement) {\r\n        /** @type {?} */\r\n        const element = coerceElement(rootElement);\r\n        if (element !== (/** @type {?} */ (this))._rootElement) {\r\n            if ((/** @type {?} */ (this))._rootElement) {\r\n                (/** @type {?} */ (this))._removeRootElementListeners((/** @type {?} */ (this))._rootElement);\r\n            }\r\n            element.addEventListener('mousedown', (/** @type {?} */ (this))._pointerDown, activeEventListenerOptions);\r\n            element.addEventListener('touchstart', (/** @type {?} */ (this))._pointerDown, passiveEventListenerOptions);\r\n            (/** @type {?} */ (this))._initialTransform = undefined;\r\n            (/** @type {?} */ (this))._rootElement = element;\r\n        }\r\n        return (/** @type {?} */ (this));\r\n    }\r\n    /**\r\n     * Element to which the draggable's position will be constrained.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} boundaryElement\r\n     * @return {THIS}\r\n     */\r\n    withBoundaryElement(boundaryElement) {\r\n        (/** @type {?} */ (this))._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\r\n        (/** @type {?} */ (this))._resizeSubscription.unsubscribe();\r\n        if (boundaryElement) {\r\n            (/** @type {?} */ (this))._resizeSubscription = (/** @type {?} */ (this))._viewportRuler\r\n                .change(10)\r\n                .subscribe((/**\r\n             * @return {?}\r\n             */\r\n            () => (/** @type {?} */ (this))._containInsideBoundaryOnResize()));\r\n        }\r\n        return (/** @type {?} */ (this));\r\n    }\r\n    /**\r\n     * Removes the dragging functionality from the DOM element.\r\n     * @return {?}\r\n     */\r\n    dispose() {\r\n        this._removeRootElementListeners(this._rootElement);\r\n        // Do this check before removing from the registry since it'll\r\n        // stop being considered as dragged once it is removed.\r\n        if (this.isDragging()) {\r\n            // Since we move out the element to the end of the body while it's being\r\n            // dragged, we have to make sure that it's removed if it gets destroyed.\r\n            removeNode(this._rootElement);\r\n        }\r\n        removeNode(this._anchor);\r\n        this._destroyPreview();\r\n        this._destroyPlaceholder();\r\n        this._dragDropRegistry.removeDragItem(this);\r\n        this._removeSubscriptions();\r\n        this.beforeStarted.complete();\r\n        this.started.complete();\r\n        this.released.complete();\r\n        this.ended.complete();\r\n        this.entered.complete();\r\n        this.exited.complete();\r\n        this.dropped.complete();\r\n        this._moveEvents.complete();\r\n        this._handles = [];\r\n        this._disabledHandles.clear();\r\n        this._dropContainer = undefined;\r\n        this._resizeSubscription.unsubscribe();\r\n        this._boundaryElement = this._rootElement = this._placeholderTemplate =\r\n            this._previewTemplate = this._anchor = (/** @type {?} */ (null));\r\n    }\r\n    /**\r\n     * Checks whether the element is currently being dragged.\r\n     * @return {?}\r\n     */\r\n    isDragging() {\r\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\r\n    }\r\n    /**\r\n     * Resets a standalone drag item to its initial position.\r\n     * @return {?}\r\n     */\r\n    reset() {\r\n        this._rootElement.style.transform = this._initialTransform || '';\r\n        this._activeTransform = { x: 0, y: 0 };\r\n        this._passiveTransform = { x: 0, y: 0 };\r\n    }\r\n    /**\r\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\r\n     * @param {?} handle Handle element that should be disabled.\r\n     * @return {?}\r\n     */\r\n    disableHandle(handle) {\r\n        if (this._handles.indexOf(handle) > -1) {\r\n            this._disabledHandles.add(handle);\r\n        }\r\n    }\r\n    /**\r\n     * Enables a handle, if it has been disabled.\r\n     * @param {?} handle Handle element to be enabled.\r\n     * @return {?}\r\n     */\r\n    enableHandle(handle) {\r\n        this._disabledHandles.delete(handle);\r\n    }\r\n    /**\r\n     * Sets the layout direction of the draggable item.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} direction\r\n     * @return {THIS}\r\n     */\r\n    withDirection(direction) {\r\n        (/** @type {?} */ (this))._direction = direction;\r\n        return (/** @type {?} */ (this));\r\n    }\r\n    /**\r\n     * Sets the container that the item is part of.\r\n     * @param {?} container\r\n     * @return {?}\r\n     */\r\n    _withDropContainer(container) {\r\n        this._dropContainer = container;\r\n    }\r\n    /**\r\n     * Gets the current position in pixels the draggable outside of a drop container.\r\n     * @return {?}\r\n     */\r\n    getFreeDragPosition() {\r\n        /** @type {?} */\r\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\r\n        return { x: position.x, y: position.y };\r\n    }\r\n    /**\r\n     * Sets the current position in pixels the draggable outside of a drop container.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} value New position to be set.\r\n     * @return {THIS}\r\n     */\r\n    setFreeDragPosition(value) {\r\n        (/** @type {?} */ (this))._activeTransform = { x: 0, y: 0 };\r\n        (/** @type {?} */ (this))._passiveTransform.x = value.x;\r\n        (/** @type {?} */ (this))._passiveTransform.y = value.y;\r\n        if (!(/** @type {?} */ (this))._dropContainer) {\r\n            (/** @type {?} */ (this))._applyRootElementTransform(value.x, value.y);\r\n        }\r\n        return (/** @type {?} */ (this));\r\n    }\r\n    /**\r\n     * Updates the item's sort order based on the last-known pointer position.\r\n     * @return {?}\r\n     */\r\n    _sortFromLastPointerPosition() {\r\n        /** @type {?} */\r\n        const position = this._pointerPositionAtLastDirectionChange;\r\n        if (position && this._dropContainer) {\r\n            this._updateActiveDropContainer(position);\r\n        }\r\n    }\r\n    /**\r\n     * Unsubscribes from the global subscriptions.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _removeSubscriptions() {\r\n        this._pointerMoveSubscription.unsubscribe();\r\n        this._pointerUpSubscription.unsubscribe();\r\n        this._scrollSubscription.unsubscribe();\r\n    }\r\n    /**\r\n     * Destroys the preview element and its ViewRef.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _destroyPreview() {\r\n        if (this._preview) {\r\n            removeNode(this._preview);\r\n        }\r\n        if (this._previewRef) {\r\n            this._previewRef.destroy();\r\n        }\r\n        this._preview = this._previewRef = (/** @type {?} */ (null));\r\n    }\r\n    /**\r\n     * Destroys the placeholder element and its ViewRef.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _destroyPlaceholder() {\r\n        if (this._placeholder) {\r\n            removeNode(this._placeholder);\r\n        }\r\n        if (this._placeholderRef) {\r\n            this._placeholderRef.destroy();\r\n        }\r\n        this._placeholder = this._placeholderRef = (/** @type {?} */ (null));\r\n    }\r\n    /**\r\n     * Clears subscriptions and stops the dragging sequence.\r\n     * @private\r\n     * @param {?} event Browser event object that ended the sequence.\r\n     * @return {?}\r\n     */\r\n    _endDragSequence(event) {\r\n        // Note that here we use `isDragging` from the service, rather than from `this`.\r\n        // The difference is that the one from the service reflects whether a dragging sequence\r\n        // has been initiated, whereas the one on `this` includes whether the user has passed\r\n        // the minimum dragging threshold.\r\n        if (!this._dragDropRegistry.isDragging(this)) {\r\n            return;\r\n        }\r\n        this._removeSubscriptions();\r\n        this._dragDropRegistry.stopDragging(this);\r\n        this._toggleNativeDragInteractions();\r\n        if (this._handles) {\r\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\r\n        }\r\n        if (!this._hasStartedDragging) {\r\n            return;\r\n        }\r\n        this.released.next({ source: this });\r\n        if (this._dropContainer) {\r\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\r\n            this._dropContainer._stopScrolling();\r\n            this._animatePreviewToPlaceholder().then((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                this._cleanupDragArtifacts(event);\r\n                this._cleanupCachedDimensions();\r\n                this._dragDropRegistry.stopDragging(this);\r\n            }));\r\n        }\r\n        else {\r\n            // Convert the active transform into a passive one. This means that next time\r\n            // the user starts dragging the item, its position will be calculated relatively\r\n            // to the new passive transform.\r\n            this._passiveTransform.x = this._activeTransform.x;\r\n            this._passiveTransform.y = this._activeTransform.y;\r\n            this._ngZone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                this.ended.next({\r\n                    source: this,\r\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\r\n                });\r\n            }));\r\n            this._cleanupCachedDimensions();\r\n            this._dragDropRegistry.stopDragging(this);\r\n        }\r\n    }\r\n    /**\r\n     * Starts the dragging sequence.\r\n     * @private\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _startDragSequence(event) {\r\n        // Emit the event on the item before the one on the container.\r\n        this.started.next({ source: this });\r\n        if (isTouchEvent(event)) {\r\n            this._lastTouchEventTime = Date.now();\r\n        }\r\n        this._toggleNativeDragInteractions();\r\n        if (this._dropContainer) {\r\n            /** @type {?} */\r\n            const element = this._rootElement;\r\n            /** @type {?} */\r\n            const parent = (/** @type {?} */ (element.parentNode));\r\n            /** @type {?} */\r\n            const preview = this._preview = this._createPreviewElement();\r\n            /** @type {?} */\r\n            const placeholder = this._placeholder = this._createPlaceholderElement();\r\n            /** @type {?} */\r\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\r\n            // Insert an anchor node so that we can restore the element's position in the DOM.\r\n            parent.insertBefore(anchor, element);\r\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\r\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\r\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\r\n            element.style.display = 'none';\r\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\r\n            getPreviewInsertionPoint(this._document).appendChild(preview);\r\n            this._dropContainer.start();\r\n        }\r\n    }\r\n    /**\r\n     * Sets up the different variables and subscriptions\r\n     * that will be necessary for the dragging sequence.\r\n     * @private\r\n     * @param {?} referenceElement Element that started the drag sequence.\r\n     * @param {?} event Browser event object that started the sequence.\r\n     * @return {?}\r\n     */\r\n    _initializeDragSequence(referenceElement, event) {\r\n        // Always stop propagation for the event that initializes\r\n        // the dragging sequence, in order to prevent it from potentially\r\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\r\n        event.stopPropagation();\r\n        /** @type {?} */\r\n        const isDragging = this.isDragging();\r\n        /** @type {?} */\r\n        const isTouchSequence = isTouchEvent(event);\r\n        /** @type {?} */\r\n        const isAuxiliaryMouseButton = !isTouchSequence && ((/** @type {?} */ (event))).button !== 0;\r\n        /** @type {?} */\r\n        const rootElement = this._rootElement;\r\n        /** @type {?} */\r\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\r\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\r\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\r\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\r\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\r\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\r\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\r\n        // events from firing on touch devices.\r\n        if (event.target && ((/** @type {?} */ (event.target))).draggable && event.type === 'mousedown') {\r\n            event.preventDefault();\r\n        }\r\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\r\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\r\n            return;\r\n        }\r\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\r\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\r\n        // are disabled.\r\n        if (this._handles.length) {\r\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\r\n            rootElement.style.webkitTapHighlightColor = 'transparent';\r\n        }\r\n        this._hasStartedDragging = this._hasMoved = false;\r\n        this._initialContainer = (/** @type {?} */ (this._dropContainer));\r\n        // Avoid multiple subscriptions and memory leaks when multi touch\r\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\r\n        this._removeSubscriptions();\r\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\r\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\r\n        this._scrollSubscription = this._dragDropRegistry.scroll.pipe(startWith(null)).subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\r\n        }));\r\n        if (this._boundaryElement) {\r\n            this._boundaryRect = this._boundaryElement.getBoundingClientRect();\r\n        }\r\n        // If we have a custom preview template, the element won't be visible anyway so we avoid the\r\n        // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\r\n        this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\r\n            { x: 0, y: 0 } :\r\n            this._getPointerPositionInElement(referenceElement, event);\r\n        /** @type {?} */\r\n        const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\r\n        this._pointerDirectionDelta = { x: 0, y: 0 };\r\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\r\n        this._dragStartTime = Date.now();\r\n        this._dragDropRegistry.startDragging(this, event);\r\n    }\r\n    /**\r\n     * Cleans up the DOM artifacts that were added to facilitate the element being dragged.\r\n     * @private\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _cleanupDragArtifacts(event) {\r\n        // Restore the element's visibility and insert it at its old position in the DOM.\r\n        // It's important that we maintain the position, because moving the element around in the DOM\r\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\r\n        // while moving the existing elements in all other cases.\r\n        this._rootElement.style.display = '';\r\n        (/** @type {?} */ (this._anchor.parentNode)).replaceChild(this._rootElement, this._anchor);\r\n        this._destroyPreview();\r\n        this._destroyPlaceholder();\r\n        this._boundaryRect = this._previewRect = undefined;\r\n        // Re-enter the NgZone since we bound `document` events on the outside.\r\n        this._ngZone.run((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            /** @type {?} */\r\n            const container = (/** @type {?} */ (this._dropContainer));\r\n            /** @type {?} */\r\n            const currentIndex = container.getItemIndex(this);\r\n            /** @type {?} */\r\n            const pointerPosition = this._getPointerPositionOnPage(event);\r\n            /** @type {?} */\r\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\r\n            /** @type {?} */\r\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\r\n            this.ended.next({ source: this, distance });\r\n            this.dropped.next({\r\n                item: this,\r\n                currentIndex,\r\n                previousIndex: this._initialContainer.getItemIndex(this),\r\n                container: container,\r\n                previousContainer: this._initialContainer,\r\n                isPointerOverContainer,\r\n                distance\r\n            });\r\n            container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance);\r\n            this._dropContainer = this._initialContainer;\r\n        }));\r\n    }\r\n    /**\r\n     * Updates the item's position in its drop container, or moves it\r\n     * into a new one, depending on its current drag position.\r\n     * @private\r\n     * @param {?} __0\r\n     * @return {?}\r\n     */\r\n    _updateActiveDropContainer({ x, y }) {\r\n        // Drop container that draggable has been moved into.\r\n        /** @type {?} */\r\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\r\n        // If we couldn't find a new container to move the item into, and the item has left its\r\n        // initial container, check whether the it's over the initial container. This handles the\r\n        // case where two containers are connected one way and the user tries to undo dragging an\r\n        // item into a new container.\r\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\r\n            this._initialContainer._isOverContainer(x, y)) {\r\n            newContainer = this._initialContainer;\r\n        }\r\n        if (newContainer && newContainer !== this._dropContainer) {\r\n            this._ngZone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                // Notify the old container that the item has left.\r\n                this.exited.next({ item: this, container: (/** @type {?} */ (this._dropContainer)) });\r\n                (/** @type {?} */ (this._dropContainer)).exit(this);\r\n                // Notify the new container that the item has entered.\r\n                this._dropContainer = (/** @type {?} */ (newContainer));\r\n                this._dropContainer.enter(this, x, y);\r\n                this.entered.next({\r\n                    item: this,\r\n                    container: (/** @type {?} */ (newContainer)),\r\n                    currentIndex: (/** @type {?} */ (newContainer)).getItemIndex(this)\r\n                });\r\n            }));\r\n        }\r\n        (/** @type {?} */ (this._dropContainer))._startScrollingIfNecessary(x, y);\r\n        (/** @type {?} */ (this._dropContainer))._sortItem(this, x, y, this._pointerDirectionDelta);\r\n        this._preview.style.transform =\r\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\r\n    }\r\n    /**\r\n     * Creates the element that will be rendered next to the user's pointer\r\n     * and will be used as a preview of the element that is being dragged.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _createPreviewElement() {\r\n        /** @type {?} */\r\n        const previewConfig = this._previewTemplate;\r\n        /** @type {?} */\r\n        const previewClass = this.previewClass;\r\n        /** @type {?} */\r\n        const previewTemplate = previewConfig ? previewConfig.template : null;\r\n        /** @type {?} */\r\n        let preview;\r\n        if (previewTemplate) {\r\n            /** @type {?} */\r\n            const viewRef = (/** @type {?} */ (previewConfig)).viewContainer.createEmbeddedView(previewTemplate, (/** @type {?} */ (previewConfig)).context);\r\n            preview = getRootNode(viewRef, this._document);\r\n            this._previewRef = viewRef;\r\n            preview.style.transform =\r\n                getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\r\n        }\r\n        else {\r\n            /** @type {?} */\r\n            const element = this._rootElement;\r\n            /** @type {?} */\r\n            const elementRect = element.getBoundingClientRect();\r\n            preview = deepCloneNode(element);\r\n            preview.style.width = `${elementRect.width}px`;\r\n            preview.style.height = `${elementRect.height}px`;\r\n            preview.style.transform = getTransform(elementRect.left, elementRect.top);\r\n        }\r\n        extendStyles(preview.style, {\r\n            // It's important that we disable the pointer events on the preview, because\r\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\r\n            pointerEvents: 'none',\r\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\r\n            margin: '0',\r\n            position: 'fixed',\r\n            top: '0',\r\n            left: '0',\r\n            zIndex: '1000'\r\n        });\r\n        toggleNativeDragInteractions(preview, false);\r\n        preview.classList.add('cdk-drag-preview');\r\n        preview.setAttribute('dir', this._direction);\r\n        if (previewClass) {\r\n            if (Array.isArray(previewClass)) {\r\n                previewClass.forEach((/**\r\n                 * @param {?} className\r\n                 * @return {?}\r\n                 */\r\n                className => preview.classList.add(className)));\r\n            }\r\n            else {\r\n                preview.classList.add(previewClass);\r\n            }\r\n        }\r\n        return preview;\r\n    }\r\n    /**\r\n     * Animates the preview element from its current position to the location of the drop placeholder.\r\n     * @private\r\n     * @return {?} Promise that resolves when the animation completes.\r\n     */\r\n    _animatePreviewToPlaceholder() {\r\n        // If the user hasn't moved yet, the transitionend event won't fire.\r\n        if (!this._hasMoved) {\r\n            return Promise.resolve();\r\n        }\r\n        /** @type {?} */\r\n        const placeholderRect = this._placeholder.getBoundingClientRect();\r\n        // Apply the class that adds a transition to the preview.\r\n        this._preview.classList.add('cdk-drag-animating');\r\n        // Move the preview to the placeholder position.\r\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\r\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\r\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\r\n        // apply its style, we take advantage of the available info to figure out whether we need to\r\n        // bind the event in the first place.\r\n        /** @type {?} */\r\n        const duration = getTransformTransitionDurationInMs(this._preview);\r\n        if (duration === 0) {\r\n            return Promise.resolve();\r\n        }\r\n        return this._ngZone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            return new Promise((/**\r\n             * @param {?} resolve\r\n             * @return {?}\r\n             */\r\n            resolve => {\r\n                /** @type {?} */\r\n                const handler = (/** @type {?} */ (((/**\r\n                 * @param {?} event\r\n                 * @return {?}\r\n                 */\r\n                (event) => {\r\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\r\n                        this._preview.removeEventListener('transitionend', handler);\r\n                        resolve();\r\n                        clearTimeout(timeout);\r\n                    }\r\n                }))));\r\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\r\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\r\n                // fire if the transition hasn't completed when it was supposed to.\r\n                /** @type {?} */\r\n                const timeout = setTimeout((/** @type {?} */ (handler)), duration * 1.5);\r\n                this._preview.addEventListener('transitionend', handler);\r\n            }));\r\n        }));\r\n    }\r\n    /**\r\n     * Creates an element that will be shown instead of the current element while dragging.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _createPlaceholderElement() {\r\n        /** @type {?} */\r\n        const placeholderConfig = this._placeholderTemplate;\r\n        /** @type {?} */\r\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\r\n        /** @type {?} */\r\n        let placeholder;\r\n        if (placeholderTemplate) {\r\n            this._placeholderRef = (/** @type {?} */ (placeholderConfig)).viewContainer.createEmbeddedView(placeholderTemplate, (/** @type {?} */ (placeholderConfig)).context);\r\n            placeholder = getRootNode(this._placeholderRef, this._document);\r\n        }\r\n        else {\r\n            placeholder = deepCloneNode(this._rootElement);\r\n        }\r\n        placeholder.classList.add('cdk-drag-placeholder');\r\n        return placeholder;\r\n    }\r\n    /**\r\n     * Figures out the coordinates at which an element was picked up.\r\n     * @private\r\n     * @param {?} referenceElement Element that initiated the dragging.\r\n     * @param {?} event Event that initiated the dragging.\r\n     * @return {?}\r\n     */\r\n    _getPointerPositionInElement(referenceElement, event) {\r\n        /** @type {?} */\r\n        const elementRect = this._rootElement.getBoundingClientRect();\r\n        /** @type {?} */\r\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\r\n        /** @type {?} */\r\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\r\n        /** @type {?} */\r\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\r\n        /** @type {?} */\r\n        const x = point.pageX - referenceRect.left - this._scrollPosition.left;\r\n        /** @type {?} */\r\n        const y = point.pageY - referenceRect.top - this._scrollPosition.top;\r\n        return {\r\n            x: referenceRect.left - elementRect.left + x,\r\n            y: referenceRect.top - elementRect.top + y\r\n        };\r\n    }\r\n    /**\r\n     * Determines the point of the page that was touched by the user.\r\n     * @private\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _getPointerPositionOnPage(event) {\r\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\r\n        /** @type {?} */\r\n        const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\r\n        return {\r\n            x: point.pageX - this._scrollPosition.left,\r\n            y: point.pageY - this._scrollPosition.top\r\n        };\r\n    }\r\n    /**\r\n     * Gets the pointer position on the page, accounting for any position constraints.\r\n     * @private\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _getConstrainedPointerPosition(event) {\r\n        /** @type {?} */\r\n        const point = this._getPointerPositionOnPage(event);\r\n        /** @type {?} */\r\n        const constrainedPoint = this.constrainPosition ? this.constrainPosition(point, this) : point;\r\n        /** @type {?} */\r\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\r\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\r\n            constrainedPoint.y = this._pickupPositionOnPage.y;\r\n        }\r\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\r\n            constrainedPoint.x = this._pickupPositionOnPage.x;\r\n        }\r\n        if (this._boundaryRect) {\r\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\r\n            /** @type {?} */\r\n            const boundaryRect = this._boundaryRect;\r\n            /** @type {?} */\r\n            const previewRect = (/** @type {?} */ (this._previewRect));\r\n            /** @type {?} */\r\n            const minY = boundaryRect.top + pickupY;\r\n            /** @type {?} */\r\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\r\n            /** @type {?} */\r\n            const minX = boundaryRect.left + pickupX;\r\n            /** @type {?} */\r\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\r\n            constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\r\n            constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\r\n        }\r\n        return constrainedPoint;\r\n    }\r\n    /**\r\n     * Updates the current drag delta, based on the user's current pointer position on the page.\r\n     * @private\r\n     * @param {?} pointerPositionOnPage\r\n     * @return {?}\r\n     */\r\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\r\n        const { x, y } = pointerPositionOnPage;\r\n        /** @type {?} */\r\n        const delta = this._pointerDirectionDelta;\r\n        /** @type {?} */\r\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\r\n        // Amount of pixels the user has dragged since the last time the direction changed.\r\n        /** @type {?} */\r\n        const changeX = Math.abs(x - positionSinceLastChange.x);\r\n        /** @type {?} */\r\n        const changeY = Math.abs(y - positionSinceLastChange.y);\r\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\r\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\r\n        // To make the delta more consistent, we track how much the user has moved since the last\r\n        // delta change and we only update it after it has reached a certain threshold.\r\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\r\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\r\n            positionSinceLastChange.x = x;\r\n        }\r\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\r\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\r\n            positionSinceLastChange.y = y;\r\n        }\r\n        return delta;\r\n    }\r\n    /**\r\n     * Toggles the native drag interactions, based on how many handles are registered.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _toggleNativeDragInteractions() {\r\n        if (!this._rootElement || !this._handles) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\r\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\r\n            this._nativeInteractionsEnabled = shouldEnable;\r\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the manually-added event listeners from the root element.\r\n     * @private\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    _removeRootElementListeners(element) {\r\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\r\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\r\n    }\r\n    /**\r\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\r\n     * @private\r\n     * @param {?} x New transform value along the X axis.\r\n     * @param {?} y New transform value along the Y axis.\r\n     * @return {?}\r\n     */\r\n    _applyRootElementTransform(x, y) {\r\n        /** @type {?} */\r\n        const transform = getTransform(x, y);\r\n        // Cache the previous transform amount only after the first drag sequence, because\r\n        // we don't want our own transforms to stack on top of each other.\r\n        if (this._initialTransform == null) {\r\n            this._initialTransform = this._rootElement.style.transform || '';\r\n        }\r\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\r\n        // transform before the user's, because things like rotation can affect which direction\r\n        // the element will be translated towards.\r\n        this._rootElement.style.transform = this._initialTransform ?\r\n            transform + ' ' + this._initialTransform : transform;\r\n    }\r\n    /**\r\n     * Gets the distance that the user has dragged during the current drag sequence.\r\n     * @private\r\n     * @param {?} currentPosition Current position of the user's pointer.\r\n     * @return {?}\r\n     */\r\n    _getDragDistance(currentPosition) {\r\n        /** @type {?} */\r\n        const pickupPosition = this._pickupPositionOnPage;\r\n        if (pickupPosition) {\r\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\r\n        }\r\n        return { x: 0, y: 0 };\r\n    }\r\n    /**\r\n     * Cleans up any cached element dimensions that we don't need after dragging has stopped.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _cleanupCachedDimensions() {\r\n        this._boundaryRect = this._previewRect = undefined;\r\n    }\r\n    /**\r\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\r\n     * If not, the position is adjusted so that the element fits again.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _containInsideBoundaryOnResize() {\r\n        let { x, y } = this._passiveTransform;\r\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\r\n        /** @type {?} */\r\n        const elementRect = this._rootElement.getBoundingClientRect();\r\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\r\n        // different tab). Don't do anything in this case so we don't clear the user's position.\r\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\r\n            (elementRect.width === 0 && elementRect.height === 0)) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        const leftOverflow = boundaryRect.left - elementRect.left;\r\n        /** @type {?} */\r\n        const rightOverflow = elementRect.right - boundaryRect.right;\r\n        /** @type {?} */\r\n        const topOverflow = boundaryRect.top - elementRect.top;\r\n        /** @type {?} */\r\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\r\n        // If the element has become wider than the boundary, we can't\r\n        // do much to make it fit so we just anchor it to the left.\r\n        if (boundaryRect.width > elementRect.width) {\r\n            if (leftOverflow > 0) {\r\n                x += leftOverflow;\r\n            }\r\n            if (rightOverflow > 0) {\r\n                x -= rightOverflow;\r\n            }\r\n        }\r\n        else {\r\n            x = 0;\r\n        }\r\n        // If the element has become taller than the boundary, we can't\r\n        // do much to make it fit so we just anchor it to the top.\r\n        if (boundaryRect.height > elementRect.height) {\r\n            if (topOverflow > 0) {\r\n                y += topOverflow;\r\n            }\r\n            if (bottomOverflow > 0) {\r\n                y -= bottomOverflow;\r\n            }\r\n        }\r\n        else {\r\n            y = 0;\r\n        }\r\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\r\n            this.setFreeDragPosition({ y, x });\r\n        }\r\n    }\r\n    /**\r\n     * Gets the drag start delay, based on the event type.\r\n     * @private\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _getDragStartDelay(event) {\r\n        /** @type {?} */\r\n        const value = this.dragStartDelay;\r\n        if (typeof value === 'number') {\r\n            return value;\r\n        }\r\n        else if (isTouchEvent(event)) {\r\n            return value.touch;\r\n        }\r\n        return value ? value.mouse : 0;\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * Element displayed next to the user's pointer while the element is dragged.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._preview;\r\n    /**\r\n     * Reference to the view of the preview element.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._previewRef;\r\n    /**\r\n     * Reference to the view of the placeholder element.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._placeholderRef;\r\n    /**\r\n     * Element that is rendered instead of the draggable item while it is being sorted.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._placeholder;\r\n    /**\r\n     * Coordinates within the element at which the user picked up the element.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._pickupPositionInElement;\r\n    /**\r\n     * Coordinates on the page at which the user picked up the element.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._pickupPositionOnPage;\r\n    /**\r\n     * Anchor node used to save the place in the DOM where the element was\r\n     * picked up so that it can be restored at the end of the drag sequence.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._anchor;\r\n    /**\r\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\r\n     * passive transform in order for the dragged element to retain its new position\r\n     * after the user has stopped dragging and because we need to know the relative\r\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._passiveTransform;\r\n    /**\r\n     * CSS `transform` that is applied to the element while it's being dragged.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._activeTransform;\r\n    /**\r\n     * Inline `transform` value that the element had before the first dragging sequence.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._initialTransform;\r\n    /**\r\n     * Whether the dragging sequence has been started. Doesn't\r\n     * necessarily mean that the element has been moved.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._hasStartedDragging;\r\n    /**\r\n     * Whether the element has moved since the user started dragging it.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._hasMoved;\r\n    /**\r\n     * Drop container in which the DragRef resided when dragging began.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._initialContainer;\r\n    /**\r\n     * Cached scroll position on the page when the element was picked up.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._scrollPosition;\r\n    /**\r\n     * Emits when the item is being moved.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._moveEvents;\r\n    /**\r\n     * Keeps track of the direction in which the user is dragging along each axis.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._pointerDirectionDelta;\r\n    /**\r\n     * Pointer position at which the last change in the delta occurred.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._pointerPositionAtLastDirectionChange;\r\n    /**\r\n     * Root DOM node of the drag instance. This is the element that will\r\n     * be moved around as the user is dragging.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._rootElement;\r\n    /**\r\n     * Inline style value of `-webkit-tap-highlight-color` at the time the\r\n     * dragging was started. Used to restore the value once we're done dragging.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._rootElementTapHighlight;\r\n    /**\r\n     * Subscription to pointer movement events.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._pointerMoveSubscription;\r\n    /**\r\n     * Subscription to the event that is dispatched when the user lifts their pointer.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._pointerUpSubscription;\r\n    /**\r\n     * Subscription to the viewport being scrolled.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._scrollSubscription;\r\n    /**\r\n     * Subscription to the viewport being resized.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._resizeSubscription;\r\n    /**\r\n     * Time at which the last touch event occurred. Used to avoid firing the same\r\n     * events multiple times on touch devices where the browser will fire a fake\r\n     * mouse event for each touch event, after a certain time.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._lastTouchEventTime;\r\n    /**\r\n     * Time at which the last dragging sequence was started.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._dragStartTime;\r\n    /**\r\n     * Cached reference to the boundary element.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._boundaryElement;\r\n    /**\r\n     * Whether the native dragging interactions have been enabled on the root element.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._nativeInteractionsEnabled;\r\n    /**\r\n     * Cached dimensions of the preview element.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._previewRect;\r\n    /**\r\n     * Cached dimensions of the boundary element.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._boundaryRect;\r\n    /**\r\n     * Element that will be used as a template to create the draggable item's preview.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._previewTemplate;\r\n    /**\r\n     * Template for placeholder element rendered to show where a draggable would be dropped.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._placeholderTemplate;\r\n    /**\r\n     * Elements that can be used to drag the draggable item.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._handles;\r\n    /**\r\n     * Registered handles that are currently disabled.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._disabledHandles;\r\n    /**\r\n     * Droppable container that the draggable is a part of.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._dropContainer;\r\n    /**\r\n     * Layout direction of the item.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._direction;\r\n    /**\r\n     * Axis along which dragging is locked.\r\n     * @type {?}\r\n     */\r\n    DragRef.prototype.lockAxis;\r\n    /**\r\n     * Amount of milliseconds to wait after the user has put their\r\n     * pointer down before starting to drag the element.\r\n     * @type {?}\r\n     */\r\n    DragRef.prototype.dragStartDelay;\r\n    /**\r\n     * Class to be added to the preview element.\r\n     * @type {?}\r\n     */\r\n    DragRef.prototype.previewClass;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._disabled;\r\n    /**\r\n     * Emits as the drag sequence is being prepared.\r\n     * @type {?}\r\n     */\r\n    DragRef.prototype.beforeStarted;\r\n    /**\r\n     * Emits when the user starts dragging the item.\r\n     * @type {?}\r\n     */\r\n    DragRef.prototype.started;\r\n    /**\r\n     * Emits when the user has released a drag item, before any animations have started.\r\n     * @type {?}\r\n     */\r\n    DragRef.prototype.released;\r\n    /**\r\n     * Emits when the user stops dragging an item in the container.\r\n     * @type {?}\r\n     */\r\n    DragRef.prototype.ended;\r\n    /**\r\n     * Emits when the user has moved the item into a new container.\r\n     * @type {?}\r\n     */\r\n    DragRef.prototype.entered;\r\n    /**\r\n     * Emits when the user removes the item its container by dragging it into another container.\r\n     * @type {?}\r\n     */\r\n    DragRef.prototype.exited;\r\n    /**\r\n     * Emits when the user drops the item inside a container.\r\n     * @type {?}\r\n     */\r\n    DragRef.prototype.dropped;\r\n    /**\r\n     * Emits as the user is dragging the item. Use with caution,\r\n     * because this event will fire for every pixel that the user has dragged.\r\n     * @type {?}\r\n     */\r\n    DragRef.prototype.moved;\r\n    /**\r\n     * Arbitrary data that can be attached to the drag item.\r\n     * @type {?}\r\n     */\r\n    DragRef.prototype.data;\r\n    /**\r\n     * Function that can be used to customize the logic of how the position of the drag item\r\n     * is limited while it's being dragged. Gets called with a point containing the current position\r\n     * of the user's pointer on the page and should return a point describing where the item should\r\n     * be rendered.\r\n     * @type {?}\r\n     */\r\n    DragRef.prototype.constrainPosition;\r\n    /**\r\n     * Handler for the `mousedown`/`touchstart` events.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._pointerDown;\r\n    /**\r\n     * Handler that is invoked when the user moves their pointer after they've initiated a drag.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._pointerMove;\r\n    /**\r\n     * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._pointerUp;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._config;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._document;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._ngZone;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._viewportRuler;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragRef.prototype._dragDropRegistry;\r\n}\r\n/**\r\n * Point on the page or within an element.\r\n * @record\r\n */\r\nfunction Point() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    Point.prototype.x;\r\n    /** @type {?} */\r\n    Point.prototype.y;\r\n}\r\n/**\r\n * Gets a 3d `transform` that can be applied to an element.\r\n * @param {?} x Desired position of the element along the X axis.\r\n * @param {?} y Desired position of the element along the Y axis.\r\n * @return {?}\r\n */\r\nfunction getTransform(x, y) {\r\n    // Round the transforms since some browsers will\r\n    // blur the elements for sub-pixel transforms.\r\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\r\n}\r\n/**\r\n * Creates a deep clone of an element.\r\n * @param {?} node\r\n * @return {?}\r\n */\r\nfunction deepCloneNode(node) {\r\n    /** @type {?} */\r\n    const clone = (/** @type {?} */ (node.cloneNode(true)));\r\n    /** @type {?} */\r\n    const descendantsWithId = clone.querySelectorAll('[id]');\r\n    /** @type {?} */\r\n    const descendantCanvases = node.querySelectorAll('canvas');\r\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\r\n    clone.removeAttribute('id');\r\n    for (let i = 0; i < descendantsWithId.length; i++) {\r\n        descendantsWithId[i].removeAttribute('id');\r\n    }\r\n    // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\r\n    // We match up the cloned canvas to their sources using their index in the DOM.\r\n    if (descendantCanvases.length) {\r\n        /** @type {?} */\r\n        const cloneCanvases = clone.querySelectorAll('canvas');\r\n        for (let i = 0; i < descendantCanvases.length; i++) {\r\n            /** @type {?} */\r\n            const correspondingCloneContext = cloneCanvases[i].getContext('2d');\r\n            if (correspondingCloneContext) {\r\n                correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\r\n            }\r\n        }\r\n    }\r\n    return clone;\r\n}\r\n/**\r\n * Clamps a value between a minimum and a maximum.\r\n * @param {?} value\r\n * @param {?} min\r\n * @param {?} max\r\n * @return {?}\r\n */\r\nfunction clamp(value, min, max) {\r\n    return Math.max(min, Math.min(max, value));\r\n}\r\n/**\r\n * Helper to remove a node from the DOM and to do all the necessary null checks.\r\n * @param {?} node Node to be removed.\r\n * @return {?}\r\n */\r\nfunction removeNode(node) {\r\n    if (node && node.parentNode) {\r\n        node.parentNode.removeChild(node);\r\n    }\r\n}\r\n/**\r\n * Determines whether an event is a touch event.\r\n * @param {?} event\r\n * @return {?}\r\n */\r\nfunction isTouchEvent(event) {\r\n    // This function is called for every pixel that the user has dragged so we need it to be\r\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\r\n    // that if the event's name starts with `t`, it's a touch event.\r\n    return event.type[0] === 't';\r\n}\r\n/**\r\n * Gets the element into which the drag preview should be inserted.\r\n * @param {?} documentRef\r\n * @return {?}\r\n */\r\nfunction getPreviewInsertionPoint(documentRef) {\r\n    // We can't use the body if the user is in fullscreen mode,\r\n    // because the preview will render under the fullscreen element.\r\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\r\n    return documentRef.fullscreenElement ||\r\n        documentRef.webkitFullscreenElement ||\r\n        documentRef.mozFullScreenElement ||\r\n        documentRef.msFullscreenElement ||\r\n        documentRef.body;\r\n}\r\n/**\r\n * Gets the root HTML element of an embedded view.\r\n * If the root is not an HTML element it gets wrapped in one.\r\n * @param {?} viewRef\r\n * @param {?} _document\r\n * @return {?}\r\n */\r\nfunction getRootNode(viewRef, _document) {\r\n    /** @type {?} */\r\n    const rootNode = viewRef.rootNodes[0];\r\n    if (rootNode.nodeType !== _document.ELEMENT_NODE) {\r\n        /** @type {?} */\r\n        const wrapper = _document.createElement('div');\r\n        wrapper.appendChild(rootNode);\r\n        return wrapper;\r\n    }\r\n    return (/** @type {?} */ (rootNode));\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/cdk/drag-drop/drag-utils.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Moves an item one index in an array to another.\r\n * @template T\r\n * @param {?} array Array in which to move the item.\r\n * @param {?} fromIndex Starting index of the item.\r\n * @param {?} toIndex Index to which the item should be moved.\r\n * @return {?}\r\n */\r\nfunction moveItemInArray(array, fromIndex, toIndex) {\r\n    /** @type {?} */\r\n    const from = clamp$1(fromIndex, array.length - 1);\r\n    /** @type {?} */\r\n    const to = clamp$1(toIndex, array.length - 1);\r\n    if (from === to) {\r\n        return;\r\n    }\r\n    /** @type {?} */\r\n    const target = array[from];\r\n    /** @type {?} */\r\n    const delta = to < from ? -1 : 1;\r\n    for (let i = from; i !== to; i += delta) {\r\n        array[i] = array[i + delta];\r\n    }\r\n    array[to] = target;\r\n}\r\n/**\r\n * Moves an item from one array to another.\r\n * @template T\r\n * @param {?} currentArray Array from which to transfer the item.\r\n * @param {?} targetArray Array into which to put the item.\r\n * @param {?} currentIndex Index of the item in its current array.\r\n * @param {?} targetIndex Index at which to insert the item.\r\n * @return {?}\r\n */\r\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\r\n    /** @type {?} */\r\n    const from = clamp$1(currentIndex, currentArray.length - 1);\r\n    /** @type {?} */\r\n    const to = clamp$1(targetIndex, targetArray.length);\r\n    if (currentArray.length) {\r\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\r\n    }\r\n}\r\n/**\r\n * Copies an item from one array to another, leaving it in its\r\n * original position in current array.\r\n * @template T\r\n * @param {?} currentArray Array from which to copy the item.\r\n * @param {?} targetArray Array into which is copy the item.\r\n * @param {?} currentIndex Index of the item in its current array.\r\n * @param {?} targetIndex Index at which to insert the item.\r\n *\r\n * @return {?}\r\n */\r\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\r\n    /** @type {?} */\r\n    const to = clamp$1(targetIndex, targetArray.length);\r\n    if (currentArray.length) {\r\n        targetArray.splice(to, 0, currentArray[currentIndex]);\r\n    }\r\n}\r\n/**\r\n * Clamps a number between zero and a maximum.\r\n * @param {?} value\r\n * @param {?} max\r\n * @return {?}\r\n */\r\nfunction clamp$1(value, max) {\r\n    return Math.max(0, Math.min(max, value));\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/cdk/drag-drop/drop-list-ref.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Proximity, as a ratio to width/height, at which a\r\n * dragged item will affect the drop container.\r\n * @type {?}\r\n */\r\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\r\n/**\r\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\r\n * viewport. The value comes from trying it out manually until it feels right.\r\n * @type {?}\r\n */\r\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\r\n/**\r\n * Number of pixels to scroll for each frame when auto-scrolling an element.\r\n * The value comes from trying it out manually until it feels right.\r\n * @type {?}\r\n */\r\nconst AUTO_SCROLL_STEP = 2;\r\n/**\r\n * Entry in the position cache for draggable items.\r\n * \\@docs-private\r\n * @record\r\n */\r\nfunction CachedItemPosition() { }\r\nif (false) {\r\n    /**\r\n     * Instance of the drag item.\r\n     * @type {?}\r\n     */\r\n    CachedItemPosition.prototype.drag;\r\n    /**\r\n     * Dimensions of the item.\r\n     * @type {?}\r\n     */\r\n    CachedItemPosition.prototype.clientRect;\r\n    /**\r\n     * Amount by which the item has been moved since dragging started.\r\n     * @type {?}\r\n     */\r\n    CachedItemPosition.prototype.offset;\r\n}\r\n/**\r\n * Object holding the scroll position of something.\r\n * @record\r\n */\r\nfunction ScrollPosition() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    ScrollPosition.prototype.top;\r\n    /** @type {?} */\r\n    ScrollPosition.prototype.left;\r\n}\r\n/** @enum {number} */\r\nconst AutoScrollVerticalDirection = {\r\n    NONE: 0, UP: 1, DOWN: 2,\r\n};\r\n/** @enum {number} */\r\nconst AutoScrollHorizontalDirection = {\r\n    NONE: 0, LEFT: 1, RIGHT: 2,\r\n};\r\n/**\r\n * Internal compile-time-only representation of a `DropListRef`.\r\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\r\n * \\@docs-private\r\n * @record\r\n */\r\nfunction DropListRefInternal() { }\r\n/**\r\n * Reference to a drop list. Used to manipulate or dispose of the container.\r\n * @template T\r\n */\r\nclass DropListRef {\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} _dragDropRegistry\r\n     * @param {?} _document\r\n     * @param {?} _ngZone\r\n     * @param {?} _viewportRuler\r\n     */\r\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\r\n        this._dragDropRegistry = _dragDropRegistry;\r\n        this._ngZone = _ngZone;\r\n        this._viewportRuler = _viewportRuler;\r\n        /**\r\n         * Whether starting a dragging sequence from this container is disabled.\r\n         */\r\n        this.disabled = false;\r\n        /**\r\n         * Whether sorting items within the list is disabled.\r\n         */\r\n        this.sortingDisabled = false;\r\n        /**\r\n         * Whether auto-scrolling the view when the user\r\n         * moves their pointer close to the edges is disabled.\r\n         */\r\n        this.autoScrollDisabled = false;\r\n        /**\r\n         * Function that is used to determine whether an item\r\n         * is allowed to be moved into a drop container.\r\n         */\r\n        this.enterPredicate = (/**\r\n         * @return {?}\r\n         */\r\n        () => true);\r\n        /**\r\n         * Emits right before dragging has started.\r\n         */\r\n        this.beforeStarted = new Subject();\r\n        /**\r\n         * Emits when the user has moved a new drag item into this container.\r\n         */\r\n        this.entered = new Subject();\r\n        /**\r\n         * Emits when the user removes an item from the container\r\n         * by dragging it into another container.\r\n         */\r\n        this.exited = new Subject();\r\n        /**\r\n         * Emits when the user drops an item inside the container.\r\n         */\r\n        this.dropped = new Subject();\r\n        /**\r\n         * Emits as the user is swapping items while actively dragging.\r\n         */\r\n        this.sorted = new Subject();\r\n        /**\r\n         * Whether an item in the list is being dragged.\r\n         */\r\n        this._isDragging = false;\r\n        /**\r\n         * Cache of the dimensions of all the items inside the container.\r\n         */\r\n        this._itemPositions = [];\r\n        /**\r\n         * Keeps track of the container's scroll position.\r\n         */\r\n        this._scrollPosition = { top: 0, left: 0 };\r\n        /**\r\n         * Keeps track of the scroll position of the viewport.\r\n         */\r\n        this._viewportScrollPosition = { top: 0, left: 0 };\r\n        /**\r\n         * Keeps track of the item that was last swapped with the dragged item, as\r\n         * well as what direction the pointer was moving in when the swap occured.\r\n         */\r\n        this._previousSwap = { drag: (/** @type {?} */ (null)), delta: 0 };\r\n        /**\r\n         * Drop lists that are connected to the current one.\r\n         */\r\n        this._siblings = [];\r\n        /**\r\n         * Direction in which the list is oriented.\r\n         */\r\n        this._orientation = 'vertical';\r\n        /**\r\n         * Connected siblings that currently have a dragged item.\r\n         */\r\n        this._activeSiblings = new Set();\r\n        /**\r\n         * Layout direction of the drop list.\r\n         */\r\n        this._direction = 'ltr';\r\n        /**\r\n         * Subscription to the window being scrolled.\r\n         */\r\n        this._viewportScrollSubscription = Subscription.EMPTY;\r\n        /**\r\n         * Vertical direction in which the list is currently scrolling.\r\n         */\r\n        this._verticalScrollDirection = 0 /* NONE */;\r\n        /**\r\n         * Horizontal direction in which the list is currently scrolling.\r\n         */\r\n        this._horizontalScrollDirection = 0 /* NONE */;\r\n        /**\r\n         * Used to signal to the current auto-scroll sequence when to stop.\r\n         */\r\n        this._stopScrollTimers = new Subject();\r\n        /**\r\n         * Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly.\r\n         */\r\n        this._cachedShadowRoot = null;\r\n        /**\r\n         * Handles the container being scrolled. Has to be an arrow function to preserve the context.\r\n         */\r\n        this._handleScroll = (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            if (!this.isDragging()) {\r\n                return;\r\n            }\r\n            /** @type {?} */\r\n            const element = coerceElement(this.element);\r\n            this._updateAfterScroll(this._scrollPosition, element.scrollTop, element.scrollLeft);\r\n        });\r\n        /**\r\n         * Starts the interval that'll auto-scroll the element.\r\n         */\r\n        this._startScrollInterval = (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this._stopScrolling();\r\n            interval(0, animationFrameScheduler)\r\n                .pipe(takeUntil(this._stopScrollTimers))\r\n                .subscribe((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                /** @type {?} */\r\n                const node = this._scrollNode;\r\n                if (this._verticalScrollDirection === 1 /* UP */) {\r\n                    incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\r\n                }\r\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\r\n                    incrementVerticalScroll(node, AUTO_SCROLL_STEP);\r\n                }\r\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\r\n                    incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\r\n                }\r\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\r\n                    incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\r\n                }\r\n            }));\r\n        });\r\n        this.element = coerceElement(element);\r\n        this._document = _document;\r\n        _dragDropRegistry.registerDropContainer(this);\r\n    }\r\n    /**\r\n     * Removes the drop list functionality from the DOM element.\r\n     * @return {?}\r\n     */\r\n    dispose() {\r\n        this._stopScrolling();\r\n        this._stopScrollTimers.complete();\r\n        this._removeListeners();\r\n        this.beforeStarted.complete();\r\n        this.entered.complete();\r\n        this.exited.complete();\r\n        this.dropped.complete();\r\n        this.sorted.complete();\r\n        this._activeSiblings.clear();\r\n        this._scrollNode = (/** @type {?} */ (null));\r\n        this._dragDropRegistry.removeDropContainer(this);\r\n    }\r\n    /**\r\n     * Whether an item from this list is currently being dragged.\r\n     * @return {?}\r\n     */\r\n    isDragging() {\r\n        return this._isDragging;\r\n    }\r\n    /**\r\n     * Starts dragging an item.\r\n     * @return {?}\r\n     */\r\n    start() {\r\n        /** @type {?} */\r\n        const element = coerceElement(this.element);\r\n        this.beforeStarted.next();\r\n        this._isDragging = true;\r\n        this._cacheItems();\r\n        this._siblings.forEach((/**\r\n         * @param {?} sibling\r\n         * @return {?}\r\n         */\r\n        sibling => sibling._startReceiving(this)));\r\n        this._removeListeners();\r\n        this._ngZone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => element.addEventListener('scroll', this._handleScroll)));\r\n        this._listenToScrollEvents();\r\n    }\r\n    /**\r\n     * Emits an event to indicate that the user moved an item into the container.\r\n     * @param {?} item Item that was moved into the container.\r\n     * @param {?} pointerX Position of the item along the X axis.\r\n     * @param {?} pointerY Position of the item along the Y axis.\r\n     * @return {?}\r\n     */\r\n    enter(item, pointerX, pointerY) {\r\n        this.start();\r\n        // If sorting is disabled, we want the item to return to its starting\r\n        // position if the user is returning it to its initial container.\r\n        /** @type {?} */\r\n        let newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\r\n        if (newIndex === -1) {\r\n            // We use the coordinates of where the item entered the drop\r\n            // zone to figure out at which index it should be inserted.\r\n            newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\r\n        }\r\n        /** @type {?} */\r\n        const activeDraggables = this._activeDraggables;\r\n        /** @type {?} */\r\n        const currentIndex = activeDraggables.indexOf(item);\r\n        /** @type {?} */\r\n        const placeholder = item.getPlaceholderElement();\r\n        /** @type {?} */\r\n        let newPositionReference = activeDraggables[newIndex];\r\n        // If the item at the new position is the same as the item that is being dragged,\r\n        // it means that we're trying to restore the item to its initial position. In this\r\n        // case we should use the next item from the list as the reference.\r\n        if (newPositionReference === item) {\r\n            newPositionReference = activeDraggables[newIndex + 1];\r\n        }\r\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\r\n        // into another container and back again), we have to ensure that it isn't duplicated.\r\n        if (currentIndex > -1) {\r\n            activeDraggables.splice(currentIndex, 1);\r\n        }\r\n        // Don't use items that are being dragged as a reference, because\r\n        // their element has been moved down to the bottom of the body.\r\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\r\n            /** @type {?} */\r\n            const element = newPositionReference.getRootElement();\r\n            (/** @type {?} */ (element.parentElement)).insertBefore(placeholder, element);\r\n            activeDraggables.splice(newIndex, 0, item);\r\n        }\r\n        else {\r\n            coerceElement(this.element).appendChild(placeholder);\r\n            activeDraggables.push(item);\r\n        }\r\n        // The transform needs to be cleared so it doesn't throw off the measurements.\r\n        placeholder.style.transform = '';\r\n        // Note that the positions were already cached when we called `start` above,\r\n        // but we need to refresh them since the amount of items has changed.\r\n        this._cacheItemPositions();\r\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\r\n    }\r\n    /**\r\n     * Removes an item from the container after it was dragged into another container by the user.\r\n     * @param {?} item Item that was dragged out.\r\n     * @return {?}\r\n     */\r\n    exit(item) {\r\n        this._reset();\r\n        this.exited.next({ item, container: this });\r\n    }\r\n    /**\r\n     * Drops an item into this container.\r\n     * @param {?} item Item being dropped into the container.\r\n     * @param {?} currentIndex Index at which the item should be inserted.\r\n     * @param {?} previousContainer Container from which the item got dragged in.\r\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\r\n     *    container when the item was dropped.\r\n     * @param {?} distance Distance the user has dragged since the start of the dragging sequence.\r\n     * @return {?}\r\n     */\r\n    drop(item, currentIndex, previousContainer, isPointerOverContainer, distance) {\r\n        this._reset();\r\n        this.dropped.next({\r\n            item,\r\n            currentIndex,\r\n            previousIndex: previousContainer.getItemIndex(item),\r\n            container: this,\r\n            previousContainer,\r\n            isPointerOverContainer,\r\n            distance\r\n        });\r\n    }\r\n    /**\r\n     * Sets the draggable items that are a part of this list.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} items Items that are a part of this list.\r\n     * @return {THIS}\r\n     */\r\n    withItems(items) {\r\n        (/** @type {?} */ (this))._draggables = items;\r\n        items.forEach((/**\r\n         * @param {?} item\r\n         * @return {?}\r\n         */\r\n        item => item._withDropContainer((/** @type {?} */ (this)))));\r\n        if ((/** @type {?} */ (this)).isDragging()) {\r\n            (/** @type {?} */ (this))._cacheItems();\r\n        }\r\n        return (/** @type {?} */ (this));\r\n    }\r\n    /**\r\n     * Sets the layout direction of the drop list.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} direction\r\n     * @return {THIS}\r\n     */\r\n    withDirection(direction) {\r\n        (/** @type {?} */ (this))._direction = direction;\r\n        return (/** @type {?} */ (this));\r\n    }\r\n    /**\r\n     * Sets the containers that are connected to this one. When two or more containers are\r\n     * connected, the user will be allowed to transfer items between them.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} connectedTo Other containers that the current containers should be connected to.\r\n     * @return {THIS}\r\n     */\r\n    connectedTo(connectedTo) {\r\n        (/** @type {?} */ (this))._siblings = connectedTo.slice();\r\n        return (/** @type {?} */ (this));\r\n    }\r\n    /**\r\n     * Sets the orientation of the container.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} orientation New orientation for the container.\r\n     * @return {THIS}\r\n     */\r\n    withOrientation(orientation) {\r\n        (/** @type {?} */ (this))._orientation = orientation;\r\n        return (/** @type {?} */ (this));\r\n    }\r\n    /**\r\n     * Figures out the index of an item in the container.\r\n     * @param {?} item Item whose index should be determined.\r\n     * @return {?}\r\n     */\r\n    getItemIndex(item) {\r\n        if (!this._isDragging) {\r\n            return this._draggables.indexOf(item);\r\n        }\r\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\r\n        // The rest of the logic still stands no matter what orientation we're in, however\r\n        // we need to invert the array when determining the index.\r\n        /** @type {?} */\r\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\r\n            this._itemPositions.slice().reverse() : this._itemPositions;\r\n        return findIndex(items, (/**\r\n         * @param {?} currentItem\r\n         * @return {?}\r\n         */\r\n        currentItem => currentItem.drag === item));\r\n    }\r\n    /**\r\n     * Whether the list is able to receive the item that\r\n     * is currently being dragged inside a connected drop list.\r\n     * @return {?}\r\n     */\r\n    isReceiving() {\r\n        return this._activeSiblings.size > 0;\r\n    }\r\n    /**\r\n     * Sorts an item inside the container based on its position.\r\n     * @param {?} item Item to be sorted.\r\n     * @param {?} pointerX Position of the item along the X axis.\r\n     * @param {?} pointerY Position of the item along the Y axis.\r\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\r\n     * @return {?}\r\n     */\r\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\r\n        // Don't sort the item if sorting is disabled or it's out of range.\r\n        if (this.sortingDisabled || !this._isPointerNearDropContainer(pointerX, pointerY)) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        const siblings = this._itemPositions;\r\n        /** @type {?} */\r\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\r\n        if (newIndex === -1 && siblings.length > 0) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        const isHorizontal = this._orientation === 'horizontal';\r\n        /** @type {?} */\r\n        const currentIndex = findIndex(siblings, (/**\r\n         * @param {?} currentItem\r\n         * @return {?}\r\n         */\r\n        currentItem => currentItem.drag === item));\r\n        /** @type {?} */\r\n        const siblingAtNewPosition = siblings[newIndex];\r\n        /** @type {?} */\r\n        const currentPosition = siblings[currentIndex].clientRect;\r\n        /** @type {?} */\r\n        const newPosition = siblingAtNewPosition.clientRect;\r\n        /** @type {?} */\r\n        const delta = currentIndex > newIndex ? 1 : -1;\r\n        this._previousSwap.drag = siblingAtNewPosition.drag;\r\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\r\n        // How many pixels the item's placeholder should be offset.\r\n        /** @type {?} */\r\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\r\n        // How many pixels all the other items should be offset.\r\n        /** @type {?} */\r\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\r\n        // Save the previous order of the items before moving the item to its new index.\r\n        // We use this to check whether an item has been moved as a result of the sorting.\r\n        /** @type {?} */\r\n        const oldOrder = siblings.slice();\r\n        // Shuffle the array in place.\r\n        moveItemInArray(siblings, currentIndex, newIndex);\r\n        this.sorted.next({\r\n            previousIndex: currentIndex,\r\n            currentIndex: newIndex,\r\n            container: this,\r\n            item\r\n        });\r\n        siblings.forEach((/**\r\n         * @param {?} sibling\r\n         * @param {?} index\r\n         * @return {?}\r\n         */\r\n        (sibling, index) => {\r\n            // Don't do anything if the position hasn't changed.\r\n            if (oldOrder[index] === sibling) {\r\n                return;\r\n            }\r\n            /** @type {?} */\r\n            const isDraggedItem = sibling.drag === item;\r\n            /** @type {?} */\r\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\r\n            /** @type {?} */\r\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\r\n                sibling.drag.getRootElement();\r\n            // Update the offset to reflect the new position.\r\n            sibling.offset += offset;\r\n            // Since we're moving the items with a `transform`, we need to adjust their cached\r\n            // client rects to reflect their new position, as well as swap their positions in the cache.\r\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\r\n            // elements may be mid-animation which will give us a wrong result.\r\n            if (isHorizontal) {\r\n                // Round the transforms since some browsers will\r\n                // blur the elements, for sub-pixel transforms.\r\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\r\n                adjustClientRect(sibling.clientRect, 0, offset);\r\n            }\r\n            else {\r\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\r\n                adjustClientRect(sibling.clientRect, offset, 0);\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * Checks whether the user's pointer is close to the edges of either the\r\n     * viewport or the drop list and starts the auto-scroll sequence.\r\n     * @param {?} pointerX User's pointer position along the x axis.\r\n     * @param {?} pointerY User's pointer position along the y axis.\r\n     * @return {?}\r\n     */\r\n    _startScrollingIfNecessary(pointerX, pointerY) {\r\n        if (this.autoScrollDisabled) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        let scrollNode;\r\n        /** @type {?} */\r\n        let verticalScrollDirection = 0 /* NONE */;\r\n        /** @type {?} */\r\n        let horizontalScrollDirection = 0 /* NONE */;\r\n        // Check whether we should start scrolling the container.\r\n        if (this._isPointerNearDropContainer(pointerX, pointerY)) {\r\n            /** @type {?} */\r\n            const element = coerceElement(this.element);\r\n            [verticalScrollDirection, horizontalScrollDirection] =\r\n                getElementScrollDirections(element, this._clientRect, pointerX, pointerY);\r\n            if (verticalScrollDirection || horizontalScrollDirection) {\r\n                scrollNode = element;\r\n            }\r\n        }\r\n        // Otherwise check if we can start scrolling the viewport.\r\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\r\n            const { width, height } = this._viewportRuler.getViewportSize();\r\n            /** @type {?} */\r\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\r\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\r\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\r\n            scrollNode = window;\r\n        }\r\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\r\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\r\n            scrollNode !== this._scrollNode)) {\r\n            this._verticalScrollDirection = verticalScrollDirection;\r\n            this._horizontalScrollDirection = horizontalScrollDirection;\r\n            this._scrollNode = scrollNode;\r\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\r\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\r\n            }\r\n            else {\r\n                this._stopScrolling();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Stops any currently-running auto-scroll sequences.\r\n     * @return {?}\r\n     */\r\n    _stopScrolling() {\r\n        this._stopScrollTimers.next();\r\n    }\r\n    /**\r\n     * Caches the position of the drop list.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _cacheOwnPosition() {\r\n        /** @type {?} */\r\n        const element = coerceElement(this.element);\r\n        this._clientRect = getMutableClientRect(element);\r\n        this._scrollPosition = { top: element.scrollTop, left: element.scrollLeft };\r\n    }\r\n    /**\r\n     * Refreshes the position cache of the items and sibling containers.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _cacheItemPositions() {\r\n        /** @type {?} */\r\n        const isHorizontal = this._orientation === 'horizontal';\r\n        this._itemPositions = this._activeDraggables.map((/**\r\n         * @param {?} drag\r\n         * @return {?}\r\n         */\r\n        drag => {\r\n            /** @type {?} */\r\n            const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\r\n                // If the element is being dragged, we have to measure the\r\n                // placeholder, because the element is hidden.\r\n                drag.getPlaceholderElement() :\r\n                drag.getRootElement();\r\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\r\n        })).sort((/**\r\n         * @param {?} a\r\n         * @param {?} b\r\n         * @return {?}\r\n         */\r\n        (a, b) => {\r\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\r\n                a.clientRect.top - b.clientRect.top;\r\n        }));\r\n    }\r\n    /**\r\n     * Resets the container to its initial state.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _reset() {\r\n        this._isDragging = false;\r\n        // TODO(crisbeto): may have to wait for the animations to finish.\r\n        this._activeDraggables.forEach((/**\r\n         * @param {?} item\r\n         * @return {?}\r\n         */\r\n        item => item.getRootElement().style.transform = ''));\r\n        this._siblings.forEach((/**\r\n         * @param {?} sibling\r\n         * @return {?}\r\n         */\r\n        sibling => sibling._stopReceiving(this)));\r\n        this._activeDraggables = [];\r\n        this._itemPositions = [];\r\n        this._previousSwap.drag = null;\r\n        this._previousSwap.delta = 0;\r\n        this._stopScrolling();\r\n        this._removeListeners();\r\n    }\r\n    /**\r\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\r\n     * @private\r\n     * @param {?} currentIndex Index of the item currently being dragged.\r\n     * @param {?} siblings All of the items in the list.\r\n     * @param {?} delta Direction in which the user is moving.\r\n     * @return {?}\r\n     */\r\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\r\n        /** @type {?} */\r\n        const isHorizontal = this._orientation === 'horizontal';\r\n        /** @type {?} */\r\n        const currentPosition = siblings[currentIndex].clientRect;\r\n        /** @type {?} */\r\n        const immediateSibling = siblings[currentIndex + delta * -1];\r\n        /** @type {?} */\r\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\r\n        if (immediateSibling) {\r\n            /** @type {?} */\r\n            const start = isHorizontal ? 'left' : 'top';\r\n            /** @type {?} */\r\n            const end = isHorizontal ? 'right' : 'bottom';\r\n            // Get the spacing between the start of the current item and the end of the one immediately\r\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\r\n            // offset in order to push the element to where it will be when it's inline and is influenced\r\n            // by the `margin` of its siblings.\r\n            if (delta === -1) {\r\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\r\n            }\r\n            else {\r\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\r\n            }\r\n        }\r\n        return siblingOffset;\r\n    }\r\n    /**\r\n     * Checks whether the pointer coordinates are close to the drop container.\r\n     * @private\r\n     * @param {?} pointerX Coordinates along the X axis.\r\n     * @param {?} pointerY Coordinates along the Y axis.\r\n     * @return {?}\r\n     */\r\n    _isPointerNearDropContainer(pointerX, pointerY) {\r\n        const { top, right, bottom, left, width, height } = this._clientRect;\r\n        /** @type {?} */\r\n        const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\r\n        /** @type {?} */\r\n        const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\r\n        return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\r\n            pointerX > left - xThreshold && pointerX < right + xThreshold;\r\n    }\r\n    /**\r\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\r\n     * @private\r\n     * @param {?} currentPosition Current position of the item.\r\n     * @param {?} newPosition Position of the item where the current item should be moved.\r\n     * @param {?} delta Direction in which the user is moving.\r\n     * @return {?}\r\n     */\r\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\r\n        /** @type {?} */\r\n        const isHorizontal = this._orientation === 'horizontal';\r\n        /** @type {?} */\r\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\r\n            newPosition.top - currentPosition.top;\r\n        // Account for differences in the item width/height.\r\n        if (delta === -1) {\r\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\r\n                newPosition.height - currentPosition.height;\r\n        }\r\n        return itemOffset;\r\n    }\r\n    /**\r\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\r\n     * @private\r\n     * @param {?} item Item that is being sorted.\r\n     * @param {?} pointerX Position of the user's pointer along the X axis.\r\n     * @param {?} pointerY Position of the user's pointer along the Y axis.\r\n     * @param {?=} delta Direction in which the user is moving their pointer.\r\n     * @return {?}\r\n     */\r\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\r\n        /** @type {?} */\r\n        const isHorizontal = this._orientation === 'horizontal';\r\n        return findIndex(this._itemPositions, (/**\r\n         * @param {?} __0\r\n         * @param {?} _\r\n         * @param {?} array\r\n         * @return {?}\r\n         */\r\n        ({ drag, clientRect }, _, array) => {\r\n            if (drag === item) {\r\n                // If there's only one item left in the container, it must be\r\n                // the dragged item itself so we use it as a reference.\r\n                return array.length < 2;\r\n            }\r\n            if (delta) {\r\n                /** @type {?} */\r\n                const direction = isHorizontal ? delta.x : delta.y;\r\n                // If the user is still hovering over the same item as last time, and they didn't change\r\n                // the direction in which they're dragging, we don't consider it a direction swap.\r\n                if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\r\n                    return false;\r\n                }\r\n            }\r\n            return isHorizontal ?\r\n                // Round these down since most browsers report client rects with\r\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\r\n                pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\r\n                pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\r\n        }));\r\n    }\r\n    /**\r\n     * Caches the current items in the list and their positions.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _cacheItems() {\r\n        this._activeDraggables = this._draggables.slice();\r\n        this._cacheItemPositions();\r\n        this._cacheOwnPosition();\r\n    }\r\n    /**\r\n     * Updates the internal state of the container after a scroll event has happened.\r\n     * @private\r\n     * @param {?} scrollPosition Object that is keeping track of the scroll position.\r\n     * @param {?} newTop New top scroll position.\r\n     * @param {?} newLeft New left scroll position.\r\n     * @param {?=} extraClientRect Extra `ClientRect` object that should be updated, in addition to the\r\n     *  ones of the drag items. Useful when the viewport has been scrolled and we also need to update\r\n     *  the `ClientRect` of the list.\r\n     * @return {?}\r\n     */\r\n    _updateAfterScroll(scrollPosition, newTop, newLeft, extraClientRect) {\r\n        /** @type {?} */\r\n        const topDifference = scrollPosition.top - newTop;\r\n        /** @type {?} */\r\n        const leftDifference = scrollPosition.left - newLeft;\r\n        if (extraClientRect) {\r\n            adjustClientRect(extraClientRect, topDifference, leftDifference);\r\n        }\r\n        // Since we know the amount that the user has scrolled we can shift all of the client rectangles\r\n        // ourselves. This is cheaper than re-measuring everything and we can avoid inconsistent\r\n        // behavior where we might be measuring the element before its position has changed.\r\n        this._itemPositions.forEach((/**\r\n         * @param {?} __0\r\n         * @return {?}\r\n         */\r\n        ({ clientRect }) => {\r\n            adjustClientRect(clientRect, topDifference, leftDifference);\r\n        }));\r\n        // We need two loops for this, because we want all of the cached\r\n        // positions to be up-to-date before we re-sort the item.\r\n        this._itemPositions.forEach((/**\r\n         * @param {?} __0\r\n         * @return {?}\r\n         */\r\n        ({ drag }) => {\r\n            if (this._dragDropRegistry.isDragging(drag)) {\r\n                // We need to re-sort the item manually, because the pointer move\r\n                // events won't be dispatched while the user is scrolling.\r\n                drag._sortFromLastPointerPosition();\r\n            }\r\n        }));\r\n        scrollPosition.top = newTop;\r\n        scrollPosition.left = newLeft;\r\n    }\r\n    /**\r\n     * Removes the event listeners associated with this drop list.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _removeListeners() {\r\n        coerceElement(this.element).removeEventListener('scroll', this._handleScroll);\r\n        this._viewportScrollSubscription.unsubscribe();\r\n    }\r\n    /**\r\n     * Checks whether the user's pointer is positioned over the container.\r\n     * @param {?} x Pointer position along the X axis.\r\n     * @param {?} y Pointer position along the Y axis.\r\n     * @return {?}\r\n     */\r\n    _isOverContainer(x, y) {\r\n        return isInsideClientRect(this._clientRect, x, y);\r\n    }\r\n    /**\r\n     * Figures out whether an item should be moved into a sibling\r\n     * drop container, based on its current position.\r\n     * @param {?} item Drag item that is being moved.\r\n     * @param {?} x Position of the item along the X axis.\r\n     * @param {?} y Position of the item along the Y axis.\r\n     * @return {?}\r\n     */\r\n    _getSiblingContainerFromPosition(item, x, y) {\r\n        return this._siblings.find((/**\r\n         * @param {?} sibling\r\n         * @return {?}\r\n         */\r\n        sibling => sibling._canReceive(item, x, y)));\r\n    }\r\n    /**\r\n     * Checks whether the drop list can receive the passed-in item.\r\n     * @param {?} item Item that is being dragged into the list.\r\n     * @param {?} x Position of the item along the X axis.\r\n     * @param {?} y Position of the item along the Y axis.\r\n     * @return {?}\r\n     */\r\n    _canReceive(item, x, y) {\r\n        if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\r\n            return false;\r\n        }\r\n        /** @type {?} */\r\n        const elementFromPoint = (/** @type {?} */ (this._getShadowRoot().elementFromPoint(x, y)));\r\n        // If there's no element at the pointer position, then\r\n        // the client rect is probably scrolled out of the view.\r\n        if (!elementFromPoint) {\r\n            return false;\r\n        }\r\n        /** @type {?} */\r\n        const nativeElement = coerceElement(this.element);\r\n        // The `ClientRect`, that we're using to find the container over which the user is\r\n        // hovering, doesn't give us any information on whether the element has been scrolled\r\n        // out of the view or whether it's overlapping with other containers. This means that\r\n        // we could end up transferring the item into a container that's invisible or is positioned\r\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\r\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\r\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\r\n    }\r\n    /**\r\n     * Called by one of the connected drop lists when a dragging sequence has started.\r\n     * @param {?} sibling Sibling in which dragging has started.\r\n     * @return {?}\r\n     */\r\n    _startReceiving(sibling) {\r\n        /** @type {?} */\r\n        const activeSiblings = this._activeSiblings;\r\n        if (!activeSiblings.has(sibling)) {\r\n            activeSiblings.add(sibling);\r\n            this._cacheOwnPosition();\r\n            this._listenToScrollEvents();\r\n        }\r\n    }\r\n    /**\r\n     * Called by a connected drop list when dragging has stopped.\r\n     * @param {?} sibling Sibling whose dragging has stopped.\r\n     * @return {?}\r\n     */\r\n    _stopReceiving(sibling) {\r\n        this._activeSiblings.delete(sibling);\r\n        this._viewportScrollSubscription.unsubscribe();\r\n    }\r\n    /**\r\n     * Starts listening to scroll events on the viewport.\r\n     * Used for updating the internal state of the list.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _listenToScrollEvents() {\r\n        this._viewportScrollPosition = (/** @type {?} */ (this._viewportRuler)).getViewportScrollPosition();\r\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            if (this.isDragging()) {\r\n                /** @type {?} */\r\n                const newPosition = (/** @type {?} */ (this._viewportRuler)).getViewportScrollPosition();\r\n                this._updateAfterScroll(this._viewportScrollPosition, newPosition.top, newPosition.left, this._clientRect);\r\n            }\r\n            else if (this.isReceiving()) {\r\n                this._cacheOwnPosition();\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\r\n     * than saving it in property directly on init, because we want to resolve it as late as possible\r\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\r\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _getShadowRoot() {\r\n        if (!this._cachedShadowRoot) {\r\n            this._cachedShadowRoot = getShadowRoot(coerceElement(this.element)) || this._document;\r\n        }\r\n        return this._cachedShadowRoot;\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * Element that the drop list is attached to.\r\n     * @type {?}\r\n     */\r\n    DropListRef.prototype.element;\r\n    /**\r\n     * Whether starting a dragging sequence from this container is disabled.\r\n     * @type {?}\r\n     */\r\n    DropListRef.prototype.disabled;\r\n    /**\r\n     * Whether sorting items within the list is disabled.\r\n     * @type {?}\r\n     */\r\n    DropListRef.prototype.sortingDisabled;\r\n    /**\r\n     * Locks the position of the draggable elements inside the container along the specified axis.\r\n     * @type {?}\r\n     */\r\n    DropListRef.prototype.lockAxis;\r\n    /**\r\n     * Whether auto-scrolling the view when the user\r\n     * moves their pointer close to the edges is disabled.\r\n     * @type {?}\r\n     */\r\n    DropListRef.prototype.autoScrollDisabled;\r\n    /**\r\n     * Function that is used to determine whether an item\r\n     * is allowed to be moved into a drop container.\r\n     * @type {?}\r\n     */\r\n    DropListRef.prototype.enterPredicate;\r\n    /**\r\n     * Emits right before dragging has started.\r\n     * @type {?}\r\n     */\r\n    DropListRef.prototype.beforeStarted;\r\n    /**\r\n     * Emits when the user has moved a new drag item into this container.\r\n     * @type {?}\r\n     */\r\n    DropListRef.prototype.entered;\r\n    /**\r\n     * Emits when the user removes an item from the container\r\n     * by dragging it into another container.\r\n     * @type {?}\r\n     */\r\n    DropListRef.prototype.exited;\r\n    /**\r\n     * Emits when the user drops an item inside the container.\r\n     * @type {?}\r\n     */\r\n    DropListRef.prototype.dropped;\r\n    /**\r\n     * Emits as the user is swapping items while actively dragging.\r\n     * @type {?}\r\n     */\r\n    DropListRef.prototype.sorted;\r\n    /**\r\n     * Arbitrary data that can be attached to the drop list.\r\n     * @type {?}\r\n     */\r\n    DropListRef.prototype.data;\r\n    /**\r\n     * Whether an item in the list is being dragged.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._isDragging;\r\n    /**\r\n     * Cache of the dimensions of all the items inside the container.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._itemPositions;\r\n    /**\r\n     * Keeps track of the container's scroll position.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._scrollPosition;\r\n    /**\r\n     * Keeps track of the scroll position of the viewport.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._viewportScrollPosition;\r\n    /**\r\n     * Cached `ClientRect` of the drop list.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._clientRect;\r\n    /**\r\n     * Draggable items that are currently active inside the container. Includes the items\r\n     * from `_draggables`, as well as any items that have been dragged in, but haven't\r\n     * been dropped yet.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._activeDraggables;\r\n    /**\r\n     * Keeps track of the item that was last swapped with the dragged item, as\r\n     * well as what direction the pointer was moving in when the swap occured.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._previousSwap;\r\n    /**\r\n     * Draggable items in the container.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._draggables;\r\n    /**\r\n     * Drop lists that are connected to the current one.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._siblings;\r\n    /**\r\n     * Direction in which the list is oriented.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._orientation;\r\n    /**\r\n     * Connected siblings that currently have a dragged item.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._activeSiblings;\r\n    /**\r\n     * Layout direction of the drop list.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._direction;\r\n    /**\r\n     * Subscription to the window being scrolled.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._viewportScrollSubscription;\r\n    /**\r\n     * Vertical direction in which the list is currently scrolling.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._verticalScrollDirection;\r\n    /**\r\n     * Horizontal direction in which the list is currently scrolling.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._horizontalScrollDirection;\r\n    /**\r\n     * Node that is being auto-scrolled.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._scrollNode;\r\n    /**\r\n     * Used to signal to the current auto-scroll sequence when to stop.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._stopScrollTimers;\r\n    /**\r\n     * Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._cachedShadowRoot;\r\n    /**\r\n     * Reference to the document.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._document;\r\n    /**\r\n     * Handles the container being scrolled. Has to be an arrow function to preserve the context.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._handleScroll;\r\n    /**\r\n     * Starts the interval that'll auto-scroll the element.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._startScrollInterval;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._dragDropRegistry;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._ngZone;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DropListRef.prototype._viewportRuler;\r\n}\r\n/**\r\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\r\n * @param {?} clientRect `ClientRect` that should be updated.\r\n * @param {?} top Amount to add to the `top` position.\r\n * @param {?} left Amount to add to the `left` position.\r\n * @return {?}\r\n */\r\nfunction adjustClientRect(clientRect, top, left) {\r\n    clientRect.top += top;\r\n    clientRect.bottom = clientRect.top + clientRect.height;\r\n    clientRect.left += left;\r\n    clientRect.right = clientRect.left + clientRect.width;\r\n}\r\n/**\r\n * Finds the index of an item that matches a predicate function. Used as an equivalent\r\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\r\n * @template T\r\n * @param {?} array Array in which to look for matches.\r\n * @param {?} predicate Function used to determine whether an item is a match.\r\n * @return {?}\r\n */\r\nfunction findIndex(array, predicate) {\r\n    for (let i = 0; i < array.length; i++) {\r\n        if (predicate(array[i], i, array)) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * Checks whether some coordinates are within a `ClientRect`.\r\n * @param {?} clientRect ClientRect that is being checked.\r\n * @param {?} x Coordinates along the X axis.\r\n * @param {?} y Coordinates along the Y axis.\r\n * @return {?}\r\n */\r\nfunction isInsideClientRect(clientRect, x, y) {\r\n    const { top, bottom, left, right } = clientRect;\r\n    return y >= top && y <= bottom && x >= left && x <= right;\r\n}\r\n/**\r\n * Gets a mutable version of an element's bounding `ClientRect`.\r\n * @param {?} element\r\n * @return {?}\r\n */\r\nfunction getMutableClientRect(element) {\r\n    /** @type {?} */\r\n    const clientRect = element.getBoundingClientRect();\r\n    // We need to clone the `clientRect` here, because all the values on it are readonly\r\n    // and we need to be able to update them. Also we can't use a spread here, because\r\n    // the values on a `ClientRect` aren't own properties. See:\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\r\n    return {\r\n        top: clientRect.top,\r\n        right: clientRect.right,\r\n        bottom: clientRect.bottom,\r\n        left: clientRect.left,\r\n        width: clientRect.width,\r\n        height: clientRect.height\r\n    };\r\n}\r\n/**\r\n * Increments the vertical scroll position of a node.\r\n * @param {?} node Node whose scroll position should change.\r\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\r\n * @return {?}\r\n */\r\nfunction incrementVerticalScroll(node, amount) {\r\n    if (node === window) {\r\n        ((/** @type {?} */ (node))).scrollBy(0, amount);\r\n    }\r\n    else {\r\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\r\n        ((/** @type {?} */ (node))).scrollTop += amount;\r\n    }\r\n}\r\n/**\r\n * Increments the horizontal scroll position of a node.\r\n * @param {?} node Node whose scroll position should change.\r\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\r\n * @return {?}\r\n */\r\nfunction incrementHorizontalScroll(node, amount) {\r\n    if (node === window) {\r\n        ((/** @type {?} */ (node))).scrollBy(amount, 0);\r\n    }\r\n    else {\r\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\r\n        ((/** @type {?} */ (node))).scrollLeft += amount;\r\n    }\r\n}\r\n/**\r\n * Gets whether the vertical auto-scroll direction of a node.\r\n * @param {?} clientRect Dimensions of the node.\r\n * @param {?} pointerY Position of the user's pointer along the y axis.\r\n * @return {?}\r\n */\r\nfunction getVerticalScrollDirection(clientRect, pointerY) {\r\n    const { top, bottom, height } = clientRect;\r\n    /** @type {?} */\r\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\r\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\r\n        return 1 /* UP */;\r\n    }\r\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\r\n        return 2 /* DOWN */;\r\n    }\r\n    return 0 /* NONE */;\r\n}\r\n/**\r\n * Gets whether the horizontal auto-scroll direction of a node.\r\n * @param {?} clientRect Dimensions of the node.\r\n * @param {?} pointerX Position of the user's pointer along the x axis.\r\n * @return {?}\r\n */\r\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\r\n    const { left, right, width } = clientRect;\r\n    /** @type {?} */\r\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\r\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\r\n        return 1 /* LEFT */;\r\n    }\r\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\r\n        return 2 /* RIGHT */;\r\n    }\r\n    return 0 /* NONE */;\r\n}\r\n/**\r\n * Gets the directions in which an element node should be scrolled,\r\n * assuming that the user's pointer is already within it scrollable region.\r\n * @param {?} element Element for which we should calculate the scroll direction.\r\n * @param {?} clientRect Bounding client rectangle of the element.\r\n * @param {?} pointerX Position of the user's pointer along the x axis.\r\n * @param {?} pointerY Position of the user's pointer along the y axis.\r\n * @return {?}\r\n */\r\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\r\n    /** @type {?} */\r\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\r\n    /** @type {?} */\r\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\r\n    /** @type {?} */\r\n    let verticalScrollDirection = 0 /* NONE */;\r\n    /** @type {?} */\r\n    let horizontalScrollDirection = 0 /* NONE */;\r\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\r\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\r\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\r\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\r\n    if (computedVertical) {\r\n        /** @type {?} */\r\n        const scrollTop = element.scrollTop;\r\n        if (computedVertical === 1 /* UP */) {\r\n            if (scrollTop > 0) {\r\n                verticalScrollDirection = 1 /* UP */;\r\n            }\r\n        }\r\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\r\n            verticalScrollDirection = 2 /* DOWN */;\r\n        }\r\n    }\r\n    if (computedHorizontal) {\r\n        /** @type {?} */\r\n        const scrollLeft = element.scrollLeft;\r\n        if (computedHorizontal === 1 /* LEFT */) {\r\n            if (scrollLeft > 0) {\r\n                horizontalScrollDirection = 1 /* LEFT */;\r\n            }\r\n        }\r\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\r\n            horizontalScrollDirection = 2 /* RIGHT */;\r\n        }\r\n    }\r\n    return [verticalScrollDirection, horizontalScrollDirection];\r\n}\r\n/**\r\n * Gets the shadow root of an element, if any.\r\n * @param {?} element\r\n * @return {?}\r\n */\r\nfunction getShadowRoot(element) {\r\n    if (_supportsShadowDom()) {\r\n        /** @type {?} */\r\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\r\n        if (rootNode instanceof ShadowRoot) {\r\n            return rootNode;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/cdk/drag-drop/drag-drop-registry.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Event options that can be used to bind an active, capturing event.\r\n * @type {?}\r\n */\r\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\r\n    passive: false,\r\n    capture: true\r\n});\r\n/**\r\n * Service that keeps track of all the drag item and drop container\r\n * instances, and manages global event listeners on the `document`.\r\n * \\@docs-private\r\n * @template I, C\r\n */\r\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\r\n// to avoid circular imports. If we were to reference them here, importing the registry into the\r\n// classes that are registering themselves will introduce a circular import.\r\nclass DragDropRegistry {\r\n    /**\r\n     * @param {?} _ngZone\r\n     * @param {?} _document\r\n     */\r\n    constructor(_ngZone, _document) {\r\n        this._ngZone = _ngZone;\r\n        /**\r\n         * Registered drop container instances.\r\n         */\r\n        this._dropInstances = new Set();\r\n        /**\r\n         * Registered drag item instances.\r\n         */\r\n        this._dragInstances = new Set();\r\n        /**\r\n         * Drag item instances that are currently being dragged.\r\n         */\r\n        this._activeDragInstances = new Set();\r\n        /**\r\n         * Keeps track of the event listeners that we've bound to the `document`.\r\n         */\r\n        this._globalListeners = new Map();\r\n        /**\r\n         * Emits the `touchmove` or `mousemove` events that are dispatched\r\n         * while the user is dragging a drag item instance.\r\n         */\r\n        this.pointerMove = new Subject();\r\n        /**\r\n         * Emits the `touchend` or `mouseup` events that are dispatched\r\n         * while the user is dragging a drag item instance.\r\n         */\r\n        this.pointerUp = new Subject();\r\n        /**\r\n         * Emits when the viewport has been scrolled while the user is dragging an item.\r\n         */\r\n        this.scroll = new Subject();\r\n        /**\r\n         * Event listener that will prevent the default browser action while the user is dragging.\r\n         * @param event Event whose default action should be prevented.\r\n         */\r\n        this._preventDefaultWhileDragging = (/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        (event) => {\r\n            if (this._activeDragInstances.size) {\r\n                event.preventDefault();\r\n            }\r\n        });\r\n        this._document = _document;\r\n    }\r\n    /**\r\n     * Adds a drop container to the registry.\r\n     * @param {?} drop\r\n     * @return {?}\r\n     */\r\n    registerDropContainer(drop) {\r\n        if (!this._dropInstances.has(drop)) {\r\n            this._dropInstances.add(drop);\r\n        }\r\n    }\r\n    /**\r\n     * Adds a drag item instance to the registry.\r\n     * @param {?} drag\r\n     * @return {?}\r\n     */\r\n    registerDragItem(drag) {\r\n        this._dragInstances.add(drag);\r\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\r\n        // won't preventDefault on a dynamically-added `touchmove` listener.\r\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\r\n        if (this._dragInstances.size === 1) {\r\n            this._ngZone.runOutsideAngular((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                // The event handler has to be explicitly active,\r\n                // because newer browsers make it passive by default.\r\n                this._document.addEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\r\n            }));\r\n        }\r\n    }\r\n    /**\r\n     * Removes a drop container from the registry.\r\n     * @param {?} drop\r\n     * @return {?}\r\n     */\r\n    removeDropContainer(drop) {\r\n        this._dropInstances.delete(drop);\r\n    }\r\n    /**\r\n     * Removes a drag item instance from the registry.\r\n     * @param {?} drag\r\n     * @return {?}\r\n     */\r\n    removeDragItem(drag) {\r\n        this._dragInstances.delete(drag);\r\n        this.stopDragging(drag);\r\n        if (this._dragInstances.size === 0) {\r\n            this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\r\n        }\r\n    }\r\n    /**\r\n     * Starts the dragging sequence for a drag instance.\r\n     * @param {?} drag Drag instance which is being dragged.\r\n     * @param {?} event Event that initiated the dragging.\r\n     * @return {?}\r\n     */\r\n    startDragging(drag, event) {\r\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\r\n        if (this._activeDragInstances.has(drag)) {\r\n            return;\r\n        }\r\n        this._activeDragInstances.add(drag);\r\n        if (this._activeDragInstances.size === 1) {\r\n            /** @type {?} */\r\n            const isTouchEvent = event.type.startsWith('touch');\r\n            /** @type {?} */\r\n            const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\r\n            /** @type {?} */\r\n            const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\r\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\r\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\r\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\r\n            this._globalListeners\r\n                .set(moveEvent, {\r\n                handler: (/**\r\n                 * @param {?} e\r\n                 * @return {?}\r\n                 */\r\n                (e) => this.pointerMove.next((/** @type {?} */ (e)))),\r\n                options: activeCapturingEventOptions\r\n            })\r\n                .set(upEvent, {\r\n                handler: (/**\r\n                 * @param {?} e\r\n                 * @return {?}\r\n                 */\r\n                (e) => this.pointerUp.next((/** @type {?} */ (e)))),\r\n                options: true\r\n            })\r\n                .set('scroll', {\r\n                handler: (/**\r\n                 * @param {?} e\r\n                 * @return {?}\r\n                 */\r\n                (e) => this.scroll.next(e)),\r\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\r\n                // the document. See https://github.com/angular/components/issues/17144.\r\n                options: true\r\n            })\r\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\r\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\r\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\r\n                // recalculation which can be expensive on pages with a lot of elements.\r\n                .set('selectstart', {\r\n                handler: this._preventDefaultWhileDragging,\r\n                options: activeCapturingEventOptions\r\n            });\r\n            this._ngZone.runOutsideAngular((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                this._globalListeners.forEach((/**\r\n                 * @param {?} config\r\n                 * @param {?} name\r\n                 * @return {?}\r\n                 */\r\n                (config, name) => {\r\n                    this._document.addEventListener(name, config.handler, config.options);\r\n                }));\r\n            }));\r\n        }\r\n    }\r\n    /**\r\n     * Stops dragging a drag item instance.\r\n     * @param {?} drag\r\n     * @return {?}\r\n     */\r\n    stopDragging(drag) {\r\n        this._activeDragInstances.delete(drag);\r\n        if (this._activeDragInstances.size === 0) {\r\n            this._clearGlobalListeners();\r\n        }\r\n    }\r\n    /**\r\n     * Gets whether a drag item instance is currently being dragged.\r\n     * @param {?} drag\r\n     * @return {?}\r\n     */\r\n    isDragging(drag) {\r\n        return this._activeDragInstances.has(drag);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._dragInstances.forEach((/**\r\n         * @param {?} instance\r\n         * @return {?}\r\n         */\r\n        instance => this.removeDragItem(instance)));\r\n        this._dropInstances.forEach((/**\r\n         * @param {?} instance\r\n         * @return {?}\r\n         */\r\n        instance => this.removeDropContainer(instance)));\r\n        this._clearGlobalListeners();\r\n        this.pointerMove.complete();\r\n        this.pointerUp.complete();\r\n    }\r\n    /**\r\n     * Clears out the global event listeners from the `document`.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _clearGlobalListeners() {\r\n        this._globalListeners.forEach((/**\r\n         * @param {?} config\r\n         * @param {?} name\r\n         * @return {?}\r\n         */\r\n        (config, name) => {\r\n            this._document.removeEventListener(name, config.handler, config.options);\r\n        }));\r\n        this._globalListeners.clear();\r\n    }\r\n}\r\nDragDropRegistry.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */\r\nDragDropRegistry.ctorParameters = () => [\r\n    { type: NgZone },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\n/** @nocollapse */ DragDropRegistry.ɵprov = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragDropRegistry.prototype._document;\r\n    /**\r\n     * Registered drop container instances.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragDropRegistry.prototype._dropInstances;\r\n    /**\r\n     * Registered drag item instances.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragDropRegistry.prototype._dragInstances;\r\n    /**\r\n     * Drag item instances that are currently being dragged.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragDropRegistry.prototype._activeDragInstances;\r\n    /**\r\n     * Keeps track of the event listeners that we've bound to the `document`.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragDropRegistry.prototype._globalListeners;\r\n    /**\r\n     * Emits the `touchmove` or `mousemove` events that are dispatched\r\n     * while the user is dragging a drag item instance.\r\n     * @type {?}\r\n     */\r\n    DragDropRegistry.prototype.pointerMove;\r\n    /**\r\n     * Emits the `touchend` or `mouseup` events that are dispatched\r\n     * while the user is dragging a drag item instance.\r\n     * @type {?}\r\n     */\r\n    DragDropRegistry.prototype.pointerUp;\r\n    /**\r\n     * Emits when the viewport has been scrolled while the user is dragging an item.\r\n     * @type {?}\r\n     */\r\n    DragDropRegistry.prototype.scroll;\r\n    /**\r\n     * Event listener that will prevent the default browser action while the user is dragging.\r\n     * \\@param event Event whose default action should be prevented.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragDropRegistry.prototype._preventDefaultWhileDragging;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragDropRegistry.prototype._ngZone;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/cdk/drag-drop/drag-drop.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Default configuration to be used when creating a `DragRef`.\r\n * @type {?}\r\n */\r\nconst DEFAULT_CONFIG = {\r\n    dragStartThreshold: 5,\r\n    pointerDirectionChangeThreshold: 5\r\n};\r\n/**\r\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\r\n */\r\nclass DragDrop {\r\n    /**\r\n     * @param {?} _document\r\n     * @param {?} _ngZone\r\n     * @param {?} _viewportRuler\r\n     * @param {?} _dragDropRegistry\r\n     */\r\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\r\n        this._document = _document;\r\n        this._ngZone = _ngZone;\r\n        this._viewportRuler = _viewportRuler;\r\n        this._dragDropRegistry = _dragDropRegistry;\r\n    }\r\n    /**\r\n     * Turns an element into a draggable item.\r\n     * @template T\r\n     * @param {?} element Element to which to attach the dragging functionality.\r\n     * @param {?=} config Object used to configure the dragging behavior.\r\n     * @return {?}\r\n     */\r\n    createDrag(element, config = DEFAULT_CONFIG) {\r\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\r\n    }\r\n    /**\r\n     * Turns an element into a drop list.\r\n     * @template T\r\n     * @param {?} element Element to which to attach the drop list functionality.\r\n     * @return {?}\r\n     */\r\n    createDropList(element) {\r\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\r\n    }\r\n}\r\nDragDrop.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */\r\nDragDrop.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: NgZone },\r\n    { type: ViewportRuler },\r\n    { type: DragDropRegistry }\r\n];\r\n/** @nocollapse */ DragDrop.ɵprov = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragDrop.prototype._document;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragDrop.prototype._ngZone;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragDrop.prototype._viewportRuler;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    DragDrop.prototype._dragDropRegistry;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/cdk/drag-drop/drag-events.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Event emitted when the user starts dragging a draggable.\r\n * @record\r\n * @template T\r\n */\r\nfunction CdkDragStart() { }\r\nif (false) {\r\n    /**\r\n     * Draggable that emitted the event.\r\n     * @type {?}\r\n     */\r\n    CdkDragStart.prototype.source;\r\n}\r\n/**\r\n * Event emitted when the user releases an item, before any animations have started.\r\n * @record\r\n * @template T\r\n */\r\nfunction CdkDragRelease() { }\r\nif (false) {\r\n    /**\r\n     * Draggable that emitted the event.\r\n     * @type {?}\r\n     */\r\n    CdkDragRelease.prototype.source;\r\n}\r\n/**\r\n * Event emitted when the user stops dragging a draggable.\r\n * @record\r\n * @template T\r\n */\r\nfunction CdkDragEnd() { }\r\nif (false) {\r\n    /**\r\n     * Draggable that emitted the event.\r\n     * @type {?}\r\n     */\r\n    CdkDragEnd.prototype.source;\r\n    /**\r\n     * Distance in pixels that the user has dragged since the drag sequence started.\r\n     * @type {?}\r\n     */\r\n    CdkDragEnd.prototype.distance;\r\n}\r\n/**\r\n * Event emitted when the user moves an item into a new drop container.\r\n * @record\r\n * @template T, I\r\n */\r\nfunction CdkDragEnter() { }\r\nif (false) {\r\n    /**\r\n     * Container into which the user has moved the item.\r\n     * @type {?}\r\n     */\r\n    CdkDragEnter.prototype.container;\r\n    /**\r\n     * Item that was moved into the container.\r\n     * @type {?}\r\n     */\r\n    CdkDragEnter.prototype.item;\r\n    /**\r\n     * Index at which the item has entered the container.\r\n     * @type {?}\r\n     */\r\n    CdkDragEnter.prototype.currentIndex;\r\n}\r\n/**\r\n * Event emitted when the user removes an item from a\r\n * drop container by moving it into another one.\r\n * @record\r\n * @template T, I\r\n */\r\nfunction CdkDragExit() { }\r\nif (false) {\r\n    /**\r\n     * Container from which the user has a removed an item.\r\n     * @type {?}\r\n     */\r\n    CdkDragExit.prototype.container;\r\n    /**\r\n     * Item that was removed from the container.\r\n     * @type {?}\r\n     */\r\n    CdkDragExit.prototype.item;\r\n}\r\n/**\r\n * Event emitted when the user drops a draggable item inside a drop container.\r\n * @record\r\n * @template T, O\r\n */\r\nfunction CdkDragDrop() { }\r\nif (false) {\r\n    /**\r\n     * Index of the item when it was picked up.\r\n     * @type {?}\r\n     */\r\n    CdkDragDrop.prototype.previousIndex;\r\n    /**\r\n     * Current index of the item.\r\n     * @type {?}\r\n     */\r\n    CdkDragDrop.prototype.currentIndex;\r\n    /**\r\n     * Item that is being dropped.\r\n     * @type {?}\r\n     */\r\n    CdkDragDrop.prototype.item;\r\n    /**\r\n     * Container in which the item was dropped.\r\n     * @type {?}\r\n     */\r\n    CdkDragDrop.prototype.container;\r\n    /**\r\n     * Container from which the item was picked up. Can be the same as the `container`.\r\n     * @type {?}\r\n     */\r\n    CdkDragDrop.prototype.previousContainer;\r\n    /**\r\n     * Whether the user's pointer was over the container when the item was dropped.\r\n     * @type {?}\r\n     */\r\n    CdkDragDrop.prototype.isPointerOverContainer;\r\n    /**\r\n     * Distance in pixels that the user has dragged since the drag sequence started.\r\n     * @type {?}\r\n     */\r\n    CdkDragDrop.prototype.distance;\r\n}\r\n/**\r\n * Event emitted as the user is dragging a draggable item.\r\n * @record\r\n * @template T\r\n */\r\nfunction CdkDragMove() { }\r\nif (false) {\r\n    /**\r\n     * Item that is being dragged.\r\n     * @type {?}\r\n     */\r\n    CdkDragMove.prototype.source;\r\n    /**\r\n     * Position of the user's pointer on the page.\r\n     * @type {?}\r\n     */\r\n    CdkDragMove.prototype.pointerPosition;\r\n    /**\r\n     * Native event that is causing the dragging.\r\n     * @type {?}\r\n     */\r\n    CdkDragMove.prototype.event;\r\n    /**\r\n     * Distance in pixels that the user has dragged since the drag sequence started.\r\n     * @type {?}\r\n     */\r\n    CdkDragMove.prototype.distance;\r\n    /**\r\n     * Indicates the direction in which the user is dragging the element along each axis.\r\n     * `1` means that the position is increasing (e.g. the user is moving to the right or downwards),\r\n     * whereas `-1` means that it's decreasing (they're moving to the left or upwards). `0` means\r\n     * that the position hasn't changed.\r\n     * @type {?}\r\n     */\r\n    CdkDragMove.prototype.delta;\r\n}\r\n/**\r\n * Event emitted when the user swaps the position of two drag items.\r\n * @record\r\n * @template T, I\r\n */\r\nfunction CdkDragSortEvent() { }\r\nif (false) {\r\n    /**\r\n     * Index from which the item was sorted previously.\r\n     * @type {?}\r\n     */\r\n    CdkDragSortEvent.prototype.previousIndex;\r\n    /**\r\n     * Index that the item is currently in.\r\n     * @type {?}\r\n     */\r\n    CdkDragSortEvent.prototype.currentIndex;\r\n    /**\r\n     * Container that the item belongs to.\r\n     * @type {?}\r\n     */\r\n    CdkDragSortEvent.prototype.container;\r\n    /**\r\n     * Item that is being sorted.\r\n     * @type {?}\r\n     */\r\n    CdkDragSortEvent.prototype.item;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/cdk/drag-drop/drag-parent.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\r\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\r\n * to avoid circular imports.\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/cdk/drag-drop/directives/drag-handle.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Handle that can be used to drag and CdkDrag instance.\r\n */\r\nclass CdkDragHandle {\r\n    /**\r\n     * @param {?} element\r\n     * @param {?=} parentDrag\r\n     */\r\n    constructor(element, parentDrag) {\r\n        this.element = element;\r\n        /**\r\n         * Emits when the state of the handle has changed.\r\n         */\r\n        this._stateChanges = new Subject();\r\n        this._disabled = false;\r\n        this._parentDrag = parentDrag;\r\n        toggleNativeDragInteractions(element.nativeElement, false);\r\n    }\r\n    /**\r\n     * Whether starting to drag through this handle is disabled.\r\n     * @return {?}\r\n     */\r\n    get disabled() { return this._disabled; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n        this._stateChanges.next(this);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._stateChanges.complete();\r\n    }\r\n}\r\nCdkDragHandle.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[cdkDragHandle]',\r\n                host: {\r\n                    'class': 'cdk-drag-handle'\r\n                }\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nCdkDragHandle.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }] }\r\n];\r\nCdkDragHandle.propDecorators = {\r\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\r\n};\r\nif (false) {\r\n    /** @type {?} */\r\n    CdkDragHandle.ngAcceptInputType_disabled;\r\n    /**\r\n     * Closest parent draggable instance.\r\n     * @type {?}\r\n     */\r\n    CdkDragHandle.prototype._parentDrag;\r\n    /**\r\n     * Emits when the state of the handle has changed.\r\n     * @type {?}\r\n     */\r\n    CdkDragHandle.prototype._stateChanges;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    CdkDragHandle.prototype._disabled;\r\n    /** @type {?} */\r\n    CdkDragHandle.prototype.element;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/cdk/drag-drop/directives/drag-placeholder.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Element that will be used as a template for the placeholder of a CdkDrag when\r\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\r\n * @template T\r\n */\r\nclass CdkDragPlaceholder {\r\n    /**\r\n     * @param {?} templateRef\r\n     */\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n}\r\nCdkDragPlaceholder.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'ng-template[cdkDragPlaceholder]'\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nCdkDragPlaceholder.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\nCdkDragPlaceholder.propDecorators = {\r\n    data: [{ type: Input }]\r\n};\r\nif (false) {\r\n    /**\r\n     * Context data to be added to the placeholder template instance.\r\n     * @type {?}\r\n     */\r\n    CdkDragPlaceholder.prototype.data;\r\n    /** @type {?} */\r\n    CdkDragPlaceholder.prototype.templateRef;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/cdk/drag-drop/directives/drag-preview.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Element that will be used as a template for the preview\r\n * of a CdkDrag when it is being dragged.\r\n * @template T\r\n */\r\nclass CdkDragPreview {\r\n    /**\r\n     * @param {?} templateRef\r\n     */\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n}\r\nCdkDragPreview.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'ng-template[cdkDragPreview]'\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nCdkDragPreview.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\nCdkDragPreview.propDecorators = {\r\n    data: [{ type: Input }]\r\n};\r\nif (false) {\r\n    /**\r\n     * Context data to be added to the preview template instance.\r\n     * @type {?}\r\n     */\r\n    CdkDragPreview.prototype.data;\r\n    /** @type {?} */\r\n    CdkDragPreview.prototype.templateRef;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/cdk/drag-drop/directives/drag.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\r\n * Used for avoiding circular imports.\r\n * @type {?}\r\n */\r\nconst CDK_DROP_LIST = new InjectionToken('CDK_DROP_LIST');\r\n/**\r\n * Injection token that can be used to configure the behavior of `CdkDrag`.\r\n * @type {?}\r\n */\r\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG', {\r\n    providedIn: 'root',\r\n    factory: CDK_DRAG_CONFIG_FACTORY\r\n});\r\n/**\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction CDK_DRAG_CONFIG_FACTORY() {\r\n    return { dragStartThreshold: 5, pointerDirectionChangeThreshold: 5 };\r\n}\r\n/**\r\n * Element that can be moved inside a CdkDropList container.\r\n * @template T\r\n */\r\nclass CdkDrag {\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} dropContainer\r\n     * @param {?} _document\r\n     * @param {?} _ngZone\r\n     * @param {?} _viewContainerRef\r\n     * @param {?} config\r\n     * @param {?} _dir\r\n     * @param {?} dragDrop\r\n     * @param {?} _changeDetectorRef\r\n     */\r\n    constructor(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {\r\n        this.element = element;\r\n        this.dropContainer = dropContainer;\r\n        this._document = _document;\r\n        this._ngZone = _ngZone;\r\n        this._viewContainerRef = _viewContainerRef;\r\n        this._dir = _dir;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._destroyed = new Subject();\r\n        /**\r\n         * Amount of milliseconds to wait after the user has put their\r\n         * pointer down before starting to drag the element.\r\n         */\r\n        this.dragStartDelay = 0;\r\n        this._disabled = false;\r\n        /**\r\n         * Emits when the user starts dragging the item.\r\n         */\r\n        this.started = new EventEmitter();\r\n        /**\r\n         * Emits when the user has released a drag item, before any animations have started.\r\n         */\r\n        this.released = new EventEmitter();\r\n        /**\r\n         * Emits when the user stops dragging an item in the container.\r\n         */\r\n        this.ended = new EventEmitter();\r\n        /**\r\n         * Emits when the user has moved the item into a new container.\r\n         */\r\n        this.entered = new EventEmitter();\r\n        /**\r\n         * Emits when the user removes the item its container by dragging it into another container.\r\n         */\r\n        this.exited = new EventEmitter();\r\n        /**\r\n         * Emits when the user drops the item inside a container.\r\n         */\r\n        this.dropped = new EventEmitter();\r\n        /**\r\n         * Emits as the user is dragging the item. Use with caution,\r\n         * because this event will fire for every pixel that the user has dragged.\r\n         */\r\n        this.moved = new Observable((/**\r\n         * @param {?} observer\r\n         * @return {?}\r\n         */\r\n        (observer) => {\r\n            /** @type {?} */\r\n            const subscription = this._dragRef.moved.pipe(map((/**\r\n             * @param {?} movedEvent\r\n             * @return {?}\r\n             */\r\n            movedEvent => ({\r\n                source: this,\r\n                pointerPosition: movedEvent.pointerPosition,\r\n                event: movedEvent.event,\r\n                delta: movedEvent.delta,\r\n                distance: movedEvent.distance\r\n            })))).subscribe(observer);\r\n            return (/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                subscription.unsubscribe();\r\n            });\r\n        }));\r\n        this._dragRef = dragDrop.createDrag(element, config);\r\n        this._dragRef.data = this;\r\n        this._syncInputs(this._dragRef);\r\n        this._handleEvents(this._dragRef);\r\n    }\r\n    /**\r\n     * Whether starting to drag this element is disabled.\r\n     * @return {?}\r\n     */\r\n    get disabled() {\r\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n        this._dragRef.disabled = this._disabled;\r\n    }\r\n    /**\r\n     * Returns the element that is being used as a placeholder\r\n     * while the current element is being dragged.\r\n     * @return {?}\r\n     */\r\n    getPlaceholderElement() {\r\n        return this._dragRef.getPlaceholderElement();\r\n    }\r\n    /**\r\n     * Returns the root draggable element.\r\n     * @return {?}\r\n     */\r\n    getRootElement() {\r\n        return this._dragRef.getRootElement();\r\n    }\r\n    /**\r\n     * Resets a standalone drag item to its initial position.\r\n     * @return {?}\r\n     */\r\n    reset() {\r\n        this._dragRef.reset();\r\n    }\r\n    /**\r\n     * Gets the pixel coordinates of the draggable outside of a drop container.\r\n     * @return {?}\r\n     */\r\n    getFreeDragPosition() {\r\n        return this._dragRef.getFreeDragPosition();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterViewInit() {\r\n        // We need to wait for the zone to stabilize, in order for the reference\r\n        // element to be in the proper place in the DOM. This is mostly relevant\r\n        // for draggable elements inside portals since they get stamped out in\r\n        // their original DOM position and then they get transferred to the portal.\r\n        this._ngZone.onStable.asObservable()\r\n            .pipe(take(1), takeUntil(this._destroyed))\r\n            .subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this._updateRootElement();\r\n            // Listen for any newly-added handles.\r\n            this._handles.changes.pipe(startWith(this._handles), \r\n            // Sync the new handles with the DragRef.\r\n            tap((/**\r\n             * @param {?} handles\r\n             * @return {?}\r\n             */\r\n            (handles) => {\r\n                /** @type {?} */\r\n                const childHandleElements = handles\r\n                    .filter((/**\r\n                 * @param {?} handle\r\n                 * @return {?}\r\n                 */\r\n                handle => handle._parentDrag === this))\r\n                    .map((/**\r\n                 * @param {?} handle\r\n                 * @return {?}\r\n                 */\r\n                handle => handle.element));\r\n                this._dragRef.withHandles(childHandleElements);\r\n            })), \r\n            // Listen if the state of any of the handles changes.\r\n            switchMap((/**\r\n             * @param {?} handles\r\n             * @return {?}\r\n             */\r\n            (handles) => {\r\n                return (/** @type {?} */ (merge(...handles.map((/**\r\n                 * @param {?} item\r\n                 * @return {?}\r\n                 */\r\n                item => {\r\n                    return item._stateChanges.pipe(startWith(item));\r\n                })))));\r\n            })), takeUntil(this._destroyed)).subscribe((/**\r\n             * @param {?} handleInstance\r\n             * @return {?}\r\n             */\r\n            handleInstance => {\r\n                // Enabled/disable the handle that changed in the DragRef.\r\n                /** @type {?} */\r\n                const dragRef = this._dragRef;\r\n                /** @type {?} */\r\n                const handle = handleInstance.element.nativeElement;\r\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\r\n            }));\r\n            if (this.freeDragPosition) {\r\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        /** @type {?} */\r\n        const rootSelectorChange = changes['rootElementSelector'];\r\n        /** @type {?} */\r\n        const positionChange = changes['freeDragPosition'];\r\n        // We don't have to react to the first change since it's being\r\n        // handled in `ngAfterViewInit` where it needs to be deferred.\r\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\r\n            this._updateRootElement();\r\n        }\r\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\r\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\r\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n        this._dragRef.dispose();\r\n    }\r\n    /**\r\n     * Syncs the root element with the `DragRef`.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _updateRootElement() {\r\n        /** @type {?} */\r\n        const element = this.element.nativeElement;\r\n        /** @type {?} */\r\n        const rootElement = this.rootElementSelector ?\r\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\r\n        if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\r\n            throw Error(`cdkDrag must be attached to an element node. ` +\r\n                `Currently attached to \"${rootElement.nodeName}\".`);\r\n        }\r\n        this._dragRef.withRootElement(rootElement || element);\r\n    }\r\n    /**\r\n     * Gets the boundary element, based on the `boundaryElement` value.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _getBoundaryElement() {\r\n        /** @type {?} */\r\n        const boundary = this.boundaryElement;\r\n        if (!boundary) {\r\n            return null;\r\n        }\r\n        if (typeof boundary === 'string') {\r\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\r\n        }\r\n        /** @type {?} */\r\n        const element = coerceElement(boundary);\r\n        if (isDevMode() && !element.contains(this.element.nativeElement)) {\r\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\r\n        }\r\n        return element;\r\n    }\r\n    /**\r\n     * Syncs the inputs of the CdkDrag with the options of the underlying DragRef.\r\n     * @private\r\n     * @param {?} ref\r\n     * @return {?}\r\n     */\r\n    _syncInputs(ref) {\r\n        ref.beforeStarted.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            if (!ref.isDragging()) {\r\n                /** @type {?} */\r\n                const dir = this._dir;\r\n                /** @type {?} */\r\n                const dragStartDelay = this.dragStartDelay;\r\n                /** @type {?} */\r\n                const placeholder = this._placeholderTemplate ? {\r\n                    template: this._placeholderTemplate.templateRef,\r\n                    context: this._placeholderTemplate.data,\r\n                    viewContainer: this._viewContainerRef\r\n                } : null;\r\n                /** @type {?} */\r\n                const preview = this._previewTemplate ? {\r\n                    template: this._previewTemplate.templateRef,\r\n                    context: this._previewTemplate.data,\r\n                    viewContainer: this._viewContainerRef\r\n                } : null;\r\n                ref.disabled = this.disabled;\r\n                ref.lockAxis = this.lockAxis;\r\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\r\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\r\n                ref.constrainPosition = this.constrainPosition;\r\n                ref.previewClass = this.previewClass;\r\n                ref\r\n                    .withBoundaryElement(this._getBoundaryElement())\r\n                    .withPlaceholderTemplate(placeholder)\r\n                    .withPreviewTemplate(preview);\r\n                if (dir) {\r\n                    ref.withDirection(dir.value);\r\n                }\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * Handles the events from the underlying `DragRef`.\r\n     * @private\r\n     * @param {?} ref\r\n     * @return {?}\r\n     */\r\n    _handleEvents(ref) {\r\n        ref.started.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.started.emit({ source: this });\r\n            // Since all of these events run outside of change detection,\r\n            // we need to ensure that everything is marked correctly.\r\n            this._changeDetectorRef.markForCheck();\r\n        }));\r\n        ref.released.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.released.emit({ source: this });\r\n        }));\r\n        ref.ended.subscribe((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        event => {\r\n            this.ended.emit({ source: this, distance: event.distance });\r\n            // Since all of these events run outside of change detection,\r\n            // we need to ensure that everything is marked correctly.\r\n            this._changeDetectorRef.markForCheck();\r\n        }));\r\n        ref.entered.subscribe((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        event => {\r\n            this.entered.emit({\r\n                container: event.container.data,\r\n                item: this,\r\n                currentIndex: event.currentIndex\r\n            });\r\n        }));\r\n        ref.exited.subscribe((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        event => {\r\n            this.exited.emit({\r\n                container: event.container.data,\r\n                item: this\r\n            });\r\n        }));\r\n        ref.dropped.subscribe((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        event => {\r\n            this.dropped.emit({\r\n                previousIndex: event.previousIndex,\r\n                currentIndex: event.currentIndex,\r\n                previousContainer: event.previousContainer.data,\r\n                container: event.container.data,\r\n                isPointerOverContainer: event.isPointerOverContainer,\r\n                item: this,\r\n                distance: event.distance\r\n            });\r\n        }));\r\n    }\r\n}\r\nCdkDrag.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[cdkDrag]',\r\n                exportAs: 'cdkDrag',\r\n                host: {\r\n                    'class': 'cdk-drag',\r\n                    '[class.cdk-drag-disabled]': 'disabled',\r\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\r\n                },\r\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nCdkDrag.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: NgZone },\r\n    { type: ViewContainerRef },\r\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_CONFIG,] }] },\r\n    { type: Directionality, decorators: [{ type: Optional }] },\r\n    { type: DragDrop },\r\n    { type: ChangeDetectorRef }\r\n];\r\nCdkDrag.propDecorators = {\r\n    _handles: [{ type: ContentChildren, args: [CdkDragHandle, { descendants: true },] }],\r\n    _previewTemplate: [{ type: ContentChild, args: [CdkDragPreview,] }],\r\n    _placeholderTemplate: [{ type: ContentChild, args: [CdkDragPlaceholder,] }],\r\n    data: [{ type: Input, args: ['cdkDragData',] }],\r\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\r\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\r\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\r\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\r\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\r\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\r\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\r\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\r\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\r\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\r\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\r\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\r\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\r\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\r\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\r\n};\r\nif (false) {\r\n    /** @type {?} */\r\n    CdkDrag.ngAcceptInputType_disabled;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    CdkDrag.prototype._destroyed;\r\n    /**\r\n     * Reference to the underlying drag instance.\r\n     * @type {?}\r\n     */\r\n    CdkDrag.prototype._dragRef;\r\n    /**\r\n     * Elements that can be used to drag the draggable item.\r\n     * @type {?}\r\n     */\r\n    CdkDrag.prototype._handles;\r\n    /**\r\n     * Element that will be used as a template to create the draggable item's preview.\r\n     * @type {?}\r\n     */\r\n    CdkDrag.prototype._previewTemplate;\r\n    /**\r\n     * Template for placeholder element rendered to show where a draggable would be dropped.\r\n     * @type {?}\r\n     */\r\n    CdkDrag.prototype._placeholderTemplate;\r\n    /**\r\n     * Arbitrary data to attach to this drag instance.\r\n     * @type {?}\r\n     */\r\n    CdkDrag.prototype.data;\r\n    /**\r\n     * Locks the position of the dragged element along the specified axis.\r\n     * @type {?}\r\n     */\r\n    CdkDrag.prototype.lockAxis;\r\n    /**\r\n     * Selector that will be used to determine the root draggable element, starting from\r\n     * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\r\n     * when trying to enable dragging on an element that you might not have access to.\r\n     * @type {?}\r\n     */\r\n    CdkDrag.prototype.rootElementSelector;\r\n    /**\r\n     * Node or selector that will be used to determine the element to which the draggable's\r\n     * position will be constrained. If a string is passed in, it'll be used as a selector that\r\n     * will be matched starting from the element's parent and going up the DOM until a match\r\n     * has been found.\r\n     * @type {?}\r\n     */\r\n    CdkDrag.prototype.boundaryElement;\r\n    /**\r\n     * Amount of milliseconds to wait after the user has put their\r\n     * pointer down before starting to drag the element.\r\n     * @type {?}\r\n     */\r\n    CdkDrag.prototype.dragStartDelay;\r\n    /**\r\n     * Sets the position of a `CdkDrag` that is outside of a drop container.\r\n     * Can be used to restore the element's position for a returning user.\r\n     * @type {?}\r\n     */\r\n    CdkDrag.prototype.freeDragPosition;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    CdkDrag.prototype._disabled;\r\n    /**\r\n     * Function that can be used to customize the logic of how the position of the drag item\r\n     * is limited while it's being dragged. Gets called with a point containing the current position\r\n     * of the user's pointer on the page and should return a point describing where the item should\r\n     * be rendered.\r\n     * @type {?}\r\n     */\r\n    CdkDrag.prototype.constrainPosition;\r\n    /**\r\n     * Class to be added to the preview element.\r\n     * @type {?}\r\n     */\r\n    CdkDrag.prototype.previewClass;\r\n    /**\r\n     * Emits when the user starts dragging the item.\r\n     * @type {?}\r\n     */\r\n    CdkDrag.prototype.started;\r\n    /**\r\n     * Emits when the user has released a drag item, before any animations have started.\r\n     * @type {?}\r\n     */\r\n    CdkDrag.prototype.released;\r\n    /**\r\n     * Emits when the user stops dragging an item in the container.\r\n     * @type {?}\r\n     */\r\n    CdkDrag.prototype.ended;\r\n    /**\r\n     * Emits when the user has moved the item into a new container.\r\n     * @type {?}\r\n     */\r\n    CdkDrag.prototype.entered;\r\n    /**\r\n     * Emits when the user removes the item its container by dragging it into another container.\r\n     * @type {?}\r\n     */\r\n    CdkDrag.prototype.exited;\r\n    /**\r\n     * Emits when the user drops the item inside a container.\r\n     * @type {?}\r\n     */\r\n    CdkDrag.prototype.dropped;\r\n    /**\r\n     * Emits as the user is dragging the item. Use with caution,\r\n     * because this event will fire for every pixel that the user has dragged.\r\n     * @type {?}\r\n     */\r\n    CdkDrag.prototype.moved;\r\n    /**\r\n     * Element that the draggable is attached to.\r\n     * @type {?}\r\n     */\r\n    CdkDrag.prototype.element;\r\n    /**\r\n     * Droppable container that the draggable is a part of.\r\n     * @type {?}\r\n     */\r\n    CdkDrag.prototype.dropContainer;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    CdkDrag.prototype._document;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    CdkDrag.prototype._ngZone;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    CdkDrag.prototype._viewContainerRef;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    CdkDrag.prototype._dir;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    CdkDrag.prototype._changeDetectorRef;\r\n}\r\n/**\r\n * Gets the closest ancestor of an element that matches a selector.\r\n * @param {?} element\r\n * @param {?} selector\r\n * @return {?}\r\n */\r\nfunction getClosestMatchingAncestor(element, selector) {\r\n    /** @type {?} */\r\n    let currentElement = (/** @type {?} */ (element.parentElement));\r\n    while (currentElement) {\r\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\r\n        if (currentElement.matches ? currentElement.matches(selector) :\r\n            ((/** @type {?} */ (currentElement))).msMatchesSelector(selector)) {\r\n            return currentElement;\r\n        }\r\n        currentElement = currentElement.parentElement;\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/cdk/drag-drop/directives/drop-list-group.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\r\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\r\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\r\n * from `cdkDropList`.\r\n * @template T\r\n */\r\nclass CdkDropListGroup {\r\n    constructor() {\r\n        /**\r\n         * Drop lists registered inside the group.\r\n         */\r\n        this._items = new Set();\r\n        this._disabled = false;\r\n    }\r\n    /**\r\n     * Whether starting a dragging sequence from inside this group is disabled.\r\n     * @return {?}\r\n     */\r\n    get disabled() { return this._disabled; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._items.clear();\r\n    }\r\n}\r\nCdkDropListGroup.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[cdkDropListGroup]',\r\n                exportAs: 'cdkDropListGroup',\r\n            },] }\r\n];\r\nCdkDropListGroup.propDecorators = {\r\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\r\n};\r\nif (false) {\r\n    /** @type {?} */\r\n    CdkDropListGroup.ngAcceptInputType_disabled;\r\n    /**\r\n     * Drop lists registered inside the group.\r\n     * @type {?}\r\n     */\r\n    CdkDropListGroup.prototype._items;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    CdkDropListGroup.prototype._disabled;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/cdk/drag-drop/directives/drop-list.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Counter used to generate unique ids for drop zones.\r\n * @type {?}\r\n */\r\nlet _uniqueIdCounter = 0;\r\n/**\r\n * Internal compile-time-only representation of a `CdkDropList`.\r\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\r\n * \\@docs-private\r\n * @record\r\n */\r\nfunction CdkDropListInternal() { }\r\nconst ɵ0 = undefined;\r\n/**\r\n * Container that wraps a set of draggable items.\r\n * @template T\r\n */\r\nclass CdkDropList {\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} dragDrop\r\n     * @param {?} _changeDetectorRef\r\n     * @param {?=} _dir\r\n     * @param {?=} _group\r\n     */\r\n    constructor(element, dragDrop, _changeDetectorRef, _dir, _group) {\r\n        this.element = element;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._dir = _dir;\r\n        this._group = _group;\r\n        /**\r\n         * Emits when the list has been destroyed.\r\n         */\r\n        this._destroyed = new Subject();\r\n        /**\r\n         * Other draggable containers that this container is connected to and into which the\r\n         * container's items can be transferred. Can either be references to other drop containers,\r\n         * or their unique IDs.\r\n         */\r\n        this.connectedTo = [];\r\n        /**\r\n         * Direction in which the list is oriented.\r\n         */\r\n        this.orientation = 'vertical';\r\n        /**\r\n         * Unique ID for the drop zone. Can be used as a reference\r\n         * in the `connectedTo` of another `CdkDropList`.\r\n         */\r\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\r\n        this._disabled = false;\r\n        /**\r\n         * Whether sorting within this drop list is disabled.\r\n         */\r\n        this.sortingDisabled = false;\r\n        /**\r\n         * Function that is used to determine whether an item\r\n         * is allowed to be moved into a drop container.\r\n         */\r\n        this.enterPredicate = (/**\r\n         * @return {?}\r\n         */\r\n        () => true);\r\n        /**\r\n         * Whether to auto-scroll the view when the user moves their pointer close to the edges.\r\n         */\r\n        this.autoScrollDisabled = false;\r\n        /**\r\n         * Emits when the user drops an item inside the container.\r\n         */\r\n        this.dropped = new EventEmitter();\r\n        /**\r\n         * Emits when the user has moved a new drag item into this container.\r\n         */\r\n        this.entered = new EventEmitter();\r\n        /**\r\n         * Emits when the user removes an item from the container\r\n         * by dragging it into another container.\r\n         */\r\n        this.exited = new EventEmitter();\r\n        /**\r\n         * Emits as the user is swapping items while actively dragging.\r\n         */\r\n        this.sorted = new EventEmitter();\r\n        this._dropListRef = dragDrop.createDropList(element);\r\n        this._dropListRef.data = this;\r\n        this._dropListRef.enterPredicate = (/**\r\n         * @param {?} drag\r\n         * @param {?} drop\r\n         * @return {?}\r\n         */\r\n        (drag, drop) => {\r\n            return this.enterPredicate(drag.data, drop.data);\r\n        });\r\n        this._setupInputSyncSubscription(this._dropListRef);\r\n        this._handleEvents(this._dropListRef);\r\n        CdkDropList._dropLists.push(this);\r\n        if (_group) {\r\n            _group._items.add(this);\r\n        }\r\n    }\r\n    /**\r\n     * Whether starting a dragging sequence from this container is disabled.\r\n     * @return {?}\r\n     */\r\n    get disabled() {\r\n        return this._disabled || (!!this._group && this._group.disabled);\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set disabled(value) {\r\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\r\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\r\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\r\n        // the user in a disabled state, so we also need to sync it as it's being set.\r\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentInit() {\r\n        this._draggables.changes\r\n            .pipe(startWith(this._draggables), takeUntil(this._destroyed))\r\n            .subscribe((/**\r\n         * @param {?} items\r\n         * @return {?}\r\n         */\r\n        (items) => {\r\n            this._dropListRef.withItems(items.reduce((/**\r\n             * @param {?} filteredItems\r\n             * @param {?} drag\r\n             * @return {?}\r\n             */\r\n            (filteredItems, drag) => {\r\n                if (drag.dropContainer === this) {\r\n                    filteredItems.push(drag._dragRef);\r\n                }\r\n                return filteredItems;\r\n            }), (/** @type {?} */ ([]))));\r\n        }));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        /** @type {?} */\r\n        const index = CdkDropList._dropLists.indexOf(this);\r\n        if (index > -1) {\r\n            CdkDropList._dropLists.splice(index, 1);\r\n        }\r\n        if (this._group) {\r\n            this._group._items.delete(this);\r\n        }\r\n        this._dropListRef.dispose();\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n    }\r\n    /**\r\n     * Starts dragging an item.\r\n     * @deprecated No longer being used. To be removed.\r\n     * \\@breaking-change 10.0.0\r\n     * @return {?}\r\n     */\r\n    start() {\r\n        this._dropListRef.start();\r\n    }\r\n    /**\r\n     * Drops an item into this container.\r\n     * @deprecated No longer being used. To be removed.\r\n     * \\@breaking-change 10.0.0\r\n     * @param {?} item Item being dropped into the container.\r\n     * @param {?} currentIndex Index at which the item should be inserted.\r\n     * @param {?} previousContainer Container from which the item got dragged in.\r\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\r\n     *    container when the item was dropped.\r\n     *\r\n     * @return {?}\r\n     */\r\n    drop(item, currentIndex, previousContainer, isPointerOverContainer) {\r\n        this._dropListRef.drop(item._dragRef, currentIndex, previousContainer._dropListRef, isPointerOverContainer, { x: 0, y: 0 });\r\n    }\r\n    /**\r\n     * Emits an event to indicate that the user moved an item into the container.\r\n     * @deprecated No longer being used. To be removed.\r\n     * \\@breaking-change 10.0.0\r\n     * @param {?} item Item that was moved into the container.\r\n     * @param {?} pointerX Position of the item along the X axis.\r\n     * @param {?} pointerY Position of the item along the Y axis.\r\n     * @return {?}\r\n     */\r\n    enter(item, pointerX, pointerY) {\r\n        this._dropListRef.enter(item._dragRef, pointerX, pointerY);\r\n    }\r\n    /**\r\n     * Removes an item from the container after it was dragged into another container by the user.\r\n     * @deprecated No longer being used. To be removed.\r\n     * \\@breaking-change 10.0.0\r\n     * @param {?} item Item that was dragged out.\r\n     * @return {?}\r\n     */\r\n    exit(item) {\r\n        this._dropListRef.exit(item._dragRef);\r\n    }\r\n    /**\r\n     * Figures out the index of an item in the container.\r\n     * @deprecated No longer being used. To be removed.\r\n     * \\@breaking-change 10.0.0\r\n     * @param {?} item Item whose index should be determined.\r\n     * @return {?}\r\n     */\r\n    getItemIndex(item) {\r\n        return this._dropListRef.getItemIndex(item._dragRef);\r\n    }\r\n    /**\r\n     * Syncs the inputs of the CdkDropList with the options of the underlying DropListRef.\r\n     * @private\r\n     * @param {?} ref\r\n     * @return {?}\r\n     */\r\n    _setupInputSyncSubscription(ref) {\r\n        if (this._dir) {\r\n            this._dir.change\r\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\r\n                .subscribe((/**\r\n             * @param {?} value\r\n             * @return {?}\r\n             */\r\n            value => ref.withDirection(value)));\r\n        }\r\n        ref.beforeStarted.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            /** @type {?} */\r\n            const siblings = coerceArray(this.connectedTo).map((/**\r\n             * @param {?} drop\r\n             * @return {?}\r\n             */\r\n            drop => {\r\n                return typeof drop === 'string' ?\r\n                    (/** @type {?} */ (CdkDropList._dropLists.find((/**\r\n                     * @param {?} list\r\n                     * @return {?}\r\n                     */\r\n                    list => list.id === drop)))) : drop;\r\n            }));\r\n            if (this._group) {\r\n                this._group._items.forEach((/**\r\n                 * @param {?} drop\r\n                 * @return {?}\r\n                 */\r\n                drop => {\r\n                    if (siblings.indexOf(drop) === -1) {\r\n                        siblings.push(drop);\r\n                    }\r\n                }));\r\n            }\r\n            ref.disabled = this.disabled;\r\n            ref.lockAxis = this.lockAxis;\r\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\r\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\r\n            ref\r\n                .connectedTo(siblings.filter((/**\r\n             * @param {?} drop\r\n             * @return {?}\r\n             */\r\n            drop => drop && drop !== this)).map((/**\r\n             * @param {?} list\r\n             * @return {?}\r\n             */\r\n            list => list._dropListRef)))\r\n                .withOrientation(this.orientation);\r\n        }));\r\n    }\r\n    /**\r\n     * Handles events from the underlying DropListRef.\r\n     * @private\r\n     * @param {?} ref\r\n     * @return {?}\r\n     */\r\n    _handleEvents(ref) {\r\n        ref.beforeStarted.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this._changeDetectorRef.markForCheck();\r\n        }));\r\n        ref.entered.subscribe((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        event => {\r\n            this.entered.emit({\r\n                container: this,\r\n                item: event.item.data,\r\n                currentIndex: event.currentIndex\r\n            });\r\n        }));\r\n        ref.exited.subscribe((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        event => {\r\n            this.exited.emit({\r\n                container: this,\r\n                item: event.item.data\r\n            });\r\n            this._changeDetectorRef.markForCheck();\r\n        }));\r\n        ref.sorted.subscribe((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        event => {\r\n            this.sorted.emit({\r\n                previousIndex: event.previousIndex,\r\n                currentIndex: event.currentIndex,\r\n                container: this,\r\n                item: event.item.data\r\n            });\r\n        }));\r\n        ref.dropped.subscribe((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        event => {\r\n            this.dropped.emit({\r\n                previousIndex: event.previousIndex,\r\n                currentIndex: event.currentIndex,\r\n                previousContainer: event.previousContainer.data,\r\n                container: event.container.data,\r\n                item: event.item.data,\r\n                isPointerOverContainer: event.isPointerOverContainer,\r\n                distance: event.distance\r\n            });\r\n            // Mark for check since all of these events run outside of change\r\n            // detection and we're not guaranteed for something else to have triggered it.\r\n            this._changeDetectorRef.markForCheck();\r\n        }));\r\n    }\r\n}\r\n/**\r\n * Keeps track of the drop lists that are currently on the page.\r\n */\r\nCdkDropList._dropLists = [];\r\nCdkDropList.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[cdkDropList], cdk-drop-list',\r\n                exportAs: 'cdkDropList',\r\n                providers: [\r\n                    // Prevent child drop lists from picking up the same group as their parent.\r\n                    { provide: CdkDropListGroup, useValue: ɵ0 },\r\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\r\n                ],\r\n                host: {\r\n                    'class': 'cdk-drop-list',\r\n                    '[id]': 'id',\r\n                    '[class.cdk-drop-list-disabled]': 'disabled',\r\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\r\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\r\n                }\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nCdkDropList.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: DragDrop },\r\n    { type: ChangeDetectorRef },\r\n    { type: Directionality, decorators: [{ type: Optional }] },\r\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: SkipSelf }] }\r\n];\r\nCdkDropList.propDecorators = {\r\n    _draggables: [{ type: ContentChildren, args: [CdkDrag, { descendants: true },] }],\r\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\r\n    data: [{ type: Input, args: ['cdkDropListData',] }],\r\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\r\n    id: [{ type: Input }],\r\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\r\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\r\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\r\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\r\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\r\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\r\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\r\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\r\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\r\n};\r\nif (false) {\r\n    /**\r\n     * Keeps track of the drop lists that are currently on the page.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    CdkDropList._dropLists;\r\n    /** @type {?} */\r\n    CdkDropList.ngAcceptInputType_disabled;\r\n    /** @type {?} */\r\n    CdkDropList.ngAcceptInputType_sortingDisabled;\r\n    /** @type {?} */\r\n    CdkDropList.ngAcceptInputType_autoScrollDisabled;\r\n    /**\r\n     * Emits when the list has been destroyed.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    CdkDropList.prototype._destroyed;\r\n    /**\r\n     * Reference to the underlying drop list instance.\r\n     * @type {?}\r\n     */\r\n    CdkDropList.prototype._dropListRef;\r\n    /**\r\n     * Draggable items in the container.\r\n     * @type {?}\r\n     */\r\n    CdkDropList.prototype._draggables;\r\n    /**\r\n     * Other draggable containers that this container is connected to and into which the\r\n     * container's items can be transferred. Can either be references to other drop containers,\r\n     * or their unique IDs.\r\n     * @type {?}\r\n     */\r\n    CdkDropList.prototype.connectedTo;\r\n    /**\r\n     * Arbitrary data to attach to this container.\r\n     * @type {?}\r\n     */\r\n    CdkDropList.prototype.data;\r\n    /**\r\n     * Direction in which the list is oriented.\r\n     * @type {?}\r\n     */\r\n    CdkDropList.prototype.orientation;\r\n    /**\r\n     * Unique ID for the drop zone. Can be used as a reference\r\n     * in the `connectedTo` of another `CdkDropList`.\r\n     * @type {?}\r\n     */\r\n    CdkDropList.prototype.id;\r\n    /**\r\n     * Locks the position of the draggable elements inside the container along the specified axis.\r\n     * @type {?}\r\n     */\r\n    CdkDropList.prototype.lockAxis;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    CdkDropList.prototype._disabled;\r\n    /**\r\n     * Whether sorting within this drop list is disabled.\r\n     * @type {?}\r\n     */\r\n    CdkDropList.prototype.sortingDisabled;\r\n    /**\r\n     * Function that is used to determine whether an item\r\n     * is allowed to be moved into a drop container.\r\n     * @type {?}\r\n     */\r\n    CdkDropList.prototype.enterPredicate;\r\n    /**\r\n     * Whether to auto-scroll the view when the user moves their pointer close to the edges.\r\n     * @type {?}\r\n     */\r\n    CdkDropList.prototype.autoScrollDisabled;\r\n    /**\r\n     * Emits when the user drops an item inside the container.\r\n     * @type {?}\r\n     */\r\n    CdkDropList.prototype.dropped;\r\n    /**\r\n     * Emits when the user has moved a new drag item into this container.\r\n     * @type {?}\r\n     */\r\n    CdkDropList.prototype.entered;\r\n    /**\r\n     * Emits when the user removes an item from the container\r\n     * by dragging it into another container.\r\n     * @type {?}\r\n     */\r\n    CdkDropList.prototype.exited;\r\n    /**\r\n     * Emits as the user is swapping items while actively dragging.\r\n     * @type {?}\r\n     */\r\n    CdkDropList.prototype.sorted;\r\n    /**\r\n     * Element that the drop list is attached to.\r\n     * @type {?}\r\n     */\r\n    CdkDropList.prototype.element;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    CdkDropList.prototype._changeDetectorRef;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    CdkDropList.prototype._dir;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    CdkDropList.prototype._group;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/cdk/drag-drop/drag-drop-module.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass DragDropModule {\r\n}\r\nDragDropModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: [\r\n                    CdkDropList,\r\n                    CdkDropListGroup,\r\n                    CdkDrag,\r\n                    CdkDragHandle,\r\n                    CdkDragPreview,\r\n                    CdkDragPlaceholder,\r\n                ],\r\n                exports: [\r\n                    CdkDropList,\r\n                    CdkDropListGroup,\r\n                    CdkDrag,\r\n                    CdkDragHandle,\r\n                    CdkDragPreview,\r\n                    CdkDragPlaceholder,\r\n                ],\r\n                providers: [\r\n                    DragDrop,\r\n                ]\r\n            },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/cdk/drag-drop/public-api.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { CDK_DRAG_CONFIG, CDK_DRAG_CONFIG_FACTORY, CDK_DROP_LIST, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem, CDK_DRAG_PARENT as ɵangular_material_src_cdk_drag_drop_drag_drop_b };\r\n\r\n"]}