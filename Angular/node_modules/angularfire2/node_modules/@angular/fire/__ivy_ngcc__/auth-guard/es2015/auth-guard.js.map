{"version":3,"sources":["D:/370/FinalFrontend/node_modules/angularfire2/node_modules/@angular/fire/auth-guard/es2015/auth-guard.js"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;4HAuBE;mCACiC,AAEhC;;;;yGACsB","file":"auth-guard.js","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { of, pipe } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { AngularFireAuth } from '@angular/fire/auth';\nlet AngularFireAuthGuard = class AngularFireAuthGuard {\n    constructor(afAuth, router) {\n        this.afAuth = afAuth;\n        this.router = router;\n    }\n    canActivate(next, state) {\n        const authPipeFactory = next.data.authGuardPipe || (() => loggedIn);\n        return this.afAuth.user.pipe(take(1), authPipeFactory(next, state), map(canActivate => typeof canActivate == \"boolean\" ? canActivate : this.router.createUrlTree(canActivate)));\n    }\n};\nAngularFireAuthGuard = __decorate([\n    Injectable(),\n    __metadata(\"design:paramtypes\", [AngularFireAuth, Router])\n], AngularFireAuthGuard);\nexport { AngularFireAuthGuard };\nexport const canActivate = (pipe) => ({\n    canActivate: [AngularFireAuthGuard], data: { authGuardPipe: pipe.name === \"\" ? pipe : () => pipe }\n});\nconst ɵ0 = user => !!user;\nexport const loggedIn = map(ɵ0);\nconst ɵ1 = user => !!user && !user.isAnonymous;\nexport const isNotAnonymous = map(ɵ1);\nconst ɵ2 = (user) => user ? user.getIdTokenResult() : of(null);\nexport const idTokenResult = switchMap(ɵ2);\nconst ɵ3 = user => !!user && user.emailVerified;\nexport const emailVerified = map(ɵ3);\nconst ɵ4 = idTokenResult => idTokenResult ? idTokenResult.claims : [];\nexport const customClaims = pipe(idTokenResult, map(ɵ4));\nexport const hasCustomClaim = (claim) => pipe(customClaims, map(claims => claims.hasOwnProperty(claim)));\nexport const redirectUnauthorizedTo = (redirect) => pipe(loggedIn, map(loggedIn => loggedIn || redirect));\nexport const redirectLoggedInTo = (redirect) => pipe(loggedIn, map(loggedIn => loggedIn && redirect || true));\nexport { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4 };\n"]}