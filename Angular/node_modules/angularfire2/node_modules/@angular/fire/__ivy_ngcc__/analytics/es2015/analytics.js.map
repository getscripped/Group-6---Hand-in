{"version":3,"sources":["D:/370/FinalFrontend/node_modules/angularfire2/node_modules/@angular/fire/analytics/es2015/analytics.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4HAqFE;mCACiC,AAEhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2DAUsB","file":"analytics.js","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Injectable, Inject, Optional, NgZone, InjectionToken, PLATFORM_ID } from '@angular/core';\nimport { of } from 'rxjs';\nimport { isPlatformBrowser } from '@angular/common';\nimport { map, tap, shareReplay, switchMap, observeOn } from 'rxjs/operators';\nimport { ɵlazySDKProxy, FIREBASE_OPTIONS, FIREBASE_APP_NAME, _firebaseAppFactory, ɵAngularFireSchedulers } from '@angular/fire';\n;\nexport const COLLECTION_ENABLED = new InjectionToken('angularfire2.analytics.analyticsCollectionEnabled');\nexport const APP_VERSION = new InjectionToken('angularfire2.analytics.appVersion');\nexport const APP_NAME = new InjectionToken('angularfire2.analytics.appName');\nexport const DEBUG_MODE = new InjectionToken('angularfire2.analytics.debugMode');\nexport const CONFIG = new InjectionToken('angularfire2.analytics.config');\nconst APP_NAME_KEY = 'app_name';\nconst APP_VERSION_KEY = 'app_version';\nconst DEBUG_MODE_KEY = 'debug_mode';\nconst ANALYTICS_ID_FIELD = 'measurementId';\nconst GTAG_CONFIG_COMMAND = 'config';\nconst GTAG_FUNCTION_NAME = 'gtag';\nconst DATA_LAYER_NAME = 'dataLayer';\n;\nlet AngularFireAnalytics = class AngularFireAnalytics {\n    constructor(options, nameOrConfig, analyticsCollectionEnabled, providedAppVersion, providedAppName, debugModeEnabled, providedConfig, platformId, zone) {\n        this.options = options;\n        const schedulers = new ɵAngularFireSchedulers(zone);\n        if (isPlatformBrowser(platformId)) {\n            window[DATA_LAYER_NAME] = window[DATA_LAYER_NAME] || [];\n            this.gtag = window[GTAG_FUNCTION_NAME] || function () { window[DATA_LAYER_NAME].push(arguments); };\n            this.analyticsInitialized = zone.runOutsideAngular(() => new Promise(resolve => {\n                window[GTAG_FUNCTION_NAME] = (...args) => {\n                    if (args[0] == 'js') {\n                        resolve();\n                    }\n                    this.gtag(...args);\n                };\n            }));\n        }\n        else {\n            this.analyticsInitialized = Promise.resolve();\n            this.gtag = () => { };\n        }\n        if (providedConfig) {\n            this.updateConfig(providedConfig);\n        }\n        if (providedAppName) {\n            this.updateConfig({ [APP_NAME_KEY]: providedAppName });\n        }\n        if (providedAppVersion) {\n            this.updateConfig({ [APP_VERSION_KEY]: providedAppVersion });\n        }\n        if (debugModeEnabled) {\n            this.updateConfig({ [DEBUG_MODE_KEY]: 1 });\n        }\n        const analytics = of(undefined).pipe(observeOn(schedulers.outsideAngular), switchMap(() => import('firebase/analytics')), map(() => _firebaseAppFactory(options, zone, nameOrConfig)), map(app => app.analytics()), tap(analytics => {\n            if (analyticsCollectionEnabled === false) {\n                analytics.setAnalyticsCollectionEnabled(false);\n            }\n        }), shareReplay({ bufferSize: 1, refCount: false }));\n        return ɵlazySDKProxy(this, analytics, zone);\n    }\n    updateConfig(config) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.analyticsInitialized;\n            this.gtag(GTAG_CONFIG_COMMAND, this.options[ANALYTICS_ID_FIELD], Object.assign({}, config, { update: true }));\n        });\n    }\n    ;\n};\nAngularFireAnalytics = __decorate([\n    Injectable(),\n    __param(0, Inject(FIREBASE_OPTIONS)),\n    __param(1, Optional()), __param(1, Inject(FIREBASE_APP_NAME)),\n    __param(2, Optional()), __param(2, Inject(COLLECTION_ENABLED)),\n    __param(3, Optional()), __param(3, Inject(APP_VERSION)),\n    __param(4, Optional()), __param(4, Inject(APP_NAME)),\n    __param(5, Optional()), __param(5, Inject(DEBUG_MODE)),\n    __param(6, Optional()), __param(6, Inject(CONFIG)),\n    __param(7, Inject(PLATFORM_ID)),\n    __metadata(\"design:paramtypes\", [Object, Object, Object, Object, Object, Object, Object, Object,\n        NgZone])\n], AngularFireAnalytics);\nexport { AngularFireAnalytics };\n"]}