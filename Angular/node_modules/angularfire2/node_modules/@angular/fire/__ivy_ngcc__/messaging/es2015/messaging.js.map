{"version":3,"sources":["D:/370/FinalFrontend/node_modules/angularfire2/node_modules/@angular/fire/messaging/es2015/messaging.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4HAmCE;mCACiC,AAEhC;;;;;;;;;;;;;;;;;;;2DAKsB","file":"messaging.js","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Injectable, Inject, Optional, NgZone, PLATFORM_ID } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport { Observable, from, of, throwError } from 'rxjs';\nimport { mergeMap, catchError, map, switchMap, concat, defaultIfEmpty, observeOn } from 'rxjs/operators';\nimport { ɵAngularFireSchedulers, _firebaseAppFactory, FIREBASE_APP_NAME, FIREBASE_OPTIONS } from '@angular/fire';\nlet AngularFireMessaging = class AngularFireMessaging {\n    constructor(options, nameOrConfig, platformId, zone) {\n        const schedulers = new ɵAngularFireSchedulers(zone);\n        const requireMessaging = from(import('firebase/messaging'));\n        this.messaging = requireMessaging.pipe(observeOn(schedulers.outsideAngular), map(() => _firebaseAppFactory(options, zone, nameOrConfig)), map(app => app.messaging()));\n        if (!isPlatformServer(platformId)) {\n            this.requestPermission = this.messaging.pipe(observeOn(schedulers.outsideAngular), switchMap(messaging => messaging.requestPermission()));\n        }\n        else {\n            this.requestPermission = throwError('Not available on server platform.');\n        }\n        this.getToken = this.messaging.pipe(observeOn(schedulers.outsideAngular), switchMap(messaging => messaging.getToken()), defaultIfEmpty(null));\n        const tokenChanges = this.messaging.pipe(observeOn(schedulers.outsideAngular), switchMap(messaging => new Observable(messaging.onTokenRefresh.bind(messaging)).pipe(switchMap(() => messaging.getToken()))));\n        this.tokenChanges = this.getToken.pipe(concat(tokenChanges));\n        this.messages = this.messaging.pipe(observeOn(schedulers.outsideAngular), switchMap(messaging => new Observable(messaging.onMessage.bind(messaging))));\n        this.requestToken = this.requestPermission.pipe(catchError(() => of(null)), mergeMap(() => this.tokenChanges));\n        this.deleteToken = (token) => this.messaging.pipe(observeOn(schedulers.outsideAngular), switchMap(messaging => messaging.deleteToken(token)), defaultIfEmpty(false));\n    }\n};\nAngularFireMessaging = __decorate([\n    Injectable(),\n    __param(0, Inject(FIREBASE_OPTIONS)),\n    __param(1, Optional()), __param(1, Inject(FIREBASE_APP_NAME)),\n    __param(2, Inject(PLATFORM_ID)),\n    __metadata(\"design:paramtypes\", [Object, Object, Object,\n        NgZone])\n], AngularFireMessaging);\nexport { AngularFireMessaging };\n"]}