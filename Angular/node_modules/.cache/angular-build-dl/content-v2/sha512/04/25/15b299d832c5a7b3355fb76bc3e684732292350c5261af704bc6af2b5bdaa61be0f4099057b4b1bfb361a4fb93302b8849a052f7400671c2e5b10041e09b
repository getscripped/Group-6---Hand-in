{"version":3,"sources":["webpack:///src/app/pages/login/login.component.html","webpack:///src/app/pages/login/login.component.ts","webpack:///src/app/pages/login/login.module.ts"],"names":["User","LoginComponent","appSettings","fb","router","httpserv","username","password","UserSubmit","settings","form","group","compose","required","minLength","values","valid","navigate","newPass","User_Email","User_Password","post","subscribe","data","localStorage","setItem","Token","alert","getItem","error","loadingSpinner","selector","template","routes","path","component","pathMatch","LoginModule","imports","forChild","declarations"],"mappings":"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","file":"pages-login-login-module-es5.js","sourcesContent":["export default \"<mat-sidenav-container>\\r\\n\\r\\n  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"h-100\\\">\\r\\n\\r\\n       <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"Login()\\\" fxFlex=\\\"80\\\" fxFlex.gt-sm=\\\"30\\\" fxFlex.sm=\\\"60\\\">\\r\\n\\r\\n            <mat-card class=\\\"p-0 mat-elevation-z24 box\\\">\\r\\n                <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"bg-primary box-header\\\">\\r\\n                    <button mat-fab type=\\\"button\\\" color=\\\"accent\\\" class=\\\"mat-elevation-z12\\\" (click)=\\\"onSubmit(form.value);\\\">\\r\\n                        <mat-icon>exit_to_app</mat-icon>\\r\\n                    </button>\\r\\n                    <a mat-button routerLink=\\\"/register\\\">Don't have an account? Sign up now!</a>\\r\\n                </div>\\r\\n                <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"end center\\\" class=\\\"box-content\\\">\\r\\n                    <mat-card fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"mat-elevation-z12 box-content-inner\\\">\\r\\n                        <span class=\\\"box-content-header\\\">member login</span>  \\r\\n                        <mat-form-field class=\\\"w-100\\\">\\r\\n                            <input matInput placeholder=\\\"Email\\\"  formControlName=\\\"email\\\" [(ngModel)] = \\\"username\\\">\\r\\n                            <mat-error *ngIf=\\\"form.controls.email.errors?.required\\\">Email is required</mat-error>\\r\\n                            <mat-error *ngIf=\\\"form.controls.email.hasError('invalidEmail')\\\">Invalid email address</mat-error>\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"w-100\\\">\\r\\n                            <input matInput type=\\\"password\\\" placeholder=\\\"Password\\\"  formControlName=\\\"password\\\" [(ngModel)] = \\\"password\\\">\\r\\n                            <mat-error *ngIf=\\\"form.controls.password.errors?.required\\\">Password is required</mat-error>\\r\\n                            <mat-error *ngIf=\\\"form.controls.password.hasError('minlength')\\\">Password isn't long enough, minimum of 6 characters</mat-error>\\r\\n                        </mat-form-field> \\r\\n                    </mat-card>\\r\\n                    <button mat-raised-button color=\\\"primary\\\" class=\\\"mat-elevation-z12 box-button\\\" type=\\\"submit\\\">SIGN IN</button>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n            \\r\\n        </form>    \\r\\n  \\r\\n  </div>\\r\\n\\r\\n</mat-sidenav-container>\";","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormGroup, FormBuilder, Validators} from '@angular/forms';\r\nimport { emailValidator } from '../../theme/utils/app-validators';\r\nimport { AppSettings } from '../../app.settings';\r\nimport { Settings } from '../../app.settings.model';\r\nimport * as CryptoJS from 'crypto-js';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { stringToKeyValue } from '@angular/flex-layout/extended/typings/style/style-transforms';\r\nexport class User{\r\n  User_Email: string;\r\n  User_Password: string;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html'\r\n})\r\n\r\n\r\n\r\nexport class LoginComponent {\r\n  public form:FormGroup;\r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings, public fb: FormBuilder, public router:Router, private httpserv: HttpClient){\r\n    this.settings = this.appSettings.settings; \r\n    this.form = this.fb.group({  //<<<< form validation\r\n      'email': [null, Validators.compose([Validators.required, emailValidator])],\r\n      'password': [null, Validators.compose([Validators.required, Validators.minLength(6)])] \r\n    });\r\n  }\r\n\r\n  username: string = \"\";\r\n  password: string = \"\"; \r\n  newPass: string;\r\n  UserSubmit =  new User;\r\n\r\n  public onSubmit(values:Object):void {\r\n    if (this.form.valid) {\r\n      this.router.navigate(['/']);\r\n    }\r\n  }\r\n\r\n\r\n  //=========================================API login POST===================================\r\n  public Login():void {\r\n   this.newPass = this.password;  //<<<< front end encryption(first layer)\r\n   this.UserSubmit.User_Email = this.username;\r\n   this.UserSubmit.User_Password = this.newPass;  //<<<< set new password to post\r\n    this.httpserv.post<User>(\"http://35.178.156.37/api/User/Login\",this.UserSubmit).subscribe(   // <<< Post to LOGIN API endpoint\r\n      (data:any) => {\r\n        localStorage.setItem(\"jwtToken\", data.Token);   // <<< fetch and save JWT token\r\n        localStorage.setItem(\"loggedIn\", \"Yes\");       // <<< set global logged in attribute\r\n        //=======JWT DECODE FOR USER ID HERE localstorage = currentUser======\r\n        alert(localStorage.getItem(\"jwtToken\"));\r\n      },\r\n      error =>{ // <<<<<< Login failed\r\n        alert(\"Login failed\");\r\n      }\r\n      \r\n\r\n    );\r\n      \r\n  }\r\n\r\n  ngAfterViewInit(){\r\n    this.settings.loadingSpinner = false; \r\n  }\r\n\r\n\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { LoginComponent } from './login.component';\r\n\r\nexport const routes = [\r\n  { path: '', component: LoginComponent, pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    FormsModule, \r\n    ReactiveFormsModule,\r\n    SharedModule\r\n  ],\r\n  declarations: [\r\n    LoginComponent\r\n  ]\r\n})\r\nexport class LoginModule { }"]}