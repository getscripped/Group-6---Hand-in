{"version":3,"sources":["webpack:///src/app/pages/register/register.component.html","webpack:///src/app/Models/register.ts","webpack:///src/app/pages/register/register.component.ts","webpack:///src/app/pages/register/register.module.ts"],"names":["Register","RegisterComponent","appSettings","fb","router","fireStorage","http","basePath","downloadableURL","submit1","submit2","SubmitData","PostData","settings","form","group","compose","required","minLength","validator","file","filePath","IDNum","task","upload","progressValue","percentageChanges","ref","getDownloadURL","then","url","postData","Image","post","subscribe","success","alert","event","reader","FileReader","target","files","length","readAsDataURL","onload","imageSrc","result","patchValue","fileSource","name","error","Email","console","log","loadingSpinner","k","charCode","selector","template","routes","path","component","pathMatch","RegisterModule","imports","forChild","declarations"],"mappings":"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","file":"pages-register-register-module-es5.js","sourcesContent":["export default \"<mat-sidenav-container>\\r\\n  \\r\\n    <div fxLayout=\\\"row\\\"  fxLayoutAlign=\\\"center center\\\" class=\\\"h-100\\\"  style=\\\"overflow: auto\\\">      \\r\\n  \\r\\n         <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\" fxFlex=\\\"100\\\"  fxFlex.gt-sm=\\\"40\\\"  >\\r\\n  \\r\\n              <mat-card class=\\\"p-0 mat-elevation-z24 box register\\\">\\r\\n                  <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"bg-primary box-header\\\">\\r\\n                      <button mat-fab color=\\\"accent\\\" class=\\\"mat-elevation-z12\\\" (click)=\\\"onSubmit();\\\">\\r\\n                          <mat-icon>person_add</mat-icon>\\r\\n                      </button>\\r\\n                      <a mat-button routerLink=\\\"/login\\\">Already have an account? Sign in!</a>\\r\\n                      \\r\\n                  </div>\\r\\n                  <mat-card-content fxLayout=\\\"column\\\"  fxLayoutAlign=\\\"end center\\\"  class=\\\"box-content\\\">\\r\\n                  \\r\\n                      <mat-card fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"mat-elevation-z12 box-content-inner\\\">\\r\\n                        <h1>Register Farmer</h1>  \\r\\n                        \\r\\n                        <img [src]=\\\"imageSrc\\\" *ngIf=\\\"imageSrc\\\" style=\\\"height: 100px; width:100px; position: relative;float: right;overflow: hidden;\\\">\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                          <label for=\\\"file\\\" style=\\\"text-align:center;display: block;\\\">Profile Photo</label>\\r\\n                          <input \\r\\n                              formControlName=\\\"file\\\"\\r\\n                              id=\\\"file\\\" \\r\\n                              type=\\\"file\\\" \\r\\n                              class=\\\"form-control\\\"\\r\\n                              (change)=\\\"onSelectedFile($event)\\\">\\r\\n                          \\r\\n                      </div>\\r\\n                      \\r\\n                     \\r\\n                      \\r\\n\\r\\n                         \\r\\n                          <mat-form-field class=\\\"w-100\\\">\\r\\n                            <input matInput placeholder=\\\"Full Name\\\" (keypress)=\\\"omit_special_char($event)\\\" formControlName=\\\"name\\\" [(ngModel)] = \\\"SubmitData.Name\\\" required>\\r\\n                            <mat-error *ngIf=\\\"form.controls.name.errors?.required\\\">Full Name is required</mat-error>\\r\\n                            <mat-error *ngIf=\\\"form.controls.name.hasError('minlength')\\\">Full Name isn't long enough, minimum of 3 characters</mat-error>\\r\\n                          </mat-form-field>\\r\\n                          <mat-form-field class=\\\"w-100\\\">\\r\\n                          <input matInput placeholder=\\\"Surname\\\" formControlName=\\\"surname\\\" (keypress)=\\\"omit_special_char($event)\\\"  [(ngModel)] = \\\"SubmitData.Surname\\\" required>\\r\\n                            <mat-error *ngIf=\\\"form.controls.surname.errors?.required\\\">Surname is required</mat-error>\\r\\n                            <mat-error *ngIf=\\\"form.controls.surname.hasError('minlength')\\\">Surname isn't long enough, minimum of 3 characters</mat-error>\\r\\n                          </mat-form-field>\\r\\n                          <mat-form-field class=\\\"w-100\\\">\\r\\n                            <input matInput placeholder=\\\"ID Number\\\" formControlName=\\\"id\\\" (keypress)=\\\"omit_special_char_Let($event)\\\" maxlength=\\\"13\\\"  [(ngModel)] = \\\"SubmitData.IDNum\\\" (change) = \\\"checkID()\\\" required>\\r\\n                              <mat-error *ngIf=\\\"form.controls.id.errors?.required\\\">ID Number is required</mat-error>\\r\\n                              <mat-error *ngIf=\\\"form.controls.id.hasError('minlength')\\\">ID Number invalid</mat-error>\\r\\n                            </mat-form-field>\\r\\n                            <mat-form-field class=\\\"w-100\\\">\\r\\n                                <input matInput placeholder=\\\"Street Address\\\" formControlName=\\\"address\\\" (keypress)=\\\"omit_special_char($event)\\\"  [(ngModel)] = \\\"SubmitData.Adress\\\" required>\\r\\n                                  <mat-error *ngIf=\\\"form.controls.address.errors?.required\\\">Address is required</mat-error>\\r\\n                                  <mat-error *ngIf=\\\"form.controls.address.hasError('minlength')\\\">Address invalid</mat-error>\\r\\n                            </mat-form-field>\\r\\n                            <mat-form-field class=\\\"w-100\\\">\\r\\n                                <input matInput placeholder=\\\"Phone Number\\\" maxlength=\\\"10\\\" formControlName=\\\"number\\\" (keypress)=\\\"omit_special_char($event)\\\"  [(ngModel)] = \\\"SubmitData.Phone\\\" required>\\r\\n                                  <mat-error *ngIf=\\\"form.controls.number.errors?.required\\\">Phone Number is required</mat-error>\\r\\n                                  <mat-error *ngIf=\\\"form.controls.number.hasError('minlength')\\\">Phone Number invalid</mat-error>\\r\\n                                </mat-form-field>\\r\\n                          <mat-form-field class=\\\"w-100\\\">\\r\\n                              <input matInput placeholder=\\\"Email\\\" type=\\\"email\\\" formControlName=\\\"email\\\"  [(ngModel)] = \\\"SubmitData.Email\\\" (blur) = \\\"CheckEmail()\\\" required>\\r\\n                              <mat-error *ngIf=\\\"form.controls.email.errors?.required\\\">Email is required</mat-error>\\r\\n                              <mat-error *ngIf=\\\"form.controls.email.hasError('invalidEmail')\\\">Invalid email address</mat-error>\\r\\n                          </mat-form-field>\\r\\n                          <mat-form-field class=\\\"w-100\\\">\\r\\n                              <input matInput placeholder=\\\"Password\\\" formControlName=\\\"password\\\" type=\\\"password\\\" minlength=\\\"6\\\"  [(ngModel)] = \\\"SubmitData.Password\\\" required>\\r\\n                              <mat-error *ngIf=\\\"form.controls.password.errors?.required\\\">Password is required</mat-error>\\r\\n                              <mat-error *ngIf=\\\"form.controls.password.hasError('minlength')\\\">Password isn't long enough, minimum of 6 characters</mat-error>\\r\\n                          </mat-form-field> \\r\\n                          <mat-form-field class=\\\"w-100\\\">\\r\\n                            <input matInput placeholder=\\\"Confirm Password\\\" formControlName=\\\"confirmPassword\\\" type=\\\"password\\\" required>\\r\\n                            <mat-error *ngIf=\\\"form.controls.confirmPassword.errors?.required\\\">Confirm Password is required</mat-error>\\r\\n                            <mat-error *ngIf=\\\"form.controls.confirmPassword.hasError('mismatchedPasswords')\\\">Passwords do not match</mat-error>\\r\\n                          </mat-form-field>\\r\\n\\r\\n\\r\\n                          \\r\\n                          \\r\\n                         \\r\\n                      </mat-card>\\r\\n                      <button mat-raised-button color=\\\"primary\\\" class=\\\"mat-elevation-z12 box-button\\\" type=\\\"submit\\\" *ngIf = \\\"submit1 && submit2\\\">SIGN UP</button>\\r\\n                  </mat-card-content>\\r\\n              </mat-card>\\r\\n              \\r\\n         </form>   \\r\\n    \\r\\n    \\r\\n    </div>\\r\\n  \\r\\n  </mat-sidenav-container>\\r\\n\\r\\n\";","export class Register{\r\n    constructor(){}\r\n    public Email: string;\r\n    public Password: string;\r\n    public Name: string;\r\n    public Surname: string;\r\n    public IDNum: string;\r\n    public Adress : string;\r\n    public DOB: Date;\r\n    public Phone : string;\r\n    public Image: string;\r\n}","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormGroup, FormBuilder, Validators} from '@angular/forms';\r\nimport { emailValidator, matchingPasswords } from '../../theme/utils/app-validators';\r\nimport { AppSettings } from '../../app.settings';\r\nimport { Settings } from '../../app.settings.model';\r\nimport { Register } from 'src/app/Models/register';\r\nimport { AngularFireStorage, AngularFireUploadTask  } from '@angular/fire/storage';   //   import <<<<\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html'\r\n})\r\nexport class RegisterComponent {\r\n  public form:FormGroup;\r\n  public settings: Settings;\r\n\r\n  imageSrc: string;\r\n  basePath = '/images';                       //  <<<<<<< Image base path\r\n  downloadableURL = '';                      //  <<<<<<<   URL for firebase image view\r\n  task: AngularFireUploadTask;               //  <<<<<<< Task for firebase upload\r\n\r\n  submit1: boolean = false;\r\n  submit2: boolean = false;\r\n\r\n\r\n\r\n\r\n\r\n\r\n  constructor(public appSettings:AppSettings, public fb: FormBuilder, public router:Router,private fireStorage: AngularFireStorage,private http: HttpClient){\r\n    this.settings = this.appSettings.settings; \r\n    this.form = this.fb.group({\r\n      'name': [null, Validators.compose([Validators.required, Validators.minLength(3)])],\r\n      'surname': [null, Validators.compose([Validators.required, Validators.minLength(3)])],\r\n      'id': [null, Validators.compose([Validators.required, Validators.minLength(13)])],\r\n      'number': [null, Validators.compose([Validators.required, Validators.minLength(10)])],\r\n      'city': [null, Validators.compose([Validators.required, Validators.minLength(3)])],\r\n      'address': [null, Validators.compose([Validators.required, Validators.minLength(3)])],\r\n      'postalCode': [null, Validators.compose([Validators.required, Validators.minLength(3)])],\r\n      'email': [null, Validators.compose([Validators.required, emailValidator])],\r\n      'password': ['', Validators.required],\r\n      'confirmPassword': ['', Validators.required]\r\n    },{validator: matchingPasswords('password', 'confirmPassword')});\r\n  }\r\n\r\n\r\n SubmitData = new Register(); //  <<< Submitted from the form\r\n PostData = new Register();   //  <<< To be Submitted to the API\r\n\r\nfile: any; // <<< Photo placeholder to be sent to firebase\r\nprogressValue: Observable<number>; //   <<<  Progress bar for image upload\r\n\r\n//=================================Initial submit for image upload to firebase========================\r\n  public async onSubmit() {\r\n\r\n     \r\n    if (this.file) {\r\n      \r\n      \r\n       const filePath = `${this.basePath}/${this.SubmitData.IDNum}`;  // path at which image will be stored in the firebase storage\r\n       this.task =  this.fireStorage.upload(filePath, this.file);    // upload task\r\n \r\n       // this.progress = this.snapTask.percentageChanges();\r\n \r\n       this.progressValue = this.task.percentageChanges();\r\n       (await this.task).ref.getDownloadURL().then(url => \r\n        {\r\n          this.downloadableURL = url;// <<< url is found here\r\n          this.postData()\r\n        });  \r\n     } else {  \r\n       this.downloadableURL = ''; \r\n       this.postData();\r\n      }\r\n \r\n \r\n       \r\n   }\r\n\r\n   //=================================Secondary functio to submit to API===========================\r\n  postData(){\r\n    \r\n    this.PostData = this.SubmitData;\r\n    this.PostData.Image = this.downloadableURL;   //   <<< Set firebase URl for database\r\n    this.http.post<Register>(\"http://35.178.156.37/api/User/Register\", this.PostData).subscribe(\r\n      success=> {\r\n        alert(\"Registration succesfull!\");\r\n\r\n      }\r\n    );\r\n  }\r\n//=================================================================================================\r\n  onSelectedFile(event){\r\n    \r\n    const reader = new FileReader();\r\n    \r\n    if(event.target.files && event.target.files.length) {\r\n      const [file] = event.target.files;\r\n      reader.readAsDataURL(file);\r\n    \r\n      reader.onload = () => {\r\n   \r\n        this.imageSrc = reader.result as string;\r\n     \r\n        this.form.patchValue({\r\n          fileSource: reader.result\r\n        });\r\n   \r\n      };\r\n   \r\n    }\r\n    \r\n       this.file = event.target.files[0];\r\n       this.file.name = this.SubmitData.IDNum;\r\n     \r\n    \r\n  }\r\n\r\n\r\n  //==================================Post to Api to check if ID exists=============================\r\n  checkID(){\r\n\r\n    if(this.SubmitData.IDNum.length == 13){\r\n    this.http.post(\"http://35.178.156.37/api/UserExists\", this.SubmitData.IDNum).subscribe(  //  <<< Post for ID exists check\r\n      success => {\r\n        this.submit1 = true; // <<< Button shows if ID not found\r\n      },\r\n\r\n      error =>{\r\n        alert(\"Id number is already in use\");\r\n        this.SubmitData.IDNum = null;\r\n        this.submit1 = false;   // <<< Button hides when ID found\r\n      }\r\n      \r\n    );\r\n    }else{\r\n      this.submit1 = false;   // <<< Button hide\r\n    }\r\n  }\r\n\r\n//==================================Post to api to see if email exists=============================\r\n  CheckEmail(){\r\n\r\n    \r\n    this.http.post(\"http://35.178.156.37/api/UserExists\", this.SubmitData.Email).subscribe( //  <<< Post for Email exists check\r\n      success => {\r\n        this.submit2 = true; // <<< Button shows if ID not found\r\n        if (this.SubmitData.Email.length == 0){\r\n          this.submit2 = false; // <<< Button hides \r\n        }\r\n      },\r\n\r\n      error =>{\r\n        alert(\"Email is already in use\");\r\n        this.SubmitData.Email = null;\r\n        console.log(error);\r\n        this.submit2 = false; // <<< Button hides when ID found\r\n      }\r\n      \r\n    );\r\n\r\n  }\r\n\r\n\r\n  //====================================Loading bar for file upload===============================\r\n  ngAfterViewInit(){\r\n    this.settings.loadingSpinner = false; \r\n  }\r\n  //===========================================REGEX to avoid SQL injection=======================\r\n  omit_special_char(event)\r\n  {   \r\n   var k;  \r\n   k = event.charCode;  //         k = event.keyCode;  (Both can be used)\r\n   return((k > 64 && k < 91) || (k > 96 && k < 123) || k == 8 || k == 32 || (k >= 48 && k <= 57)); \r\n  }\r\n\r\n  //============================================REGEX only to allow numbers=======================\r\n  omit_special_char_Let(event)\r\n  {   \r\n   var k;  \r\n   k = event.charCode;  //         k = event.keyCode;  (Both can be used)\r\n   return( (k >= 48 && k <= 57)); \r\n  }\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { RegisterComponent } from './register.component';\r\nimport {ScrollingModule} from '@angular/cdk/scrolling';\r\n\r\n\r\nexport const routes = [\r\n  { path: '', component: RegisterComponent, pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    FormsModule, \r\n    ReactiveFormsModule,\r\n    SharedModule,\r\n    ScrollingModule\r\n  ],\r\n  declarations: [\r\n    RegisterComponent\r\n  ]\r\n})\r\nexport class RegisterModule { }"]}