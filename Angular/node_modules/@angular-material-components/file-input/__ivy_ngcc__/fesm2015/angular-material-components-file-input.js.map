{"version":3,"sources":["D:/370/Project code/gradus/node_modules/@angular-material-components/file-input/fesm2015/angular-material-components-file-input.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA;;;;CAEC;;;;;;0BAKC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkTD,g/BAkBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA0BA;;;;;;;;;;;;;;;;CAQD;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAmBC","file":"angular-material-components-file-input.js","sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { ChangeDetectorRef, Component, ElementRef, forwardRef, Input, Optional, Self, ViewChild, ViewEncapsulation, Directive, ContentChild, NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { _MatInputMixinBase, MatInputModule } from '@angular/material/input';\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/file-input.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nlet nextUniqueId = 0;\r\nclass NgxMatFileInputIcon {\r\n}\r\nNgxMatFileInputIcon.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[ngxMatFileInputIcon]'\r\n            },] }\r\n];\r\nclass NgxMatFileInputComponent extends _MatInputMixinBase {\r\n    /**\r\n     * @param {?} _elementRef\r\n     * @param {?} _platform\r\n     * @param {?} _cd\r\n     * @param {?} ngControl\r\n     * @param {?} _parentForm\r\n     * @param {?} _parentFormGroup\r\n     * @param {?} _defaultErrorStateMatcher\r\n     */\r\n    constructor(_elementRef, _platform, _cd, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher) {\r\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\r\n        this._elementRef = _elementRef;\r\n        this._platform = _platform;\r\n        this._cd = _cd;\r\n        this.ngControl = ngControl;\r\n        this.color = 'primary';\r\n        this.fileNames = null;\r\n        this._uid = `ngx-mat-fileinput-${nextUniqueId++}`;\r\n        this.stateChanges = new Subject();\r\n        this.focused = false;\r\n        this.controlType = 'ngx-mat-file-input';\r\n        this.autofilled = false;\r\n        /**\r\n         * Function when touched\r\n         */\r\n        this._onTouched = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n        /**\r\n         * Function when changed\r\n         */\r\n        this._onChange = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n        this._disabled = false;\r\n        this._multiple = false;\r\n        this.placeholder = 'Choose a file';\r\n        this.separator = ',';\r\n        this._required = false;\r\n        this._readonly = true;\r\n        this.id = this.id;\r\n        if (this.ngControl) {\r\n            this.ngControl.valueAccessor = this;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get disabled() {\r\n        if (this.ngControl && this.ngControl.disabled !== null) {\r\n            return this.ngControl.disabled;\r\n        }\r\n        return this._disabled;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n        if (this.focused) {\r\n            this.focused = false;\r\n            this.stateChanges.next();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get id() { return this._id; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set id(value) { this._id = value || this._uid; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get multiple() { return this._multiple; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set multiple(value) {\r\n        this._multiple = coerceBooleanProperty(value);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get required() { return this._required; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set required(value) { this._required = coerceBooleanProperty(value); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get value() { return this._value; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set value(value) {\r\n        this._value = value;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get readonly() { return this._readonly; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set readonly(value) { this._readonly = coerceBooleanProperty(value); }\r\n    /**\r\n     * Limiting accepted file types\r\n     * Example: accept=\"image/png, image/jpeg\" or accept=\".png, .jpg, .jpeg\" â€” Accept PNG or JPEG files.\r\n     * @return {?}\r\n     */\r\n    get accept() { return this._accept; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set accept(value) {\r\n        this._accept = value;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnChanges() {\r\n        this.stateChanges.next();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this.stateChanges.complete();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngDoCheck() {\r\n        if (this.ngControl) {\r\n            this.updateErrorState();\r\n        }\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    writeValue(value) {\r\n        this._updateInputValue(value);\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) {\r\n        this._onChange = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) {\r\n        this._onTouched = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n        this.stateChanges.next();\r\n    }\r\n    /**\r\n     * Focuses the input.\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    focus(options) {\r\n        this._inputValueRef.nativeElement.focus(options);\r\n    }\r\n    /**\r\n     * @param {?} isFocused\r\n     * @return {?}\r\n     */\r\n    _focusChanged(isFocused) {\r\n        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\r\n            this.focused = isFocused;\r\n            this.stateChanges.next();\r\n        }\r\n    }\r\n    /**\r\n     * Mark the field as touched\r\n     * @return {?}\r\n     */\r\n    _markAsTouched() {\r\n        this._onTouched();\r\n        this._cd.markForCheck();\r\n        this.stateChanges.next();\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    _isBadInput() {\r\n        /** @type {?} */\r\n        let validity = ((/** @type {?} */ (this._inputValueRef.nativeElement))).validity;\r\n        return validity && validity.badInput;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get empty() {\r\n        return !this._inputValueRef.nativeElement.value && !this._isBadInput() &&\r\n            !this.autofilled;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get shouldLabelFloat() {\r\n        return this.focused || !this.empty;\r\n    }\r\n    /**\r\n     * @param {?} ids\r\n     * @return {?}\r\n     */\r\n    setDescribedByIds(ids) {\r\n        this._ariaDescribedby = ids.join(' ');\r\n    }\r\n    /**\r\n     * @param {?=} event\r\n     * @return {?}\r\n     */\r\n    openFilePicker(event) {\r\n        this._inputFileRef.nativeElement.click();\r\n        if (event) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        this._markAsTouched();\r\n    }\r\n    /**\r\n     * @param {?} filelist\r\n     * @return {?}\r\n     */\r\n    handleFiles(filelist) {\r\n        if (filelist.length > 0) {\r\n            /** @type {?} */\r\n            const files = new Array();\r\n            for (let i = 0; i < filelist.length; i++) {\r\n                files.push(filelist.item(i));\r\n            }\r\n            this._updateInputValue(files);\r\n            this._resetInputFile();\r\n            this._onChange(this.multiple ? files : files[0]);\r\n        }\r\n    }\r\n    /**\r\n     * Handles a click on the control's container.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    onContainerClick(event) { }\r\n    ;\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _resetInputFile() {\r\n        this._inputFileRef.nativeElement.value = \"\";\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} files\r\n     * @return {?}\r\n     */\r\n    _updateInputValue(files) {\r\n        /** @type {?} */\r\n        let text = null;\r\n        if (files) {\r\n            if (Array.isArray(files)) {\r\n                text = this._multiple\r\n                    ? files.map((/**\r\n                     * @param {?} x\r\n                     * @return {?}\r\n                     */\r\n                    x => x.name)).join(this.separator)\r\n                    : files[0].name;\r\n            }\r\n            else {\r\n                text = files.name != null ? files.name : null;\r\n            }\r\n        }\r\n        this._inputValueRef.nativeElement.value = text;\r\n    }\r\n}\r\nNgxMatFileInputComponent.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngx-mat-file-input',\r\n                template: \"<input #inputValue autocomplete=\\\"off\\\" class=\\\"mat-input-element mat-form-field-autofill-control\\\" [attr.id]='id'\\r\\n  [attr.placeholder]='placeholder' [disabled]='disabled' [required]='required' [attr.readonly]='readonly || null'\\r\\n  [attr.aria-describedby]='_ariaDescribedby || null' [attr.aria-invalid]='errorState'\\r\\n  [attr.aria-required]='required.toString()'>\\r\\n<div class=\\\"mat-form-field-suffix\\\">\\r\\n  <button matSuffix mat-icon-button [color]=\\\"color\\\" class=\\\"button-browse\\\"  (click)=\\\"openFilePicker($event)\\\" type=\\\"button\\\"\\r\\n   [disabled]=\\\"disabled\\\">\\r\\n    <mat-icon *ngIf=\\\"!_customIcon\\\" class=\\\"ngx-mat-file-input--default-icon\\\">attach_file</mat-icon>\\r\\n    <ng-content select=\\\"[ngxMatFileInputIcon]\\\"></ng-content>\\r\\n  </button>\\r\\n</div>\\r\\n<input type=\\\"file\\\" #inputFile (change)=\\\"handleFiles($event.target.files)\\\" class=\\\"input-file\\\"\\r\\n  [multiple]=\\\"multiple\\\" [accept]=\\\"accept\\\">\",\r\n                encapsulation: ViewEncapsulation.None,\r\n                host: {\r\n                    'class': 'ngx-mat-file-input'\r\n                },\r\n                providers: [\r\n                    { provide: MatFormFieldControl, useExisting: forwardRef((/**\r\n                         * @return {?}\r\n                         */\r\n                        () => NgxMatFileInputComponent)) }\r\n                ],\r\n                exportAs: 'ngx-mat-file-input',\r\n                styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-file-input--default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-file-input--default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-file-input--default-icon{margin:auto}.ngx-mat-file-input{display:flex;line-height:18px;height:18px;align-items:center}.ngx-mat-file-input .input-file{display:block;visibility:hidden;width:0;height:0}\"]\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nNgxMatFileInputComponent.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: Platform },\r\n    { type: ChangeDetectorRef },\r\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\r\n    { type: NgForm, decorators: [{ type: Optional }] },\r\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\r\n    { type: ErrorStateMatcher }\r\n];\r\nNgxMatFileInputComponent.propDecorators = {\r\n    _inputFileRef: [{ type: ViewChild, args: ['inputFile',] }],\r\n    _inputValueRef: [{ type: ViewChild, args: ['inputValue',] }],\r\n    _customIcon: [{ type: ContentChild, args: [NgxMatFileInputIcon,] }],\r\n    color: [{ type: Input }],\r\n    disabled: [{ type: Input }],\r\n    id: [{ type: Input }],\r\n    multiple: [{ type: Input }],\r\n    placeholder: [{ type: Input }],\r\n    separator: [{ type: Input }],\r\n    required: [{ type: Input }],\r\n    errorStateMatcher: [{ type: Input }],\r\n    value: [{ type: Input }],\r\n    readonly: [{ type: Input }],\r\n    accept: [{ type: Input }]\r\n};\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/file-input.module.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxMatFileInputModule {\r\n}\r\nNgxMatFileInputModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: [\r\n                    NgxMatFileInputComponent,\r\n                    NgxMatFileInputIcon\r\n                ],\r\n                imports: [\r\n                    CommonModule,\r\n                    MatButtonModule,\r\n                    MatIconModule,\r\n                    MatFormFieldModule,\r\n                    MatInputModule\r\n                ],\r\n                exports: [\r\n                    NgxMatFileInputComponent,\r\n                    NgxMatFileInputIcon\r\n                ]\r\n            },] }\r\n];\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/file-input-type.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/file-input-helper.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @param {?} number\r\n * @return {?}\r\n */\r\nfunction calculFileSize(number) {\r\n    if (number < 1024) {\r\n        return number + 'bytes';\r\n    }\r\n    else if (number >= 1024 && number < 1048576) {\r\n        return (number / 1024).toFixed(1) + 'KB';\r\n    }\r\n    else if (number >= 1048576) {\r\n        return (number / 1048576).toFixed(1) + 'MB';\r\n    }\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/validators/max-size.validator.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Validator for size of file\r\n * @param {?} max Max of size of file (in bytes)\r\n * @return {?}\r\n */\r\nfunction MaxSizeValidator(max) {\r\n    return (/**\r\n     * @param {?} ctrl\r\n     * @return {?}\r\n     */\r\n    (ctrl) => {\r\n        max = Number(max);\r\n        if (isNaN(max)) {\r\n            throw 'MaxSizeValidator: max of size of file is invalid';\r\n        }\r\n        if (!ctrl.value)\r\n            return null;\r\n        /** @type {?} */\r\n        let files = ctrl.value;\r\n        if (!Array.isArray(ctrl.value)) {\r\n            files = [ctrl.value];\r\n        }\r\n        if (!files.length)\r\n            return null;\r\n        /** @type {?} */\r\n        const add = (/**\r\n         * @param {?} a\r\n         * @param {?} b\r\n         * @return {?}\r\n         */\r\n        (a, b) => a + b);\r\n        /** @type {?} */\r\n        const sumSize = files.map((/**\r\n         * @param {?} x\r\n         * @return {?}\r\n         */\r\n        x => x.size)).reduce(add);\r\n        if (sumSize > max) {\r\n            return {\r\n                maxSize: true\r\n            };\r\n        }\r\n        return null;\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/validators/accept.validator.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n *\r\n * @param {?} accept Allowable type of file\r\n * @return {?}\r\n */\r\nfunction AcceptValidator(accept) {\r\n    return (/**\r\n     * @param {?} ctrl\r\n     * @return {?}\r\n     */\r\n    (ctrl) => {\r\n        if (!accept) {\r\n            throw ('AcceptValidator: allowable type of file can not be empty');\r\n        }\r\n        if (ctrl.value == null)\r\n            return null;\r\n        if (!accept.includes(ctrl.value.type)) {\r\n            return {\r\n                accept: true\r\n            };\r\n        }\r\n        return null;\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/validators/index.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: public-api.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: angular-material-components-file-input.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { NgxMatFileInputIcon, NgxMatFileInputComponent, NgxMatFileInputModule, calculFileSize, MaxSizeValidator, AcceptValidator };\n"]}