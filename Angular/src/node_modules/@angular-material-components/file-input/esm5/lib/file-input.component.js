/**
 * @fileoverview added by tsickle
 * Generated from: lib/file-input.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Platform } from '@angular/cdk/platform';
import { ChangeDetectorRef, Component, ElementRef, forwardRef, Input, Optional, Self, ViewChild, ViewEncapsulation, Directive, ContentChild } from '@angular/core';
import { FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { ErrorStateMatcher } from '@angular/material/core';
import { MatFormFieldControl } from '@angular/material/form-field';
import { _MatInputMixinBase } from '@angular/material/input';
import { Subject } from 'rxjs';
/** @type {?} */
var nextUniqueId = 0;
var NgxMatFileInputIcon = /** @class */ (function () {
    function NgxMatFileInputIcon() {
    }
    NgxMatFileInputIcon.decorators = [
        { type: Directive, args: [{
                    selector: '[ngxMatFileInputIcon]'
                },] }
    ];
    return NgxMatFileInputIcon;
}());
export { NgxMatFileInputIcon };
var NgxMatFileInputComponent = /** @class */ (function (_super) {
    tslib_1.__extends(NgxMatFileInputComponent, _super);
    function NgxMatFileInputComponent(_elementRef, _platform, _cd, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher) {
        var _this = _super.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;
        _this._elementRef = _elementRef;
        _this._platform = _platform;
        _this._cd = _cd;
        _this.ngControl = ngControl;
        _this.color = 'primary';
        _this.fileNames = null;
        _this._uid = "ngx-mat-fileinput-" + nextUniqueId++;
        _this.stateChanges = new Subject();
        _this.focused = false;
        _this.controlType = 'ngx-mat-file-input';
        _this.autofilled = false;
        /**
         * Function when touched
         */
        _this._onTouched = (/**
         * @return {?}
         */
        function () { });
        /**
         * Function when changed
         */
        _this._onChange = (/**
         * @return {?}
         */
        function () { });
        _this._disabled = false;
        _this._multiple = false;
        _this.placeholder = 'Choose a file';
        _this.separator = ',';
        _this._required = false;
        _this._readonly = true;
        _this.id = _this.id;
        if (_this.ngControl) {
            _this.ngControl.valueAccessor = _this;
        }
        return _this;
    }
    Object.defineProperty(NgxMatFileInputComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.ngControl && this.ngControl.disabled !== null) {
                return this.ngControl.disabled;
            }
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = coerceBooleanProperty(value);
            if (this.focused) {
                this.focused = false;
                this.stateChanges.next();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxMatFileInputComponent.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () { return this._id; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._id = value || this._uid; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxMatFileInputComponent.prototype, "multiple", {
        get: /**
         * @return {?}
         */
        function () { return this._multiple; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._multiple = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxMatFileInputComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () { return this._required; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._required = coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxMatFileInputComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () { return this._value; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._value = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxMatFileInputComponent.prototype, "readonly", {
        get: /**
         * @return {?}
         */
        function () { return this._readonly; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._readonly = coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxMatFileInputComponent.prototype, "accept", {
        /**
         * Limiting accepted file types
         * Example: accept="image/png, image/jpeg" or accept=".png, .jpg, .jpeg" — Accept PNG or JPEG files.
         */
        get: /**
         * Limiting accepted file types
         * Example: accept="image/png, image/jpeg" or accept=".png, .jpg, .jpeg" — Accept PNG or JPEG files.
         * @return {?}
         */
        function () { return this._accept; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._accept = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgxMatFileInputComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.stateChanges.next();
    };
    /**
     * @return {?}
     */
    NgxMatFileInputComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.stateChanges.complete();
    };
    /**
     * @return {?}
     */
    NgxMatFileInputComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this.ngControl) {
            this.updateErrorState();
        }
    };
    // Implemented as part of ControlValueAccessor.
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} value
     * @return {?}
     */
    NgxMatFileInputComponent.prototype.writeValue = 
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._updateInputValue(value);
    };
    // Implemented as part of ControlValueAccessor.
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} fn
     * @return {?}
     */
    NgxMatFileInputComponent.prototype.registerOnChange = 
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    // Implemented as part of ControlValueAccessor.
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} fn
     * @return {?}
     */
    NgxMatFileInputComponent.prototype.registerOnTouched = 
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouched = fn;
    };
    // Implemented as part of ControlValueAccessor.
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    NgxMatFileInputComponent.prototype.setDisabledState = 
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
        this.stateChanges.next();
    };
    /** Focuses the input. */
    /**
     * Focuses the input.
     * @param {?=} options
     * @return {?}
     */
    NgxMatFileInputComponent.prototype.focus = /**
     * Focuses the input.
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        this._inputValueRef.nativeElement.focus(options);
    };
    /**
     * @param {?} isFocused
     * @return {?}
     */
    NgxMatFileInputComponent.prototype._focusChanged = /**
     * @param {?} isFocused
     * @return {?}
     */
    function (isFocused) {
        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {
            this.focused = isFocused;
            this.stateChanges.next();
        }
    };
    /** Mark the field as touched */
    /**
     * Mark the field as touched
     * @return {?}
     */
    NgxMatFileInputComponent.prototype._markAsTouched = /**
     * Mark the field as touched
     * @return {?}
     */
    function () {
        this._onTouched();
        this._cd.markForCheck();
        this.stateChanges.next();
    };
    /**
     * @protected
     * @return {?}
     */
    NgxMatFileInputComponent.prototype._isBadInput = /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var validity = ((/** @type {?} */ (this._inputValueRef.nativeElement))).validity;
        return validity && validity.badInput;
    };
    Object.defineProperty(NgxMatFileInputComponent.prototype, "empty", {
        get: /**
         * @return {?}
         */
        function () {
            return !this._inputValueRef.nativeElement.value && !this._isBadInput() &&
                !this.autofilled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxMatFileInputComponent.prototype, "shouldLabelFloat", {
        get: /**
         * @return {?}
         */
        function () {
            return this.focused || !this.empty;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} ids
     * @return {?}
     */
    NgxMatFileInputComponent.prototype.setDescribedByIds = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        this._ariaDescribedby = ids.join(' ');
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    NgxMatFileInputComponent.prototype.openFilePicker = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        this._inputFileRef.nativeElement.click();
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        this._markAsTouched();
    };
    /**
     * @param {?} filelist
     * @return {?}
     */
    NgxMatFileInputComponent.prototype.handleFiles = /**
     * @param {?} filelist
     * @return {?}
     */
    function (filelist) {
        if (filelist.length > 0) {
            /** @type {?} */
            var files = new Array();
            for (var i = 0; i < filelist.length; i++) {
                files.push(filelist.item(i));
            }
            this._updateInputValue(files);
            this._resetInputFile();
            this._onChange(this.multiple ? files : files[0]);
        }
    };
    /** Handles a click on the control's container. */
    /**
     * Handles a click on the control's container.
     * @param {?} event
     * @return {?}
     */
    NgxMatFileInputComponent.prototype.onContainerClick = /**
     * Handles a click on the control's container.
     * @param {?} event
     * @return {?}
     */
    function (event) { };
    ;
    /**
     * @private
     * @return {?}
     */
    NgxMatFileInputComponent.prototype._resetInputFile = /**
     * @private
     * @return {?}
     */
    function () {
        this._inputFileRef.nativeElement.value = "";
    };
    /**
     * @private
     * @param {?} files
     * @return {?}
     */
    NgxMatFileInputComponent.prototype._updateInputValue = /**
     * @private
     * @param {?} files
     * @return {?}
     */
    function (files) {
        /** @type {?} */
        var text = null;
        if (files) {
            if (Array.isArray(files)) {
                text = this._multiple
                    ? files.map((/**
                     * @param {?} x
                     * @return {?}
                     */
                    function (x) { return x.name; })).join(this.separator)
                    : files[0].name;
            }
            else {
                text = files.name != null ? files.name : null;
            }
        }
        this._inputValueRef.nativeElement.value = text;
    };
    NgxMatFileInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-mat-file-input',
                    template: "<input #inputValue autocomplete=\"off\" class=\"mat-input-element mat-form-field-autofill-control\" [attr.id]='id'\r\n  [attr.placeholder]='placeholder' [disabled]='disabled' [required]='required' [attr.readonly]='readonly || null'\r\n  [attr.aria-describedby]='_ariaDescribedby || null' [attr.aria-invalid]='errorState'\r\n  [attr.aria-required]='required.toString()'>\r\n<div class=\"mat-form-field-suffix\">\r\n  <button matSuffix mat-icon-button [color]=\"color\" class=\"button-browse\"  (click)=\"openFilePicker($event)\" type=\"button\"\r\n   [disabled]=\"disabled\">\r\n    <mat-icon *ngIf=\"!_customIcon\" class=\"ngx-mat-file-input--default-icon\">attach_file</mat-icon>\r\n    <ng-content select=\"[ngxMatFileInputIcon]\"></ng-content>\r\n  </button>\r\n</div>\r\n<input type=\"file\" #inputFile (change)=\"handleFiles($event.target.files)\" class=\"input-file\"\r\n  [multiple]=\"multiple\" [accept]=\"accept\">",
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        'class': 'ngx-mat-file-input'
                    },
                    providers: [
                        { provide: MatFormFieldControl, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return NgxMatFileInputComponent; })) }
                    ],
                    exportAs: 'ngx-mat-file-input',
                    styles: [".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-file-input--default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-file-input--default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-file-input--default-icon{margin:auto}.ngx-mat-file-input{display:flex;line-height:18px;height:18px;align-items:center}.ngx-mat-file-input .input-file{display:block;visibility:hidden;width:0;height:0}"]
                }] }
    ];
    /** @nocollapse */
    NgxMatFileInputComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Platform },
        { type: ChangeDetectorRef },
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
        { type: NgForm, decorators: [{ type: Optional }] },
        { type: FormGroupDirective, decorators: [{ type: Optional }] },
        { type: ErrorStateMatcher }
    ]; };
    NgxMatFileInputComponent.propDecorators = {
        _inputFileRef: [{ type: ViewChild, args: ['inputFile',] }],
        _inputValueRef: [{ type: ViewChild, args: ['inputValue',] }],
        _customIcon: [{ type: ContentChild, args: [NgxMatFileInputIcon,] }],
        color: [{ type: Input }],
        disabled: [{ type: Input }],
        id: [{ type: Input }],
        multiple: [{ type: Input }],
        placeholder: [{ type: Input }],
        separator: [{ type: Input }],
        required: [{ type: Input }],
        errorStateMatcher: [{ type: Input }],
        value: [{ type: Input }],
        readonly: [{ type: Input }],
        accept: [{ type: Input }]
    };
    return NgxMatFileInputComponent;
}(_MatInputMixinBase));
export { NgxMatFileInputComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxMatFileInputComponent.prototype._inputFileRef;
    /**
     * @type {?}
     * @private
     */
    NgxMatFileInputComponent.prototype._inputValueRef;
    /**
     * Custom icon set by the consumer.
     * @type {?}
     */
    NgxMatFileInputComponent.prototype._customIcon;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.color;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.fileNames;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._uid;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._previousNativeValue;
    /** @type {?} */
    NgxMatFileInputComponent.prototype._ariaDescribedby;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.stateChanges;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.focused;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.errorState;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.controlType;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.autofilled;
    /**
     * Function when touched
     * @type {?}
     */
    NgxMatFileInputComponent.prototype._onTouched;
    /**
     * Function when changed
     * @type {?}
     */
    NgxMatFileInputComponent.prototype._onChange;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._disabled;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._id;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._multiple;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.placeholder;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.separator;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._required;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.errorStateMatcher;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    NgxMatFileInputComponent.prototype._readonly;
    /**
     * @type {?}
     * @private
     */
    NgxMatFileInputComponent.prototype._accept;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._elementRef;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._platform;
    /**
     * @type {?}
     * @private
     */
    NgxMatFileInputComponent.prototype._cd;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.ngControl;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,