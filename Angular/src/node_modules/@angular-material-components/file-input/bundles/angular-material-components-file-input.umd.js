(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/coercion'), require('@angular/cdk/platform'), require('@angular/forms'), require('@angular/material/core'), require('rxjs'), require('@angular/common'), require('@angular/core'), require('@angular/material/button'), require('@angular/material/form-field'), require('@angular/material/icon'), require('@angular/material/input')) :
    typeof define === 'function' && define.amd ? define('@angular-material-components/file-input', ['exports', '@angular/cdk/coercion', '@angular/cdk/platform', '@angular/forms', '@angular/material/core', 'rxjs', '@angular/common', '@angular/core', '@angular/material/button', '@angular/material/form-field', '@angular/material/icon', '@angular/material/input'], factory) :
    (factory((global['angular-material-components'] = global['angular-material-components'] || {}, global['angular-material-components']['file-input'] = {}),global.ng.cdk.coercion,global.ng.cdk.platform,global.ng.forms,global.ng.material.core,global.rxjs,global.ng.common,global.ng.core,global.ng.material.button,global.ng.material['form-field'],global.ng.material.icon,global.ng.material.input));
}(this, (function (exports,coercion,platform,forms,core,rxjs,common,core$1,button,formField,icon,input) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/file-input.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var nextUniqueId = 0;
    var NgxMatFileInputIcon = /** @class */ (function () {
        function NgxMatFileInputIcon() {
        }
        NgxMatFileInputIcon.decorators = [
            { type: core$1.Directive, args: [{
                        selector: '[ngxMatFileInputIcon]'
                    },] }
        ];
        return NgxMatFileInputIcon;
    }());
    var NgxMatFileInputComponent = /** @class */ (function (_super) {
        __extends(NgxMatFileInputComponent, _super);
        function NgxMatFileInputComponent(_elementRef, _platform, _cd, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher) {
            var _this = _super.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;
            _this._elementRef = _elementRef;
            _this._platform = _platform;
            _this._cd = _cd;
            _this.ngControl = ngControl;
            _this.color = 'primary';
            _this.fileNames = null;
            _this._uid = "ngx-mat-fileinput-" + nextUniqueId++;
            _this.stateChanges = new rxjs.Subject();
            _this.focused = false;
            _this.controlType = 'ngx-mat-file-input';
            _this.autofilled = false;
            /**
             * Function when touched
             */
            _this._onTouched = ( /**
             * @return {?}
             */function () { });
            /**
             * Function when changed
             */
            _this._onChange = ( /**
             * @return {?}
             */function () { });
            _this._disabled = false;
            _this._multiple = false;
            _this.placeholder = 'Choose a file';
            _this.separator = ',';
            _this._required = false;
            _this._readonly = true;
            _this.id = _this.id;
            if (_this.ngControl) {
                _this.ngControl.valueAccessor = _this;
            }
            return _this;
        }
        Object.defineProperty(NgxMatFileInputComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */ function () {
                if (this.ngControl && this.ngControl.disabled !== null) {
                    return this.ngControl.disabled;
                }
                return this._disabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._disabled = coercion.coerceBooleanProperty(value);
                if (this.focused) {
                    this.focused = false;
                    this.stateChanges.next();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxMatFileInputComponent.prototype, "id", {
            get: /**
             * @return {?}
             */ function () { return this._id; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) { this._id = value || this._uid; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxMatFileInputComponent.prototype, "multiple", {
            get: /**
             * @return {?}
             */ function () { return this._multiple; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._multiple = coercion.coerceBooleanProperty(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxMatFileInputComponent.prototype, "required", {
            get: /**
             * @return {?}
             */ function () { return this._required; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) { this._required = coercion.coerceBooleanProperty(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxMatFileInputComponent.prototype, "value", {
            get: /**
             * @return {?}
             */ function () { return this._value; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._value = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxMatFileInputComponent.prototype, "readonly", {
            get: /**
             * @return {?}
             */ function () { return this._readonly; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) { this._readonly = coercion.coerceBooleanProperty(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxMatFileInputComponent.prototype, "accept", {
            /**
             * Limiting accepted file types
             * Example: accept="image/png, image/jpeg" or accept=".png, .jpg, .jpeg" — Accept PNG or JPEG files.
             */
            get: /**
             * Limiting accepted file types
             * Example: accept="image/png, image/jpeg" or accept=".png, .jpg, .jpeg" — Accept PNG or JPEG files.
             * @return {?}
             */ function () { return this._accept; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._accept = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.stateChanges.next();
            };
        /**
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.stateChanges.complete();
            };
        /**
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                if (this.ngControl) {
                    this.updateErrorState();
                }
            };
        // Implemented as part of ControlValueAccessor.
        // Implemented as part of ControlValueAccessor.
        /**
         * @param {?} value
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.writeValue =
            // Implemented as part of ControlValueAccessor.
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._updateInputValue(value);
            };
        // Implemented as part of ControlValueAccessor.
        // Implemented as part of ControlValueAccessor.
        /**
         * @param {?} fn
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.registerOnChange =
            // Implemented as part of ControlValueAccessor.
            /**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this._onChange = fn;
            };
        // Implemented as part of ControlValueAccessor.
        // Implemented as part of ControlValueAccessor.
        /**
         * @param {?} fn
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.registerOnTouched =
            // Implemented as part of ControlValueAccessor.
            /**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this._onTouched = fn;
            };
        // Implemented as part of ControlValueAccessor.
        // Implemented as part of ControlValueAccessor.
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.setDisabledState =
            // Implemented as part of ControlValueAccessor.
            /**
             * @param {?} isDisabled
             * @return {?}
             */
            function (isDisabled) {
                this.disabled = isDisabled;
                this.stateChanges.next();
            };
        /** Focuses the input. */
        /**
         * Focuses the input.
         * @param {?=} options
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.focus = /**
         * Focuses the input.
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                this._inputValueRef.nativeElement.focus(options);
            };
        /**
         * @param {?} isFocused
         * @return {?}
         */
        NgxMatFileInputComponent.prototype._focusChanged = /**
         * @param {?} isFocused
         * @return {?}
         */
            function (isFocused) {
                if (isFocused !== this.focused && (!this.readonly || !isFocused)) {
                    this.focused = isFocused;
                    this.stateChanges.next();
                }
            };
        /** Mark the field as touched */
        /**
         * Mark the field as touched
         * @return {?}
         */
        NgxMatFileInputComponent.prototype._markAsTouched = /**
         * Mark the field as touched
         * @return {?}
         */
            function () {
                this._onTouched();
                this._cd.markForCheck();
                this.stateChanges.next();
            };
        /**
         * @protected
         * @return {?}
         */
        NgxMatFileInputComponent.prototype._isBadInput = /**
         * @protected
         * @return {?}
         */
            function () {
                /** @type {?} */
                var validity = (( /** @type {?} */(this._inputValueRef.nativeElement))).validity;
                return validity && validity.badInput;
            };
        Object.defineProperty(NgxMatFileInputComponent.prototype, "empty", {
            get: /**
             * @return {?}
             */ function () {
                return !this._inputValueRef.nativeElement.value && !this._isBadInput() &&
                    !this.autofilled;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxMatFileInputComponent.prototype, "shouldLabelFloat", {
            get: /**
             * @return {?}
             */ function () {
                return this.focused || !this.empty;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} ids
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.setDescribedByIds = /**
         * @param {?} ids
         * @return {?}
         */
            function (ids) {
                this._ariaDescribedby = ids.join(' ');
            };
        /**
         * @param {?=} event
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.openFilePicker = /**
         * @param {?=} event
         * @return {?}
         */
            function (event) {
                this._inputFileRef.nativeElement.click();
                if (event) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                this._markAsTouched();
            };
        /**
         * @param {?} filelist
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.handleFiles = /**
         * @param {?} filelist
         * @return {?}
         */
            function (filelist) {
                if (filelist.length > 0) {
                    /** @type {?} */
                    var files = new Array();
                    for (var i = 0; i < filelist.length; i++) {
                        files.push(filelist.item(i));
                    }
                    this._updateInputValue(files);
                    this._resetInputFile();
                    this._onChange(this.multiple ? files : files[0]);
                }
            };
        /** Handles a click on the control's container. */
        /**
         * Handles a click on the control's container.
         * @param {?} event
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.onContainerClick = /**
         * Handles a click on the control's container.
         * @param {?} event
         * @return {?}
         */
            function (event) { };
        /**
         * @private
         * @return {?}
         */
        NgxMatFileInputComponent.prototype._resetInputFile = /**
         * @private
         * @return {?}
         */
            function () {
                this._inputFileRef.nativeElement.value = "";
            };
        /**
         * @private
         * @param {?} files
         * @return {?}
         */
        NgxMatFileInputComponent.prototype._updateInputValue = /**
         * @private
         * @param {?} files
         * @return {?}
         */
            function (files) {
                /** @type {?} */
                var text = null;
                if (files) {
                    if (Array.isArray(files)) {
                        text = this._multiple
                            ? files.map(( /**
                             * @param {?} x
                             * @return {?}
                             */function (x) { return x.name; })).join(this.separator)
                            : files[0].name;
                    }
                    else {
                        text = files.name != null ? files.name : null;
                    }
                }
                this._inputValueRef.nativeElement.value = text;
            };
        NgxMatFileInputComponent.decorators = [
            { type: core$1.Component, args: [{
                        selector: 'ngx-mat-file-input',
                        template: "<input #inputValue autocomplete=\"off\" class=\"mat-input-element mat-form-field-autofill-control\" [attr.id]='id'\r\n  [attr.placeholder]='placeholder' [disabled]='disabled' [required]='required' [attr.readonly]='readonly || null'\r\n  [attr.aria-describedby]='_ariaDescribedby || null' [attr.aria-invalid]='errorState'\r\n  [attr.aria-required]='required.toString()'>\r\n<div class=\"mat-form-field-suffix\">\r\n  <button matSuffix mat-icon-button [color]=\"color\" class=\"button-browse\"  (click)=\"openFilePicker($event)\" type=\"button\"\r\n   [disabled]=\"disabled\">\r\n    <mat-icon *ngIf=\"!_customIcon\" class=\"ngx-mat-file-input--default-icon\">attach_file</mat-icon>\r\n    <ng-content select=\"[ngxMatFileInputIcon]\"></ng-content>\r\n  </button>\r\n</div>\r\n<input type=\"file\" #inputFile (change)=\"handleFiles($event.target.files)\" class=\"input-file\"\r\n  [multiple]=\"multiple\" [accept]=\"accept\">",
                        encapsulation: core$1.ViewEncapsulation.None,
                        host: {
                            'class': 'ngx-mat-file-input'
                        },
                        providers: [
                            { provide: formField.MatFormFieldControl, useExisting: core$1.forwardRef(( /**
                                     * @return {?}
                                     */function () { return NgxMatFileInputComponent; })) }
                        ],
                        exportAs: 'ngx-mat-file-input',
                        styles: [".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-file-input--default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-file-input--default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-file-input--default-icon{margin:auto}.ngx-mat-file-input{display:flex;line-height:18px;height:18px;align-items:center}.ngx-mat-file-input .input-file{display:block;visibility:hidden;width:0;height:0}"]
                    }] }
        ];
        /** @nocollapse */
        NgxMatFileInputComponent.ctorParameters = function () {
            return [
                { type: core$1.ElementRef },
                { type: platform.Platform },
                { type: core$1.ChangeDetectorRef },
                { type: forms.NgControl, decorators: [{ type: core$1.Optional }, { type: core$1.Self }] },
                { type: forms.NgForm, decorators: [{ type: core$1.Optional }] },
                { type: forms.FormGroupDirective, decorators: [{ type: core$1.Optional }] },
                { type: core.ErrorStateMatcher }
            ];
        };
        NgxMatFileInputComponent.propDecorators = {
            _inputFileRef: [{ type: core$1.ViewChild, args: ['inputFile',] }],
            _inputValueRef: [{ type: core$1.ViewChild, args: ['inputValue',] }],
            _customIcon: [{ type: core$1.ContentChild, args: [NgxMatFileInputIcon,] }],
            color: [{ type: core$1.Input }],
            disabled: [{ type: core$1.Input }],
            id: [{ type: core$1.Input }],
            multiple: [{ type: core$1.Input }],
            placeholder: [{ type: core$1.Input }],
            separator: [{ type: core$1.Input }],
            required: [{ type: core$1.Input }],
            errorStateMatcher: [{ type: core$1.Input }],
            value: [{ type: core$1.Input }],
            readonly: [{ type: core$1.Input }],
            accept: [{ type: core$1.Input }]
        };
        return NgxMatFileInputComponent;
    }(input._MatInputMixinBase));

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/file-input.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxMatFileInputModule = /** @class */ (function () {
        function NgxMatFileInputModule() {
        }
        NgxMatFileInputModule.decorators = [
            { type: core$1.NgModule, args: [{
                        declarations: [
                            NgxMatFileInputComponent,
                            NgxMatFileInputIcon
                        ],
                        imports: [
                            common.CommonModule,
                            button.MatButtonModule,
                            icon.MatIconModule,
                            formField.MatFormFieldModule,
                            input.MatInputModule
                        ],
                        exports: [
                            NgxMatFileInputComponent,
                            NgxMatFileInputIcon
                        ]
                    },] }
        ];
        return NgxMatFileInputModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/file-input-helper.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} number
     * @return {?}
     */
    function calculFileSize(number) {
        if (number < 1024) {
            return number + 'bytes';
        }
        else if (number >= 1024 && number < 1048576) {
            return (number / 1024).toFixed(1) + 'KB';
        }
        else if (number >= 1048576) {
            return (number / 1048576).toFixed(1) + 'MB';
        }
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/validators/max-size.validator.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Validator for size of file
     * @param {?} max Max of size of file (in bytes)
     * @return {?}
     */
    function MaxSizeValidator(max) {
        return ( /**
         * @param {?} ctrl
         * @return {?}
         */function (ctrl) {
            max = Number(max);
            if (isNaN(max)) {
                throw 'MaxSizeValidator: max of size of file is invalid';
            }
            if (!ctrl.value)
                return null;
            /** @type {?} */
            var files = ctrl.value;
            if (!Array.isArray(ctrl.value)) {
                files = [ctrl.value];
            }
            if (!files.length)
                return null;
            /** @type {?} */
            var add = ( /**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */function (a, b) { return a + b; });
            /** @type {?} */
            var sumSize = files.map(( /**
             * @param {?} x
             * @return {?}
             */function (x) { return x.size; })).reduce(add);
            if (sumSize > max) {
                return {
                    maxSize: true
                };
            }
            return null;
        });
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/validators/accept.validator.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     *
     * @param {?} accept Allowable type of file
     * @return {?}
     */
    function AcceptValidator(accept) {
        return ( /**
         * @param {?} ctrl
         * @return {?}
         */function (ctrl) {
            if (!accept) {
                throw ('AcceptValidator: allowable type of file can not be empty');
            }
            if (ctrl.value == null)
                return null;
            if (!accept.includes(ctrl.value.type)) {
                return {
                    accept: true
                };
            }
            return null;
        });
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/validators/index.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: public-api.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: angular-material-components-file-input.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgxMatFileInputIcon = NgxMatFileInputIcon;
    exports.NgxMatFileInputComponent = NgxMatFileInputComponent;
    exports.NgxMatFileInputModule = NgxMatFileInputModule;
    exports.calculFileSize = calculFileSize;
    exports.MaxSizeValidator = MaxSizeValidator;
    exports.AcceptValidator = AcceptValidator;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=angular-material-components-file-input.umd.js.map