/**
 * @fileoverview added by tsickle
 * Generated from: lib/file-input.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Platform } from '@angular/cdk/platform';
import { ChangeDetectorRef, Component, ElementRef, forwardRef, Input, Optional, Self, ViewChild, ViewEncapsulation, Directive, ContentChild } from '@angular/core';
import { FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { ErrorStateMatcher } from '@angular/material/core';
import { MatFormFieldControl } from '@angular/material/form-field';
import { _MatInputMixinBase } from '@angular/material/input';
import { Subject } from 'rxjs';
/** @type {?} */
let nextUniqueId = 0;
export class NgxMatFileInputIcon {
}
NgxMatFileInputIcon.decorators = [
    { type: Directive, args: [{
                selector: '[ngxMatFileInputIcon]'
            },] }
];
export class NgxMatFileInputComponent extends _MatInputMixinBase {
    /**
     * @param {?} _elementRef
     * @param {?} _platform
     * @param {?} _cd
     * @param {?} ngControl
     * @param {?} _parentForm
     * @param {?} _parentFormGroup
     * @param {?} _defaultErrorStateMatcher
     */
    constructor(_elementRef, _platform, _cd, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher) {
        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);
        this._elementRef = _elementRef;
        this._platform = _platform;
        this._cd = _cd;
        this.ngControl = ngControl;
        this.color = 'primary';
        this.fileNames = null;
        this._uid = `ngx-mat-fileinput-${nextUniqueId++}`;
        this.stateChanges = new Subject();
        this.focused = false;
        this.controlType = 'ngx-mat-file-input';
        this.autofilled = false;
        /**
         * Function when touched
         */
        this._onTouched = (/**
         * @return {?}
         */
        () => { });
        /**
         * Function when changed
         */
        this._onChange = (/**
         * @return {?}
         */
        () => { });
        this._disabled = false;
        this._multiple = false;
        this.placeholder = 'Choose a file';
        this.separator = ',';
        this._required = false;
        this._readonly = true;
        this.id = this.id;
        if (this.ngControl) {
            this.ngControl.valueAccessor = this;
        }
    }
    /**
     * @return {?}
     */
    get disabled() {
        if (this.ngControl && this.ngControl.disabled !== null) {
            return this.ngControl.disabled;
        }
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        if (this.focused) {
            this.focused = false;
            this.stateChanges.next();
        }
    }
    /**
     * @return {?}
     */
    get id() { return this._id; }
    /**
     * @param {?} value
     * @return {?}
     */
    set id(value) { this._id = value || this._uid; }
    /**
     * @return {?}
     */
    get multiple() { return this._multiple; }
    /**
     * @param {?} value
     * @return {?}
     */
    set multiple(value) {
        this._multiple = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    get required() { return this._required; }
    /**
     * @param {?} value
     * @return {?}
     */
    set required(value) { this._required = coerceBooleanProperty(value); }
    /**
     * @return {?}
     */
    get value() { return this._value; }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this._value = value;
    }
    /**
     * @return {?}
     */
    get readonly() { return this._readonly; }
    /**
     * @param {?} value
     * @return {?}
     */
    set readonly(value) { this._readonly = coerceBooleanProperty(value); }
    /**
     * Limiting accepted file types
     * Example: accept="image/png, image/jpeg" or accept=".png, .jpg, .jpeg" â€” Accept PNG or JPEG files.
     * @return {?}
     */
    get accept() { return this._accept; }
    /**
     * @param {?} value
     * @return {?}
     */
    set accept(value) {
        this._accept = value;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.stateChanges.next();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.stateChanges.complete();
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this.ngControl) {
            this.updateErrorState();
        }
    }
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this._updateInputValue(value);
    }
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.stateChanges.next();
    }
    /**
     * Focuses the input.
     * @param {?=} options
     * @return {?}
     */
    focus(options) {
        this._inputValueRef.nativeElement.focus(options);
    }
    /**
     * @param {?} isFocused
     * @return {?}
     */
    _focusChanged(isFocused) {
        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {
            this.focused = isFocused;
            this.stateChanges.next();
        }
    }
    /**
     * Mark the field as touched
     * @return {?}
     */
    _markAsTouched() {
        this._onTouched();
        this._cd.markForCheck();
        this.stateChanges.next();
    }
    /**
     * @protected
     * @return {?}
     */
    _isBadInput() {
        /** @type {?} */
        let validity = ((/** @type {?} */ (this._inputValueRef.nativeElement))).validity;
        return validity && validity.badInput;
    }
    /**
     * @return {?}
     */
    get empty() {
        return !this._inputValueRef.nativeElement.value && !this._isBadInput() &&
            !this.autofilled;
    }
    /**
     * @return {?}
     */
    get shouldLabelFloat() {
        return this.focused || !this.empty;
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    setDescribedByIds(ids) {
        this._ariaDescribedby = ids.join(' ');
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    openFilePicker(event) {
        this._inputFileRef.nativeElement.click();
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        this._markAsTouched();
    }
    /**
     * @param {?} filelist
     * @return {?}
     */
    handleFiles(filelist) {
        if (filelist.length > 0) {
            /** @type {?} */
            const files = new Array();
            for (let i = 0; i < filelist.length; i++) {
                files.push(filelist.item(i));
            }
            this._updateInputValue(files);
            this._resetInputFile();
            this._onChange(this.multiple ? files : files[0]);
        }
    }
    /**
     * Handles a click on the control's container.
     * @param {?} event
     * @return {?}
     */
    onContainerClick(event) { }
    ;
    /**
     * @private
     * @return {?}
     */
    _resetInputFile() {
        this._inputFileRef.nativeElement.value = "";
    }
    /**
     * @private
     * @param {?} files
     * @return {?}
     */
    _updateInputValue(files) {
        /** @type {?} */
        let text = null;
        if (files) {
            if (Array.isArray(files)) {
                text = this._multiple
                    ? files.map((/**
                     * @param {?} x
                     * @return {?}
                     */
                    x => x.name)).join(this.separator)
                    : files[0].name;
            }
            else {
                text = files.name != null ? files.name : null;
            }
        }
        this._inputValueRef.nativeElement.value = text;
    }
}
NgxMatFileInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-mat-file-input',
                template: "<input #inputValue autocomplete=\"off\" class=\"mat-input-element mat-form-field-autofill-control\" [attr.id]='id'\r\n  [attr.placeholder]='placeholder' [disabled]='disabled' [required]='required' [attr.readonly]='readonly || null'\r\n  [attr.aria-describedby]='_ariaDescribedby || null' [attr.aria-invalid]='errorState'\r\n  [attr.aria-required]='required.toString()'>\r\n<div class=\"mat-form-field-suffix\">\r\n  <button matSuffix mat-icon-button [color]=\"color\" class=\"button-browse\"  (click)=\"openFilePicker($event)\" type=\"button\"\r\n   [disabled]=\"disabled\">\r\n    <mat-icon *ngIf=\"!_customIcon\" class=\"ngx-mat-file-input--default-icon\">attach_file</mat-icon>\r\n    <ng-content select=\"[ngxMatFileInputIcon]\"></ng-content>\r\n  </button>\r\n</div>\r\n<input type=\"file\" #inputFile (change)=\"handleFiles($event.target.files)\" class=\"input-file\"\r\n  [multiple]=\"multiple\" [accept]=\"accept\">",
                encapsulation: ViewEncapsulation.None,
                host: {
                    'class': 'ngx-mat-file-input'
                },
                providers: [
                    { provide: MatFormFieldControl, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NgxMatFileInputComponent)) }
                ],
                exportAs: 'ngx-mat-file-input',
                styles: [".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-file-input--default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-file-input--default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-file-input--default-icon{margin:auto}.ngx-mat-file-input{display:flex;line-height:18px;height:18px;align-items:center}.ngx-mat-file-input .input-file{display:block;visibility:hidden;width:0;height:0}"]
            }] }
];
/** @nocollapse */
NgxMatFileInputComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Platform },
    { type: ChangeDetectorRef },
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
    { type: NgForm, decorators: [{ type: Optional }] },
    { type: FormGroupDirective, decorators: [{ type: Optional }] },
    { type: ErrorStateMatcher }
];
NgxMatFileInputComponent.propDecorators = {
    _inputFileRef: [{ type: ViewChild, args: ['inputFile',] }],
    _inputValueRef: [{ type: ViewChild, args: ['inputValue',] }],
    _customIcon: [{ type: ContentChild, args: [NgxMatFileInputIcon,] }],
    color: [{ type: Input }],
    disabled: [{ type: Input }],
    id: [{ type: Input }],
    multiple: [{ type: Input }],
    placeholder: [{ type: Input }],
    separator: [{ type: Input }],
    required: [{ type: Input }],
    errorStateMatcher: [{ type: Input }],
    value: [{ type: Input }],
    readonly: [{ type: Input }],
    accept: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxMatFileInputComponent.prototype._inputFileRef;
    /**
     * @type {?}
     * @private
     */
    NgxMatFileInputComponent.prototype._inputValueRef;
    /**
     * Custom icon set by the consumer.
     * @type {?}
     */
    NgxMatFileInputComponent.prototype._customIcon;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.color;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.fileNames;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._uid;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._previousNativeValue;
    /** @type {?} */
    NgxMatFileInputComponent.prototype._ariaDescribedby;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.stateChanges;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.focused;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.errorState;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.controlType;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.autofilled;
    /**
     * Function when touched
     * @type {?}
     */
    NgxMatFileInputComponent.prototype._onTouched;
    /**
     * Function when changed
     * @type {?}
     */
    NgxMatFileInputComponent.prototype._onChange;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._disabled;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._id;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._multiple;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.placeholder;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.separator;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._required;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.errorStateMatcher;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    NgxMatFileInputComponent.prototype._readonly;
    /**
     * @type {?}
     * @private
     */
    NgxMatFileInputComponent.prototype._accept;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._elementRef;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._platform;
    /**
     * @type {?}
     * @private
     */
    NgxMatFileInputComponent.prototype._cd;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.ngControl;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,