{"version":3,"sources":["./src/app/pages/register/register.component.html","./src/app/pages/register/register.component.ts","./src/app/pages/register/register.module.ts"],"names":[],"mappings":"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","file":"pages-register-register-module-es2015.js","sourcesContent":["export default \"<mat-sidenav-container>\\r\\n  \\r\\n    <div fxLayout=\\\"row\\\"  fxLayoutAlign=\\\"center center\\\" class=\\\"h-100\\\">\\r\\n  \\r\\n         <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit(form.value)\\\" fxFlex=\\\"100\\\"  fxFlex.gt-sm=\\\"40\\\"  >\\r\\n  \\r\\n              <mat-card class=\\\"p-0 mat-elevation-z24 box register\\\">\\r\\n                  <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"bg-primary box-header\\\">\\r\\n                      <button mat-fab color=\\\"accent\\\" class=\\\"mat-elevation-z12\\\" (click)=\\\"onSubmit(form.value);\\\">\\r\\n                          <mat-icon>person_add</mat-icon>\\r\\n                      </button>\\r\\n                      <a mat-button routerLink=\\\"/login\\\">Already have an account? Sign in!</a>\\r\\n                      \\r\\n                  </div>\\r\\n                  <mat-card-content fxLayout=\\\"column\\\"  fxLayoutAlign=\\\"end center\\\"  class=\\\"box-content\\\">\\r\\n                      <mat-card fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"mat-elevation-z12 box-content-inner\\\">\\r\\n                          <span class=\\\"box-content-header\\\">Register Farmer</span>  \\r\\n                          <mat-form-field class=\\\"w-100\\\">\\r\\n                            <input matInput placeholder=\\\"Full Name\\\" formControlName=\\\"name\\\">\\r\\n                            <mat-error *ngIf=\\\"form.controls.name.errors?.required\\\">Full Name is required</mat-error>\\r\\n                            <mat-error *ngIf=\\\"form.controls.name.hasError('minlength')\\\">Full Name isn't long enough, minimum of 3 characters</mat-error>\\r\\n                          </mat-form-field>\\r\\n                          <mat-form-field class=\\\"w-100\\\">\\r\\n                          <input matInput placeholder=\\\"Surname\\\" formControlName=\\\"surname\\\">\\r\\n                            <mat-error *ngIf=\\\"form.controls.surname.errors?.required\\\">Surname is required</mat-error>\\r\\n                            <mat-error *ngIf=\\\"form.controls.surname.hasError('minlength')\\\">Surname isn't long enough, minimum of 3 characters</mat-error>\\r\\n                          </mat-form-field>\\r\\n                          <mat-form-field class=\\\"w-100\\\">\\r\\n                            <input matInput placeholder=\\\"ID Number\\\" formControlName=\\\"id\\\">\\r\\n                              <mat-error *ngIf=\\\"form.controls.id.errors?.required\\\">ID Number is required</mat-error>\\r\\n                              <mat-error *ngIf=\\\"form.controls.id.hasError('minlength')\\\">ID Number invalid</mat-error>\\r\\n                            </mat-form-field>\\r\\n                            <mat-form-field class=\\\"w-100\\\">\\r\\n                                <input matInput placeholder=\\\"Street Address\\\" formControlName=\\\"address\\\">\\r\\n                                  <mat-error *ngIf=\\\"form.controls.address.errors?.required\\\">Address is required</mat-error>\\r\\n                                  <mat-error *ngIf=\\\"form.controls.address.hasError('minlength')\\\">Address invalid</mat-error>\\r\\n                            </mat-form-field>\\r\\n                            <mat-form-field class=\\\"w-100\\\">\\r\\n                                <input matInput placeholder=\\\"City\\\" formControlName=\\\"city\\\">\\r\\n                                    <mat-error *ngIf=\\\"form.controls.city.errors?.required\\\">City is required</mat-error>\\r\\n                                    <mat-error *ngIf=\\\"form.controls.city.hasError('minlength')\\\">City invalid</mat-error>\\r\\n                            </mat-form-field>\\r\\n                            <mat-form-field class=\\\"w-100\\\">\\r\\n                                <input matInput placeholder=\\\"Postal Code\\\" formControlName=\\\"postalCode\\\">\\r\\n                                  <mat-error *ngIf=\\\"form.controls.postalCode.errors?.required\\\">Full Name is required</mat-error>\\r\\n                                  <mat-error *ngIf=\\\"form.controls.postalCode.hasError('minlength')\\\">Postal Code invalid, must be 4 digits</mat-error>\\r\\n                            </mat-form-field>\\r\\n                            <mat-form-field class=\\\"w-100\\\">\\r\\n                                <input matInput placeholder=\\\"Phone Number\\\" formControlName=\\\"number\\\">\\r\\n                                  <mat-error *ngIf=\\\"form.controls.number.errors?.required\\\">Phone Number is required</mat-error>\\r\\n                                  <mat-error *ngIf=\\\"form.controls.number.hasError('minlength')\\\">Phone Number invalid</mat-error>\\r\\n                                </mat-form-field>\\r\\n                          <mat-form-field class=\\\"w-100\\\">\\r\\n                              <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\">\\r\\n                              <mat-error *ngIf=\\\"form.controls.email.errors?.required\\\">Email is required</mat-error>\\r\\n                              <mat-error *ngIf=\\\"form.controls.email.hasError('invalidEmail')\\\">Invalid email address</mat-error>\\r\\n                          </mat-form-field>\\r\\n                          <mat-form-field class=\\\"w-100\\\">\\r\\n                              <input matInput placeholder=\\\"Password\\\" formControlName=\\\"password\\\" type=\\\"password\\\" minlength=\\\"6\\\">\\r\\n                              <mat-error *ngIf=\\\"form.controls.password.errors?.required\\\">Password is required</mat-error>\\r\\n                              <mat-error *ngIf=\\\"form.controls.password.hasError('minlength')\\\">Password isn't long enough, minimum of 6 characters</mat-error>\\r\\n                          </mat-form-field> \\r\\n                          <mat-form-field class=\\\"w-100\\\">\\r\\n                            <input matInput placeholder=\\\"Confirm Password\\\" formControlName=\\\"confirmPassword\\\" type=\\\"password\\\">\\r\\n                            <mat-error *ngIf=\\\"form.controls.confirmPassword.errors?.required\\\">Confirm Password is required</mat-error>\\r\\n                            <mat-error *ngIf=\\\"form.controls.confirmPassword.hasError('mismatchedPasswords')\\\">Passwords do not match</mat-error>\\r\\n                          </mat-form-field>\\r\\n                      </mat-card>\\r\\n                      <button mat-raised-button color=\\\"primary\\\" class=\\\"mat-elevation-z12 box-button\\\" type=\\\"submit\\\">SIGN UP</button>\\r\\n                  </mat-card-content>\\r\\n              </mat-card>\\r\\n              \\r\\n         </form>      \\r\\n    \\r\\n    </div>\\r\\n  \\r\\n  </mat-sidenav-container>\";","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormGroup, FormBuilder, Validators} from '@angular/forms';\r\nimport { emailValidator, matchingPasswords } from '../../theme/utils/app-validators';\r\nimport { AppSettings } from '../../app.settings';\r\nimport { Settings } from '../../app.settings.model';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html'\r\n})\r\nexport class RegisterComponent {\r\n  public form:FormGroup;\r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings, public fb: FormBuilder, public router:Router){\r\n    this.settings = this.appSettings.settings; \r\n    this.form = this.fb.group({\r\n      'name': [null, Validators.compose([Validators.required, Validators.minLength(3)])],\r\n      'surname': [null, Validators.compose([Validators.required, Validators.minLength(3)])],\r\n      'id': [null, Validators.compose([Validators.required, Validators.minLength(13)])],\r\n      'number': [null, Validators.compose([Validators.required, Validators.minLength(10)])],\r\n      'city': [null, Validators.compose([Validators.required, Validators.minLength(3)])],\r\n      'address': [null, Validators.compose([Validators.required, Validators.minLength(3)])],\r\n      'postalCode': [null, Validators.compose([Validators.required, Validators.minLength(3)])],\r\n      'email': [null, Validators.compose([Validators.required, emailValidator])],\r\n      'password': ['', Validators.required],\r\n      'confirmPassword': ['', Validators.required]\r\n    },{validator: matchingPasswords('password', 'confirmPassword')});\r\n  }\r\n\r\n  public onSubmit(values:Object):void {\r\n    if (this.form.valid) {\r\n      this.router.navigate(['/login']);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(){\r\n    this.settings.loadingSpinner = false; \r\n  }\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { RegisterComponent } from './register.component';\r\nimport {ScrollingModule} from '@angular/cdk/scrolling';\r\n\r\n\r\nexport const routes = [\r\n  { path: '', component: RegisterComponent, pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    FormsModule, \r\n    ReactiveFormsModule,\r\n    SharedModule,\r\n    ScrollingModule\r\n  ],\r\n  declarations: [\r\n    RegisterComponent\r\n  ]\r\n})\r\nexport class RegisterModule { }"],"sourceRoot":"webpack:///"}