{"version":3,"sources":["./src/app/pages/login/login.component.html","./src/app/pages/login/login.component.ts","./src/app/pages/login/login.module.ts"],"names":[],"mappings":"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","file":"pages-login-login-module-es2015.js","sourcesContent":["export default \"<mat-sidenav-container>\\r\\n\\r\\n  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"h-100\\\">\\r\\n\\r\\n       <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"Login()\\\" fxFlex=\\\"80\\\" fxFlex.gt-sm=\\\"30\\\" fxFlex.sm=\\\"60\\\">\\r\\n\\r\\n            <mat-card class=\\\"p-0 mat-elevation-z24 box\\\">\\r\\n                <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"bg-primary box-header\\\">\\r\\n                    <button mat-fab color=\\\"accent\\\" class=\\\"mat-elevation-z12\\\" (click)=\\\"onSubmit(form.value);\\\">\\r\\n                        <mat-icon>exit_to_app</mat-icon>\\r\\n                    </button>\\r\\n                    <a mat-button routerLink=\\\"/register\\\">Don't have an account? Sign up now!</a>\\r\\n                </div>\\r\\n                <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"end center\\\" class=\\\"box-content\\\">\\r\\n                    <mat-card fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"mat-elevation-z12 box-content-inner\\\">\\r\\n                        <span class=\\\"box-content-header\\\">member login</span>  \\r\\n                        <mat-form-field class=\\\"w-100\\\">\\r\\n                            <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\" [(ngModel)] = \\\"username\\\">\\r\\n                            <mat-error *ngIf=\\\"form.controls.email.errors?.required\\\">Email is required</mat-error>\\r\\n                            <mat-error *ngIf=\\\"form.controls.email.hasError('invalidEmail')\\\">Invalid email address</mat-error>\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"w-100\\\">\\r\\n                            <input matInput placeholder=\\\"Password\\\" formControlName=\\\"password\\\" [(ngModel)] = \\\"password\\\">\\r\\n                            <mat-error *ngIf=\\\"form.controls.password.errors?.required\\\">Password is required</mat-error>\\r\\n                            <mat-error *ngIf=\\\"form.controls.password.hasError('minlength')\\\">Password isn't long enough, minimum of 6 characters</mat-error>\\r\\n                        </mat-form-field> \\r\\n                    </mat-card>\\r\\n                    <button mat-raised-button color=\\\"primary\\\" class=\\\"mat-elevation-z12 box-button\\\" type=\\\"submit\\\">SIGN IN</button>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n            \\r\\n        </form>    \\r\\n  \\r\\n  </div>\\r\\n\\r\\n</mat-sidenav-container>\";","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormGroup, FormBuilder, Validators} from '@angular/forms';\r\nimport { emailValidator } from '../../theme/utils/app-validators';\r\nimport { AppSettings } from '../../app.settings';\r\nimport { Settings } from '../../app.settings.model';\r\nimport * as CryptoJS from 'crypto-js';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { stringToKeyValue } from '@angular/flex-layout/extended/typings/style/style-transforms';\r\nexport class User{\r\n  User_Email: string;\r\n  User_Password: string;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html'\r\n})\r\n\r\n\r\n\r\nexport class LoginComponent {\r\n  public form:FormGroup;\r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings, public fb: FormBuilder, public router:Router, private httpserv: HttpClient){\r\n    this.settings = this.appSettings.settings; \r\n    this.form = this.fb.group({\r\n      'email': [null, Validators.compose([Validators.required, emailValidator])],\r\n      'password': [null, Validators.compose([Validators.required, Validators.minLength(6)])] \r\n    });\r\n  }\r\n\r\n  username: string = \"\";\r\n  password: string = \"\"; \r\n  newPass: string;\r\n  UserSubmit =  new User;\r\n\r\n  public onSubmit(values:Object):void {\r\n    if (this.form.valid) {\r\n      this.router.navigate(['/']);\r\n    }\r\n  }\r\n\r\n  public Login():void {\r\n   this.newPass = this.password;\r\n   this.UserSubmit.User_Email = this.username;\r\n   this.UserSubmit.User_Password = this.newPass;\r\n    this.httpserv.post(\"https://localhost:44382/api/User/Login\",this.UserSubmit).subscribe(\r\n      (data:any) => {\r\n        localStorage.setItem(\"jwtToken\", data.Token);\r\n        alert(data.Token);\r\n        alert(\"Login succesfull!\")\r\n      },\r\n      error =>{\r\n        alert(\"Login failed\");\r\n      }\r\n      \r\n\r\n    );\r\n      \r\n  }\r\n\r\n  ngAfterViewInit(){\r\n    this.settings.loadingSpinner = false; \r\n  }\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { LoginComponent } from './login.component';\r\n\r\nexport const routes = [\r\n  { path: '', component: LoginComponent, pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    FormsModule, \r\n    ReactiveFormsModule,\r\n    SharedModule\r\n  ],\r\n  declarations: [\r\n    LoginComponent\r\n  ]\r\n})\r\nexport class LoginModule { }"],"sourceRoot":"webpack:///"}