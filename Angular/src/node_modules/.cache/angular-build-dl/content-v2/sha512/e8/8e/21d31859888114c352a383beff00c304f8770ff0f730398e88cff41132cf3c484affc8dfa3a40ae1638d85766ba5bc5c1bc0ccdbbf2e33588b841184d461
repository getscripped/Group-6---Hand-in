{"version":3,"sources":["webpack:///src/app/pages/schedule/schedule-dialog/schedule-dialog.component.html","webpack:///src/app/pages/schedule/schedule.component.html","webpack:///src/app/pages/schedule/schedule-dialog/schedule-dialog.component.ts","webpack:///src/app/pages/schedule/schedule.component.ts","webpack:///src/app/pages/schedule/schedule.module.ts"],"names":["ScheduleDialogComponent","dialogRef","data","formBuilder","form","group","required","patchValue","title","start","end","close","selector","template","colors","red","primary","secondary","blue","yellow","ScheduleComponent","appSettings","dialog","snackBar","view","viewDate","Date","activeDayIsOpen","actions","label","onClick","event","openScheduleDialog","events","filter","iEvent","open","duration","color","resizable","beforeStart","afterEnd","draggable","refresh","settings","date","length","afterClosed","subscribe","result","isEdit","push","next","animations","host","routes","path","component","pathMatch","ScheduleModule","imports","forChild","declarations","entryComponents"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQf,QAAaA,uBAAuB;AAAA;AAAA;AAElC,uCAAmBC,SAAnB,EAC4CC,IAD5C,EAEmBC,WAFnB,EAE6C;AAAA;;AAF1B,aAAAF,SAAA,GAAAA,SAAA;AACyB,aAAAC,IAAA,GAAAA,IAAA;AACzB,aAAAC,WAAA,GAAAA,WAAA;AACjB,aAAKC,IAAL,GAAY,KAAKD,WAAL,CAAiBE,KAAjB,CAAuB;AACjC,mBAAS,CAAC,EAAD,EAAK,0DAAWC,QAAhB,CADwB;AAEjC,mBAAS,CAAC,EAAD,EAAK,0DAAWA,QAAhB,CAFwB;AAGjC,iBAAO,EAH0B;AAIjC,oBAAW;AAJsB,SAAvB,CAAZ;AAMD;;AAXiC;AAAA;AAAA,mCAavB;AACT,cAAI,KAAKJ,IAAT,EAAc;AACZ,iBAAKE,IAAL,CAAUG,UAAV,CAAqB;AACnB,uBAAS,KAAKL,IAAL,CAAUM,KADA;AAEnB,uBAAS,KAAKN,IAAL,CAAUO,KAFA;AAGnB,qBAAO,KAAKP,IAAL,CAAUQ,GAHE;AAInB,wBAAW;AAJQ,aAArB;AAMD;AACF;AAtBiC;AAAA;AAAA,gCAwB7B;AACH,eAAKT,SAAL,CAAeU,KAAf;AACD;AA1BiC;;AAAA;AAAA,OAApC;;;;cAEgC;;;;gBACjB,oD;AAAM,iBAAC,wEAAD;;;cACa;;;;AAJrBX,2BAAuB,eAJnC,gEAAU;AACTY,cAAQ,EAAE,qBADD;AAETC,cAAQ,EAAR;AAAA;AAAA;AAFS,KAAV,CAImC,EAGrB,wEAAO,wEAAP,EAHqB,E,iCAEJ,qE,EAAY,M,EAEV,0D,EAJE,GAAvBb,uBAAuB,CAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGb,QAAMc,MAAM,GAAQ;AAClBC,SAAG,EAAE;AACHC,eAAO,EAAE,SADN;AAEHC,iBAAS,EAAE;AAFR,OADa;AAKlBC,UAAI,EAAE;AACJF,eAAO,EAAE,SADL;AAEJC,iBAAS,EAAE;AAFP,OALY;AASlBE,YAAM,EAAE;AACNH,eAAO,EAAE,SADH;AAENC,iBAAS,EAAE;AAFL;AATU,KAApB;;AAuBA,QAAaG,iBAAiB;AAAA;AAAA;AAkD5B,iCAAmBC,WAAnB,EACmBC,MADnB,EAEmBC,QAFnB,EAEwC;AAAA;;AAAA;;AAFrB,aAAAF,WAAA,GAAAA,WAAA;AACA,aAAAC,MAAA,GAAAA,MAAA;AACA,aAAAC,QAAA,GAAAA,QAAA;AAnDnB,aAAAC,IAAA,GAAe,OAAf;AACA,aAAAC,QAAA,GAAiB,IAAIC,IAAJ,EAAjB;AACA,aAAAC,eAAA,GAA2B,IAA3B;AACA,aAAAC,OAAA,GAAiC,CAAC;AAC9BC,eAAK,EAAE,kDADuB;AAE9BC,iBAAO,EAAE,uBAA2C;AAAA,gBAAzCC,KAAyC,QAAzCA,KAAyC;;AAChD,iBAAI,CAACC,kBAAL,CAAwBD,KAAxB;AACH;AAJ6B,SAAD,EAK9B;AACCF,eAAK,EAAE,mDADR;AAECC,iBAAO,EAAE,wBAA2C;AAAA,gBAAzCC,KAAyC,SAAzCA,KAAyC;AAChD,iBAAI,CAACE,MAAL,GAAc,KAAI,CAACA,MAAL,CAAYC,MAAZ,CAAmB,UAAAC,MAAM;AAAA,qBAAIA,MAAM,KAAKJ,KAAf;AAAA,aAAzB,CAAd;;AACA,iBAAI,CAACR,QAAL,CAAca,IAAd,CAAmB,6BAAnB,EAAkD,IAAlD,EAAwD;AACpDC,sBAAQ,EAAE;AAD0C,aAAxD;AAGH;AAPF,SAL8B,CAAjC;AAcA,aAAAJ,MAAA,GAA0B,CAAC;AACzBxB,eAAK,EAAE,yDAAQ,4DAAW,IAAIiB,IAAJ,EAAX,CAAR,EAAgC,CAAhC,CADkB;AAEzBhB,aAAG,EAAE,yDAAQ,IAAIgB,IAAJ,EAAR,EAAoB,CAApB,CAFoB;AAGzBlB,eAAK,EAAE,eAHkB;AAIzB8B,eAAK,EAAExB,MAAM,CAACC,GAJW;AAKzBa,iBAAO,EAAE,KAAKA;AALW,SAAD,EAMvB;AACDnB,eAAK,EAAE,4DAAW,IAAIiB,IAAJ,EAAX,CADN;AAEDlB,eAAK,EAAE,2BAFN;AAGD8B,eAAK,EAAExB,MAAM,CAACK,MAHb;AAIDS,iBAAO,EAAE,KAAKA;AAJb,SANuB,EAWvB;AACDnB,eAAK,EAAE,yDAAQ,4DAAW,IAAIiB,IAAJ,EAAX,CAAR,EAAgC,CAAhC,CADN;AAEDhB,aAAG,EAAE,yDAAQ,4DAAW,IAAIgB,IAAJ,EAAX,CAAR,EAAgC,CAAhC,CAFJ;AAGDlB,eAAK,EAAE,kCAHN;AAID8B,eAAK,EAAExB,MAAM,CAACI;AAJb,SAXuB,EAgBvB;AACDT,eAAK,EAAE,0DAAS,4DAAW,IAAIiB,IAAJ,EAAX,CAAT,EAAiC,CAAjC,CADN;AAEDhB,aAAG,EAAE,IAAIgB,IAAJ,EAFJ;AAGDlB,eAAK,EAAE,iCAHN;AAID8B,eAAK,EAAExB,MAAM,CAACK,MAJb;AAKDS,iBAAO,EAAE,KAAKA,OALb;AAMDW,mBAAS,EAAE;AACTC,uBAAW,EAAE,IADJ;AAETC,oBAAQ,EAAE;AAFD,WANV;AAUDC,mBAAS,EAAE;AAVV,SAhBuB,CAA1B;AA4BA,aAAAC,OAAA,GAAwB,IAAI,4CAAJ,EAAxB;AAOI,aAAKC,QAAL,GAAgB,KAAKvB,WAAL,CAAiBuB,QAAjC;AACH;;AAtD2B;AAAA;AAAA,mCAwDjB,CACV;AAzD2B;AAAA;AAAA,0CA2DoC;AAAA,cAApDC,IAAoD,SAApDA,IAAoD;AAAA,cAA9CZ,MAA8C,SAA9CA,MAA8C;;AAC9D,cAAI,6DAAYY,IAAZ,EAAkB,KAAKpB,QAAvB,CAAJ,EAAsC;AACpC,gBAAK,2DAAU,KAAKA,QAAf,EAAyBoB,IAAzB,KAAkC,KAAKlB,eAAL,KAAyB,IAA5D,IAAqEM,MAAM,CAACa,MAAP,KAAkB,CAA3F,EAA8F;AAC5F,mBAAKnB,eAAL,GAAuB,KAAvB;AACD,aAFD,MAEO;AACL,mBAAKA,eAAL,GAAuB,IAAvB;AACA,mBAAKF,QAAL,GAAgBoB,IAAhB;AACD;AACF;AACF;AApE2B;AAAA;AAAA,2CAsETd,KAtES,EAsEJ;AAAA;;AACtB,cAAI9B,SAAS,GAAG,KAAKqB,MAAL,CAAYc,IAAZ,CAAiB,kGAAjB,EAA0C;AACxDlC,gBAAI,EAAE6B;AADkD,WAA1C,CAAhB;AAIA9B,mBAAS,CAAC8C,WAAV,GAAwBC,SAAxB,CAAkC,UAAAC,MAAM,EAAI;AAC1C,gBAAGA,MAAH,EAAU;AACR,kBAAG,CAACA,MAAM,CAACC,MAAX,EAAkB;AAChBD,sBAAM,CAACX,KAAP,GAAexB,MAAM,CAACI,IAAtB;AACA+B,sBAAM,CAACrB,OAAP,GAAiB,MAAI,CAACA,OAAtB;;AACA,sBAAI,CAACK,MAAL,CAAYkB,IAAZ,CAAiBF,MAAjB;;AACA,sBAAI,CAACN,OAAL,CAAaS,IAAb;AACD,eALD,MAKK,CACH;AACD;AACF;AACF,WAXD;AAYD;AAvF2B;;AAAA;AAAA,OAA9B;;;;cAkDiC;;cACJ;;cACE;;;;AApDlBhC,qBAAiB,eAR7B,gEAAU;AACTR,cAAQ,EAAE,cADD;AAETC,cAAQ,EAAR;AAAA;AAAA,wGAFS;AAGTwC,gBAAU,EAAE,CAAE,0EAAF,CAHH;AAITC,UAAI,EAAE;AACJ,8BAAsB;AADlB;AAJG,KAAV,CAQ6B,E,iCAkDG,yD,EACJ,kE,EACE,uE,EApDD,GAAjBlC,iBAAiB,CAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBN,QAAMmC,MAAM,GAAG,CACpB;AAAEC,UAAI,EAAE,EAAR;AAAYC,eAAS,EAAE,qEAAvB;AAA0CC,eAAS,EAAE;AAArD,KADoB,CAAf;;AAqBP,QAAaC,cAAc;AAAA;AAAA,KAA3B;;AAAaA,kBAAc,eAjB1B,+DAAS;AACRC,aAAO,EAAE,CACP,4DADO,EAEP,6DAAaC,QAAb,CAAsBN,MAAtB,CAFO,EAGP,0DAHO,EAIP,kEAJO,EAKP,+DALO,EAMP,kEANO,CADD;AASRO,kBAAY,EAAE,CACZ,qEADY,EAEZ,kGAFY,CATN;AAaRC,qBAAe,EAAE,CACf,kGADe;AAbT,KAAT,CAiB0B,GAAdJ,cAAc,CAAd","file":"pages-schedule-schedule-module-es5.js","sourcesContent":["export default \"<h1 mat-dialog-title><span *ngIf=\\\"!form.controls.isEdit.value\\\">Add</span><span *ngIf=\\\"form.controls.isEdit.value\\\">Edit</span> event</h1>\\r\\n<div mat-dialog-content>\\r\\n    <form [formGroup]=\\\"form\\\">\\r\\n        <mat-form-field class=\\\"w-100\\\">\\r\\n          <input matInput placeholder=\\\"Title\\\" formControlName=\\\"title\\\">\\r\\n        </mat-form-field>\\r\\n\\r\\n        <mat-form-field class=\\\"w-100\\\">\\r\\n          <input matInput [matDatepicker]=\\\"start\\\" placeholder=\\\"Start Date\\\" formControlName=\\\"start\\\">\\r\\n          <mat-datepicker-toggle matSuffix [for]=\\\"start\\\"></mat-datepicker-toggle>\\r\\n          <mat-datepicker #start></mat-datepicker>\\r\\n        </mat-form-field>\\r\\n\\r\\n        <mat-form-field class=\\\"w-100\\\">\\r\\n          <input matInput [matDatepicker]=\\\"end\\\" placeholder=\\\"End Date\\\" formControlName=\\\"end\\\">\\r\\n          <mat-datepicker-toggle matSuffix [for]=\\\"end\\\"></mat-datepicker-toggle>\\r\\n          <mat-datepicker #end></mat-datepicker>\\r\\n        </mat-form-field>\\r\\n    </form>\\r\\n</div>\\r\\n<div mat-dialog-actions fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <button mat-raised-button color=\\\"primary\\\" [mat-dialog-close]=\\\"form.value\\\" [disabled]=\\\"!form.valid\\\"><span *ngIf=\\\"!form.controls.isEdit.value\\\">Save</span><span *ngIf=\\\"form.controls.isEdit.value\\\">Update</span></button>\\r\\n    <button mat-raised-button color=\\\"warn\\\" (click)=\\\"close()\\\">Cancel</button>\\r\\n</div>\"","export default \"<div fxLayout=\\\"row wrap\\\">\\r\\n    <div fxFlex=\\\"100\\\" class=\\\"flex-p\\\"> \\r\\n        <mat-card class=\\\"block p-0\\\">\\r\\n            \\r\\n            <div class=\\\"bg-primary\\\">\\r\\n                <div fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutAlign=\\\"space-between center\\\"  class=\\\"w-100\\\">            \\r\\n                    <div class=\\\"\\\">                \\r\\n                        <button mat-icon-button mwlCalendarPreviousView [view]=\\\"view\\\" [(viewDate)]=\\\"viewDate\\\">\\r\\n                            <mat-icon *ngIf=\\\"!settings.rtl\\\">chevron_left</mat-icon>\\r\\n                            <mat-icon *ngIf=\\\"settings.rtl\\\">chevron_right</mat-icon>\\r\\n                        </button>\\r\\n                        <button mat-icon-button mwlCalendarToday [(viewDate)]=\\\"viewDate\\\">\\r\\n                            <mat-icon>today</mat-icon>\\r\\n                        </button>\\r\\n                        <button mat-icon-button mwlCalendarNextView [view]=\\\"view\\\" [(viewDate)]=\\\"viewDate\\\">\\r\\n                            <mat-icon *ngIf=\\\"settings.rtl\\\">chevron_left</mat-icon>\\r\\n                            <mat-icon *ngIf=\\\"!settings.rtl\\\">chevron_right</mat-icon>\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <h2>{{ viewDate | calendarDate:(view + 'ViewTitle'):'en' }}</h2>\\r\\n                    <div class=\\\"\\\">\\r\\n                        <button mat-icon-button (click)=\\\"view = 'month'\\\">\\r\\n                            <mat-icon>view_comfy</mat-icon>\\r\\n                        </button>\\r\\n                        <button mat-icon-button (click)=\\\"view = 'week'\\\">\\r\\n                            <mat-icon>view_week</mat-icon>\\r\\n                        </button>\\r\\n                        <button mat-icon-button (click)=\\\"view = 'day'\\\">\\r\\n                            <mat-icon>view_day</mat-icon>\\r\\n                        </button>\\r\\n                        <button mat-icon-button (click)=\\\"openScheduleDialog(null)\\\">\\r\\n                            <mat-icon>add</mat-icon>\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>            \\r\\n            </div>\\r\\n\\r\\n            <div [ngSwitch]=\\\"view\\\">\\r\\n                <mwl-calendar-month-view\\r\\n                    *ngSwitchCase=\\\"'month'\\\"\\r\\n                    [viewDate]=\\\"viewDate\\\"\\r\\n                    [events]=\\\"events\\\"\\r\\n                    [refresh]=\\\"refresh\\\"\\r\\n                    [activeDayIsOpen]=\\\"activeDayIsOpen\\\"\\r\\n                    (dayClicked)=\\\"dayClicked($event.day)\\\">\\r\\n                </mwl-calendar-month-view>\\r\\n                <mwl-calendar-week-view\\r\\n                    *ngSwitchCase=\\\"'week'\\\"\\r\\n                    [viewDate]=\\\"viewDate\\\"\\r\\n                    [events]=\\\"events\\\"\\r\\n                    [refresh]=\\\"refresh\\\">\\r\\n                </mwl-calendar-week-view>\\r\\n                <mwl-calendar-day-view\\r\\n                    *ngSwitchCase=\\\"'day'\\\"\\r\\n                    [viewDate]=\\\"viewDate\\\"\\r\\n                    [events]=\\\"events\\\"\\r\\n                    [refresh]=\\\"refresh\\\">\\r\\n                </mwl-calendar-day-view>\\r\\n            </div>\\r\\n\\r\\n       </mat-card>\\r\\n    </div>\\r\\n</div>\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { FormGroup, FormBuilder, Validators} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-schedule-dialog',\r\n  templateUrl: './schedule-dialog.component.html'\r\n})\r\nexport class ScheduleDialogComponent implements OnInit {\r\n  public form:FormGroup;\r\n  constructor(public dialogRef: MatDialogRef<ScheduleDialogComponent>,\r\n              @Inject(MAT_DIALOG_DATA) public data: any,\r\n              public formBuilder: FormBuilder) {\r\n    this.form = this.formBuilder.group({ \r\n      'title': ['', Validators.required],            \r\n      'start': ['', Validators.required], \r\n      'end': '',\r\n      'isEdit' : false\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.data){\r\n      this.form.patchValue({\r\n        'title': this.data.title,\r\n        'start': this.data.start,\r\n        'end': this.data.end,\r\n        'isEdit' : true\r\n      })\r\n    }\r\n  }\r\n\r\n  close(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { CalendarEvent, CalendarEventAction, CalendarEventTimesChangedEvent } from 'angular-calendar';\r\nimport { startOfDay, endOfDay, subDays, addDays, endOfMonth, isSameDay, isSameMonth, addHours } from 'date-fns';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ScheduleDialogComponent } from './schedule-dialog/schedule-dialog.component';\r\nimport { AppSettings } from '../../app.settings';\r\nimport { Settings } from '../../app.settings.model';\r\nimport { Subject } from 'rxjs';\r\nimport { blockTransition } from '../../theme/utils/app-animation';\r\n\r\nconst colors: any = {\r\n  red: {\r\n    primary: '#ad2121',\r\n    secondary: '#FAE3E3'\r\n  },\r\n  blue: {\r\n    primary: '#1e90ff',\r\n    secondary: '#D1E8FF'\r\n  },\r\n  yellow: {\r\n    primary: '#e3bc08',\r\n    secondary: '#FDF1BA'\r\n  }\r\n};\r\n\r\n@Component({\r\n  selector: 'app-schedule',\r\n  templateUrl: './schedule.component.html',\r\n  animations: [ blockTransition ],\r\n  host: {\r\n    '[@blockTransition]': ''\r\n  }\r\n})\r\nexport class ScheduleComponent implements OnInit {\r\n  view: string = 'month';\r\n  viewDate: Date = new Date();\r\n  activeDayIsOpen: boolean = true;\r\n  actions: CalendarEventAction[] = [{\r\n      label: '<i class=\"material-icons icon-sm white\">edit</i>',\r\n      onClick: ({event}: {event: CalendarEvent}): void => {\r\n          this.openScheduleDialog(event);\r\n      }\r\n  }, {\r\n      label: '<i class=\"material-icons icon-sm white\">close</i>',\r\n      onClick: ({event}: {event: CalendarEvent}): void => {\r\n          this.events = this.events.filter(iEvent => iEvent !== event);\r\n          this.snackBar.open('Event deleted successfully!', null, {\r\n              duration: 1500\r\n          });\r\n      }\r\n  }];\r\n  events: CalendarEvent[] = [{\r\n    start: subDays(startOfDay(new Date()), 1),\r\n    end: addDays(new Date(), 1),\r\n    title: 'A 3 day event',\r\n    color: colors.red,\r\n    actions: this.actions\r\n  }, {\r\n    start: startOfDay(new Date()),\r\n    title: 'An event with no end date',\r\n    color: colors.yellow,\r\n    actions: this.actions\r\n  }, {\r\n    start: subDays(endOfMonth(new Date()), 3),\r\n    end: addDays(endOfMonth(new Date()), 3),\r\n    title: 'A long event that spans 2 months',\r\n    color: colors.blue\r\n  }, {\r\n    start: addHours(startOfDay(new Date()), 2),\r\n    end: new Date(),\r\n    title: 'A draggable and resizable event',\r\n    color: colors.yellow,\r\n    actions: this.actions,\r\n    resizable: {\r\n      beforeStart: true,\r\n      afterEnd: true\r\n    },\r\n    draggable: true\r\n  }];\r\n  refresh: Subject<any> = new Subject();\r\n\r\n\r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings, \r\n              public dialog: MatDialog, \r\n              public snackBar: MatSnackBar){\r\n      this.settings = this.appSettings.settings; \r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  dayClicked({date, events}: {date: Date, events: CalendarEvent[]}): void {    \r\n    if (isSameMonth(date, this.viewDate)) {\r\n      if ((isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) || events.length === 0) {\r\n        this.activeDayIsOpen = false;\r\n      } else {\r\n        this.activeDayIsOpen = true;\r\n        this.viewDate = date;\r\n      }\r\n    }\r\n  }\r\n\r\n  openScheduleDialog(event){\r\n    let dialogRef = this.dialog.open(ScheduleDialogComponent, {\r\n      data: event\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if(result){\r\n        if(!result.isEdit){\r\n          result.color = colors.blue;\r\n          result.actions = this.actions;\r\n          this.events.push(result);\r\n          this.refresh.next();\r\n        }else{\r\n          //implement edit here\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CalendarModule } from 'angular-calendar';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { ScheduleComponent } from './schedule.component';\r\nimport { ScheduleDialogComponent } from './schedule-dialog/schedule-dialog.component';\r\n\r\nexport const routes = [\r\n  { path: '', component: ScheduleComponent, pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    CalendarModule,\r\n    SharedModule\r\n  ],\r\n  declarations: [\r\n    ScheduleComponent, \r\n    ScheduleDialogComponent\r\n  ],\r\n  entryComponents: [\r\n    ScheduleDialogComponent\r\n  ]\r\n})\r\nexport class ScheduleModule { }"]}