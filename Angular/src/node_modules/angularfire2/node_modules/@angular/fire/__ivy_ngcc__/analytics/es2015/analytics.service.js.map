{"version":3,"sources":["D:/370/FinalFrontend/node_modules/angularfire2/node_modules/@angular/fire/analytics/es2015/analytics.service.js"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+HAqHE;oCACkC,AAEjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;yHA0BD;kCACgC,AAE/B;;;;;;;;;;;;;;;;;;;;;;;;;kCAIqB","file":"analytics.service.js","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Injectable, Optional, NgZone, ComponentFactoryResolver, Inject, PLATFORM_ID, Injector, NgModuleFactory } from '@angular/core';\nimport { from, Observable, of } from 'rxjs';\nimport { filter, withLatestFrom, switchMap, map, tap, pairwise, startWith, groupBy, mergeMap, observeOn } from 'rxjs/operators';\nimport { Router, NavigationEnd, ActivationEnd, ROUTES } from '@angular/router';\nimport { ɵAngularFireSchedulers } from '@angular/fire';\nimport { AngularFireAnalytics, DEBUG_MODE } from './analytics';\nimport { Title } from '@angular/platform-browser';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nconst FIREBASE_EVENT_ORIGIN_KEY = 'firebase_event_origin';\nconst FIREBASE_PREVIOUS_SCREEN_CLASS_KEY = 'firebase_previous_class';\nconst FIREBASE_PREVIOUS_SCREEN_INSTANCE_ID_KEY = 'firebase_previous_id';\nconst FIREBASE_PREVIOUS_SCREEN_NAME_KEY = 'firebase_previous_screen';\nconst FIREBASE_SCREEN_CLASS_KEY = 'firebase_screen_class';\nconst FIREBASE_SCREEN_INSTANCE_ID_KEY = 'firebase_screen_id';\nconst FIREBASE_SCREEN_NAME_KEY = 'firebase_screen';\nconst OUTLET_KEY = 'outlet';\nconst PAGE_PATH_KEY = 'page_path';\nconst PAGE_TITLE_KEY = 'page_title';\nconst SCREEN_CLASS_KEY = 'screen_class';\nconst SCREEN_NAME_KEY = 'screen_name';\nconst SCREEN_VIEW_EVENT = 'screen_view';\nconst EVENT_ORIGIN_AUTO = 'auto';\nconst DEFAULT_SCREEN_CLASS = '???';\nconst NG_PRIMARY_OUTLET = 'primary';\nconst SCREEN_INSTANCE_DELIMITER = '#';\nconst ANNOTATIONS = '__annotations__';\nlet ScreenTrackingService = class ScreenTrackingService {\n    constructor(analytics, router, title, componentFactoryResolver, platformId, debugModeEnabled, zone, injector) {\n        if (!router || !isPlatformBrowser(platformId)) {\n            return this;\n        }\n        zone.runOutsideAngular(() => {\n            const activationEndEvents = router.events.pipe(filter(e => e instanceof ActivationEnd));\n            const navigationEndEvents = router.events.pipe(filter(e => e instanceof NavigationEnd));\n            this.disposable = navigationEndEvents.pipe(withLatestFrom(activationEndEvents), switchMap(([navigationEnd, activationEnd]) => {\n                const page_path = navigationEnd.url;\n                const screen_name = activationEnd.snapshot.routeConfig && activationEnd.snapshot.routeConfig.path || page_path;\n                const params = {\n                    [SCREEN_NAME_KEY]: screen_name,\n                    [PAGE_PATH_KEY]: page_path,\n                    [FIREBASE_EVENT_ORIGIN_KEY]: EVENT_ORIGIN_AUTO,\n                    [FIREBASE_SCREEN_NAME_KEY]: screen_name,\n                    [OUTLET_KEY]: activationEnd.snapshot.outlet\n                };\n                if (title) {\n                    params[PAGE_TITLE_KEY] = title.getTitle();\n                }\n                const component = activationEnd.snapshot.component;\n                const routeConfig = activationEnd.snapshot.routeConfig;\n                const loadChildren = routeConfig && routeConfig.loadChildren;\n                if (typeof loadChildren === \"string\") {\n                    return of(Object.assign({}, params, { [SCREEN_CLASS_KEY]: loadChildren.split('#')[1] }));\n                }\n                else if (typeof component === 'string') {\n                    return of(Object.assign({}, params, { [SCREEN_CLASS_KEY]: component }));\n                }\n                else if (component) {\n                    const componentFactory = componentFactoryResolver.resolveComponentFactory(component);\n                    return of(Object.assign({}, params, { [SCREEN_CLASS_KEY]: componentFactory.selector }));\n                }\n                else if (loadChildren) {\n                    const loadedChildren = loadChildren();\n                    var loadedChildren$ = (loadedChildren instanceof Observable) ? loadedChildren : from(Promise.resolve(loadedChildren));\n                    return loadedChildren$.pipe(map(lazyModule => {\n                        if (lazyModule instanceof NgModuleFactory) {\n                            const moduleRef = lazyModule.create(injector);\n                            const routes = moduleRef.injector.get(ROUTES);\n                            const component = routes[0][0].component;\n                            try {\n                                const componentFactory = moduleRef.componentFactoryResolver.resolveComponentFactory(component);\n                                return Object.assign({}, params, { [SCREEN_CLASS_KEY]: componentFactory.selector });\n                            }\n                            catch (_) {\n                                return Object.assign({}, params, { [SCREEN_CLASS_KEY]: DEFAULT_SCREEN_CLASS });\n                            }\n                        }\n                        else {\n                            const declarations = [].concat.apply([], (lazyModule[ANNOTATIONS] || []).map((f) => f.declarations));\n                            const selectors = [].concat.apply([], declarations.map((c) => (c[ANNOTATIONS] || []).map((f) => f.selector)));\n                            return Object.assign({}, params, { [SCREEN_CLASS_KEY]: selectors[0] || DEFAULT_SCREEN_CLASS });\n                        }\n                    }));\n                }\n                else {\n                    return of(Object.assign({}, params, { [SCREEN_CLASS_KEY]: DEFAULT_SCREEN_CLASS }));\n                }\n            }), map(params => (Object.assign({ [FIREBASE_SCREEN_CLASS_KEY]: params[SCREEN_CLASS_KEY], [FIREBASE_SCREEN_INSTANCE_ID_KEY]: getScreenInstanceID(params) }, params))), tap(params => {\n                if (params[OUTLET_KEY] == NG_PRIMARY_OUTLET) {\n                    analytics.setCurrentScreen(params[SCREEN_NAME_KEY]);\n                    analytics.updateConfig({\n                        [PAGE_PATH_KEY]: params[PAGE_PATH_KEY],\n                        [SCREEN_CLASS_KEY]: params[SCREEN_CLASS_KEY]\n                    });\n                    if (title) {\n                        analytics.updateConfig({ [PAGE_TITLE_KEY]: params[PAGE_TITLE_KEY] });\n                    }\n                }\n            }), groupBy(params => params[OUTLET_KEY]), mergeMap(group => group.pipe(startWith(undefined), pairwise())), map(([prior, current]) => prior ? Object.assign({ [FIREBASE_PREVIOUS_SCREEN_CLASS_KEY]: prior[SCREEN_CLASS_KEY], [FIREBASE_PREVIOUS_SCREEN_NAME_KEY]: prior[SCREEN_NAME_KEY], [FIREBASE_PREVIOUS_SCREEN_INSTANCE_ID_KEY]: prior[FIREBASE_SCREEN_INSTANCE_ID_KEY] }, current) : current), tap(params => debugModeEnabled && console.info(SCREEN_VIEW_EVENT, params)), tap(params => zone.runOutsideAngular(() => analytics.logEvent(SCREEN_VIEW_EVENT, params)))).subscribe();\n        });\n    }\n    ngOnDestroy() {\n        if (this.disposable) {\n            this.disposable.unsubscribe();\n        }\n    }\n};\nScreenTrackingService = __decorate([\n    Injectable(),\n    __param(1, Optional()),\n    __param(2, Optional()),\n    __param(4, Inject(PLATFORM_ID)),\n    __param(5, Optional()), __param(5, Inject(DEBUG_MODE)),\n    __metadata(\"design:paramtypes\", [AngularFireAnalytics,\n        Router,\n        Title,\n        ComponentFactoryResolver,\n        Object, Object, NgZone,\n        Injector])\n], ScreenTrackingService);\nexport { ScreenTrackingService };\nlet UserTrackingService = class UserTrackingService {\n    constructor(analytics, zone, platformId) {\n        const schedulers = new ɵAngularFireSchedulers(zone);\n        if (!isPlatformServer(platformId)) {\n            zone.runOutsideAngular(() => {\n                this.disposable = from(import('firebase/auth')).pipe(observeOn(schedulers.outsideAngular), switchMap(() => analytics.app), map(app => app.auth()), switchMap(auth => new Observable(auth.onAuthStateChanged.bind(auth))), switchMap(user => analytics.setUserId(user ? user.uid : null))).subscribe();\n            });\n        }\n    }\n    ngOnDestroy() {\n        if (this.disposable) {\n            this.disposable.unsubscribe();\n        }\n    }\n};\nUserTrackingService = __decorate([\n    Injectable(),\n    __param(2, Inject(PLATFORM_ID)),\n    __metadata(\"design:paramtypes\", [AngularFireAnalytics,\n        NgZone,\n        Object])\n], UserTrackingService);\nexport { UserTrackingService };\nlet nextScreenInstanceID = Math.floor(Math.random() * (Math.pow(2, 32) - 1)) - Math.pow(2, 31);\nconst knownScreenInstanceIDs = {};\nconst getScreenInstanceID = (params) => {\n    const screenInstanceKey = [\n        params[SCREEN_CLASS_KEY],\n        params[OUTLET_KEY]\n    ].join(SCREEN_INSTANCE_DELIMITER);\n    if (knownScreenInstanceIDs.hasOwnProperty(screenInstanceKey)) {\n        return knownScreenInstanceIDs[screenInstanceKey];\n    }\n    else {\n        const ret = nextScreenInstanceID++;\n        knownScreenInstanceIDs[screenInstanceKey] = ret;\n        return ret;\n    }\n};\nconst ɵ0 = getScreenInstanceID;\nexport { ɵ0 };\n"]}