{"version":3,"sources":["D:/370/FinalFrontend/node_modules/@angular/material/fesm2015/tree.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;CAkBC,2OAcC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASA;;;;;;;;;;;;;;;;;;;;;;;;CAsBD,wUASC;;;;;;;;;;;;;;;;;oBAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8DD,iDAgBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2CD,+WAMC;;;;;;;;;;;;;;;;;;oBAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgCD,mBASC;;;;;;;;;;;;;;;;;;;;kCAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkBD,4PAiBC;;;;;;;;;;;;;;;;;;;;;;;;;oBAGA;;;;;;;;;;;;;;;;;;;;;;CAoBD,0UAMC;;;;;;;;;;;;;;oBAGA;;;;;;;;;;;;;;;;;;;;;;;;CAsBD;;;;;;;;;;;;;;;;;;;;;0BAOC","file":"tree.js","sourcesContent":["import { CdkTreeNode, CdkTree, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\r\nimport { Directive, ElementRef, Attribute, Input, IterableDiffers, ViewContainerRef, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\r\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DataSource } from '@angular/cdk/collections';\r\nimport { BehaviorSubject, merge } from 'rxjs';\r\nimport { take, map } from 'rxjs/operators';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/material/tree/node.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\r\n/**\r\n * Wrapper for the CdkTree node with Material design styles.\r\n * @template T\r\n */\r\nclass MatTreeNode extends _MatTreeNodeMixinBase {\r\n    /**\r\n     * @param {?} _elementRef\r\n     * @param {?} _tree\r\n     * @param {?} tabIndex\r\n     */\r\n    constructor(_elementRef, _tree, tabIndex) {\r\n        super(_elementRef, _tree);\r\n        this._elementRef = _elementRef;\r\n        this._tree = _tree;\r\n        this.role = 'treeitem';\r\n        this.tabIndex = Number(tabIndex) || 0;\r\n    }\r\n}\r\nMatTreeNode.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'mat-tree-node',\r\n                exportAs: 'matTreeNode',\r\n                inputs: ['disabled', 'tabIndex'],\r\n                host: {\r\n                    '[attr.aria-expanded]': 'isExpanded',\r\n                    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\r\n                    '[attr.role]': 'role',\r\n                    'class': 'mat-tree-node'\r\n                },\r\n                providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }]\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nMatTreeNode.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: CdkTree },\r\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\r\n];\r\nMatTreeNode.propDecorators = {\r\n    role: [{ type: Input }]\r\n};\r\nif (false) {\r\n    /** @type {?} */\r\n    MatTreeNode.ngAcceptInputType_disabled;\r\n    /** @type {?} */\r\n    MatTreeNode.prototype.role;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    MatTreeNode.prototype._elementRef;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    MatTreeNode.prototype._tree;\r\n}\r\n/**\r\n * Wrapper for the CdkTree node definition with Material design styles.\r\n * @template T\r\n */\r\nclass MatTreeNodeDef extends CdkTreeNodeDef {\r\n}\r\nMatTreeNodeDef.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[matTreeNodeDef]',\r\n                inputs: [\r\n                    'when: matTreeNodeDefWhen'\r\n                ],\r\n                providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]\r\n            },] }\r\n];\r\nMatTreeNodeDef.propDecorators = {\r\n    data: [{ type: Input, args: ['matTreeNode',] }]\r\n};\r\nif (false) {\r\n    /** @type {?} */\r\n    MatTreeNodeDef.prototype.data;\r\n}\r\n/**\r\n * Wrapper for the CdkTree nested node with Material design styles.\r\n * @template T\r\n */\r\nclass MatNestedTreeNode extends CdkNestedTreeNode {\r\n    /**\r\n     * @param {?} _elementRef\r\n     * @param {?} _tree\r\n     * @param {?} _differs\r\n     * @param {?} tabIndex\r\n     */\r\n    constructor(_elementRef, _tree, _differs, tabIndex) {\r\n        super(_elementRef, _tree, _differs);\r\n        this._elementRef = _elementRef;\r\n        this._tree = _tree;\r\n        this._differs = _differs;\r\n        this._disabled = false;\r\n        this.tabIndex = Number(tabIndex) || 0;\r\n    }\r\n    /**\r\n     * Whether the node is disabled.\r\n     * @return {?}\r\n     */\r\n    get disabled() { return this._disabled; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\r\n    /**\r\n     * Tabindex for the node.\r\n     * @return {?}\r\n     */\r\n    get tabIndex() { return this.disabled ? -1 : this._tabIndex; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set tabIndex(value) {\r\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\r\n        this._tabIndex = value != null ? value : 0;\r\n    }\r\n    // This is a workaround for https://github.com/angular/angular/issues/23091\r\n    // In aot mode, the lifecycle hooks from parent class are not called.\r\n    // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentInit() {\r\n        super.ngAfterContentInit();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        super.ngOnDestroy();\r\n    }\r\n}\r\nMatNestedTreeNode.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'mat-nested-tree-node',\r\n                exportAs: 'matNestedTreeNode',\r\n                host: {\r\n                    '[attr.aria-expanded]': 'isExpanded',\r\n                    '[attr.role]': 'role',\r\n                    'class': 'mat-nested-tree-node',\r\n                },\r\n                providers: [\r\n                    { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\r\n                    { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\r\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\r\n                ]\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nMatNestedTreeNode.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: CdkTree },\r\n    { type: IterableDiffers },\r\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\r\n];\r\nMatNestedTreeNode.propDecorators = {\r\n    node: [{ type: Input, args: ['matNestedTreeNode',] }],\r\n    disabled: [{ type: Input }],\r\n    tabIndex: [{ type: Input }]\r\n};\r\nif (false) {\r\n    /** @type {?} */\r\n    MatNestedTreeNode.ngAcceptInputType_disabled;\r\n    /** @type {?} */\r\n    MatNestedTreeNode.prototype.node;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    MatNestedTreeNode.prototype._disabled;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    MatNestedTreeNode.prototype._tabIndex;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    MatNestedTreeNode.prototype._elementRef;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    MatNestedTreeNode.prototype._tree;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    MatNestedTreeNode.prototype._differs;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/material/tree/padding.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Wrapper for the CdkTree padding with Material design styles.\r\n * @template T\r\n */\r\nclass MatTreeNodePadding extends CdkTreeNodePadding {\r\n}\r\nMatTreeNodePadding.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[matTreeNodePadding]',\r\n                providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]\r\n            },] }\r\n];\r\nMatTreeNodePadding.propDecorators = {\r\n    level: [{ type: Input, args: ['matTreeNodePadding',] }],\r\n    indent: [{ type: Input, args: ['matTreeNodePaddingIndent',] }]\r\n};\r\nif (false) {\r\n    /**\r\n     * The level of depth of the tree node. The padding will be `level * indent` pixels.\r\n     * @type {?}\r\n     */\r\n    MatTreeNodePadding.prototype.level;\r\n    /**\r\n     * The indent for each level. Default number 40px from material design menu sub-menu spec.\r\n     * @type {?}\r\n     */\r\n    MatTreeNodePadding.prototype.indent;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/material/tree/outlet.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\r\n * inside the outlet.\r\n */\r\nclass MatTreeNodeOutlet {\r\n    /**\r\n     * @param {?} viewContainer\r\n     * @param {?=} _node\r\n     */\r\n    constructor(viewContainer, _node) {\r\n        this.viewContainer = viewContainer;\r\n        this._node = _node;\r\n    }\r\n}\r\nMatTreeNodeOutlet.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[matTreeNodeOutlet]',\r\n                providers: [{\r\n                        provide: CdkTreeNodeOutlet,\r\n                        useExisting: MatTreeNodeOutlet\r\n                    }]\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nMatTreeNodeOutlet.ctorParameters = () => [\r\n    { type: ViewContainerRef },\r\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\r\n];\r\nif (false) {\r\n    /** @type {?} */\r\n    MatTreeNodeOutlet.prototype.viewContainer;\r\n    /** @type {?} */\r\n    MatTreeNodeOutlet.prototype._node;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/material/tree/tree.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Wrapper for the CdkTable with Material design styles.\r\n * @template T\r\n */\r\nclass MatTree extends CdkTree {\r\n}\r\nMatTree.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'mat-tree',\r\n                exportAs: 'matTree',\r\n                template: `<ng-container matTreeNodeOutlet></ng-container>`,\r\n                host: {\r\n                    'class': 'mat-tree',\r\n                    'role': 'tree',\r\n                },\r\n                encapsulation: ViewEncapsulation.None,\r\n                // See note on CdkTree for explanation on why this uses the default change detection strategy.\r\n                // tslint:disable-next-line:validate-decorators\r\n                changeDetection: ChangeDetectionStrategy.Default,\r\n                providers: [{ provide: CdkTree, useExisting: MatTree }],\r\n                styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"]\r\n            }] }\r\n];\r\nMatTree.propDecorators = {\r\n    _nodeOutlet: [{ type: ViewChild, args: [MatTreeNodeOutlet, { static: true },] }]\r\n};\r\nif (false) {\r\n    /** @type {?} */\r\n    MatTree.prototype._nodeOutlet;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/material/tree/toggle.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Wrapper for the CdkTree's toggle with Material design styles.\r\n * @template T\r\n */\r\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.recursive = false;\r\n    }\r\n}\r\nMatTreeNodeToggle.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[matTreeNodeToggle]',\r\n                providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]\r\n            },] }\r\n];\r\nMatTreeNodeToggle.propDecorators = {\r\n    recursive: [{ type: Input, args: ['matTreeNodeToggleRecursive',] }]\r\n};\r\nif (false) {\r\n    /** @type {?} */\r\n    MatTreeNodeToggle.prototype.recursive;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/material/tree/tree-module.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst MAT_TREE_DIRECTIVES = [\r\n    MatNestedTreeNode,\r\n    MatTreeNodeDef,\r\n    MatTreeNodePadding,\r\n    MatTreeNodeToggle,\r\n    MatTree,\r\n    MatTreeNode,\r\n    MatTreeNodeOutlet\r\n];\r\nclass MatTreeModule {\r\n}\r\nMatTreeModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [CdkTreeModule, CommonModule, MatCommonModule],\r\n                exports: MAT_TREE_DIRECTIVES,\r\n                declarations: MAT_TREE_DIRECTIVES,\r\n            },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/material/tree/data-source/flat-data-source.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Tree flattener to convert a normal type of node to node with children & level information.\r\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\r\n *\r\n * For example, the input data of type `T` is nested, and contains its children data:\r\n *   SomeNode: {\r\n *     key: 'Fruits',\r\n *     children: [\r\n *       NodeOne: {\r\n *         key: 'Apple',\r\n *       },\r\n *       NodeTwo: {\r\n *        key: 'Pear',\r\n *      }\r\n *    ]\r\n *  }\r\n *  After flattener flatten the tree, the structure will become\r\n *  SomeNode: {\r\n *    key: 'Fruits',\r\n *    expandable: true,\r\n *    level: 1\r\n *  },\r\n *  NodeOne: {\r\n *    key: 'Apple',\r\n *    expandable: false,\r\n *    level: 2\r\n *  },\r\n *  NodeTwo: {\r\n *   key: 'Pear',\r\n *   expandable: false,\r\n *   level: 2\r\n * }\r\n * and the output flattened type is `F` with additional information.\r\n * @template T, F\r\n */\r\nclass MatTreeFlattener {\r\n    /**\r\n     * @param {?} transformFunction\r\n     * @param {?} getLevel\r\n     * @param {?} isExpandable\r\n     * @param {?} getChildren\r\n     */\r\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\r\n        this.transformFunction = transformFunction;\r\n        this.getLevel = getLevel;\r\n        this.isExpandable = isExpandable;\r\n        this.getChildren = getChildren;\r\n    }\r\n    /**\r\n     * @param {?} node\r\n     * @param {?} level\r\n     * @param {?} resultNodes\r\n     * @param {?} parentMap\r\n     * @return {?}\r\n     */\r\n    _flattenNode(node, level, resultNodes, parentMap) {\r\n        /** @type {?} */\r\n        const flatNode = this.transformFunction(node, level);\r\n        resultNodes.push(flatNode);\r\n        if (this.isExpandable(flatNode)) {\r\n            /** @type {?} */\r\n            const childrenNodes = this.getChildren(node);\r\n            if (childrenNodes) {\r\n                if (Array.isArray(childrenNodes)) {\r\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\r\n                }\r\n                else {\r\n                    childrenNodes.pipe(take(1)).subscribe((/**\r\n                     * @param {?} children\r\n                     * @return {?}\r\n                     */\r\n                    children => {\r\n                        this._flattenChildren(children, level, resultNodes, parentMap);\r\n                    }));\r\n                }\r\n            }\r\n        }\r\n        return resultNodes;\r\n    }\r\n    /**\r\n     * @param {?} children\r\n     * @param {?} level\r\n     * @param {?} resultNodes\r\n     * @param {?} parentMap\r\n     * @return {?}\r\n     */\r\n    _flattenChildren(children, level, resultNodes, parentMap) {\r\n        children.forEach((/**\r\n         * @param {?} child\r\n         * @param {?} index\r\n         * @return {?}\r\n         */\r\n        (child, index) => {\r\n            /** @type {?} */\r\n            let childParentMap = parentMap.slice();\r\n            childParentMap.push(index != children.length - 1);\r\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\r\n        }));\r\n    }\r\n    /**\r\n     * Flatten a list of node type T to flattened version of node F.\r\n     * Please note that type T may be nested, and the length of `structuredData` may be different\r\n     * from that of returned list `F[]`.\r\n     * @param {?} structuredData\r\n     * @return {?}\r\n     */\r\n    flattenNodes(structuredData) {\r\n        /** @type {?} */\r\n        let resultNodes = [];\r\n        structuredData.forEach((/**\r\n         * @param {?} node\r\n         * @return {?}\r\n         */\r\n        node => this._flattenNode(node, 0, resultNodes, [])));\r\n        return resultNodes;\r\n    }\r\n    /**\r\n     * Expand flattened node with current expansion status.\r\n     * The returned list may have different length.\r\n     * @param {?} nodes\r\n     * @param {?} treeControl\r\n     * @return {?}\r\n     */\r\n    expandFlattenedNodes(nodes, treeControl) {\r\n        /** @type {?} */\r\n        let results = [];\r\n        /** @type {?} */\r\n        let currentExpand = [];\r\n        currentExpand[0] = true;\r\n        nodes.forEach((/**\r\n         * @param {?} node\r\n         * @return {?}\r\n         */\r\n        node => {\r\n            /** @type {?} */\r\n            let expand = true;\r\n            for (let i = 0; i <= this.getLevel(node); i++) {\r\n                expand = expand && currentExpand[i];\r\n            }\r\n            if (expand) {\r\n                results.push(node);\r\n            }\r\n            if (this.isExpandable(node)) {\r\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\r\n            }\r\n        }));\r\n        return results;\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    MatTreeFlattener.prototype.transformFunction;\r\n    /** @type {?} */\r\n    MatTreeFlattener.prototype.getLevel;\r\n    /** @type {?} */\r\n    MatTreeFlattener.prototype.isExpandable;\r\n    /** @type {?} */\r\n    MatTreeFlattener.prototype.getChildren;\r\n}\r\n/**\r\n * Data source for flat tree.\r\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\r\n * to `MatTree`.\r\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\r\n * to type `F` for `MatTree` to consume.\r\n * @template T, F\r\n */\r\nclass MatTreeFlatDataSource extends DataSource {\r\n    /**\r\n     * @param {?} _treeControl\r\n     * @param {?} _treeFlattener\r\n     * @param {?=} initialData\r\n     */\r\n    constructor(_treeControl, _treeFlattener, initialData = []) {\r\n        super();\r\n        this._treeControl = _treeControl;\r\n        this._treeFlattener = _treeFlattener;\r\n        this._flattenedData = new BehaviorSubject([]);\r\n        this._expandedData = new BehaviorSubject([]);\r\n        this._data = new BehaviorSubject(initialData);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get data() { return this._data.value; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set data(value) {\r\n        this._data.next(value);\r\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\r\n        this._treeControl.dataNodes = this._flattenedData.value;\r\n    }\r\n    /**\r\n     * @param {?} collectionViewer\r\n     * @return {?}\r\n     */\r\n    connect(collectionViewer) {\r\n        /** @type {?} */\r\n        const changes = [\r\n            collectionViewer.viewChange,\r\n            this._treeControl.expansionModel.changed,\r\n            this._flattenedData\r\n        ];\r\n        return merge(...changes).pipe(map((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\r\n            return this._expandedData.value;\r\n        })));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    disconnect() {\r\n        // no op\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    MatTreeFlatDataSource.prototype._flattenedData;\r\n    /** @type {?} */\r\n    MatTreeFlatDataSource.prototype._expandedData;\r\n    /** @type {?} */\r\n    MatTreeFlatDataSource.prototype._data;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    MatTreeFlatDataSource.prototype._treeControl;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    MatTreeFlatDataSource.prototype._treeFlattener;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/material/tree/data-source/nested-data-source.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Data source for nested tree.\r\n *\r\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\r\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\r\n * @template T\r\n */\r\nclass MatTreeNestedDataSource extends DataSource {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._data = new BehaviorSubject([]);\r\n    }\r\n    /**\r\n     * Data for the nested tree\r\n     * @return {?}\r\n     */\r\n    get data() { return this._data.value; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set data(value) { this._data.next(value); }\r\n    /**\r\n     * @param {?} collectionViewer\r\n     * @return {?}\r\n     */\r\n    connect(collectionViewer) {\r\n        return merge(...[collectionViewer.viewChange, this._data])\r\n            .pipe(map((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            return this.data;\r\n        })));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    disconnect() {\r\n        // no op\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    MatTreeNestedDataSource.prototype._data;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/material/tree/public-api.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };\r\n\r\n"]}