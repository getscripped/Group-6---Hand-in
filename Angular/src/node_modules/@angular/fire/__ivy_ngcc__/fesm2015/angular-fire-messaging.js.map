{"version":3,"sources":["C:/Users/Celin/370finaal/gradus/node_modules/@angular/fire/fesm2015/angular-fire-messaging.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiFC,wPAKC;;;;;;;;;;;;;;;;;;;;;;;;;2DAQiT;;;;;;;;;;;;;;;;;;;;;;;CAqBlT;;;;;;0BAKC","file":"angular-fire-messaging.js","sourcesContent":["import { Injectable, Inject, Optional, PLATFORM_ID, NgZone, ɵɵdefineInjectable, ɵɵinject, NgModule } from '@angular/core';\nimport { of, EMPTY, throwError, Observable, concat } from 'rxjs';\nimport { observeOn, switchMap, map, defaultIfEmpty, catchError, mergeMap } from 'rxjs/operators';\nimport { ɵAngularFireSchedulers, ɵfirebaseAppFactory, ɵlazySDKProxy, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// WARNING: interface has both a type and a value, skipping emit\nclass AngularFireMessaging {\n    /**\n     * @param {?} options\n     * @param {?} nameOrConfig\n     * @param {?} platformId\n     * @param {?} zone\n     */\n    constructor(options, nameOrConfig, \n    // tslint:disable-next-line:ban-types\n    platformId, zone) {\n        /** @type {?} */\n        const schedulers = new ɵAngularFireSchedulers(zone);\n        /** @type {?} */\n        const messaging = of(undefined).pipe(observeOn(schedulers.outsideAngular), switchMap((/**\n         * @return {?}\n         */\n        () => isPlatformServer(platformId) ? EMPTY : import('firebase/messaging'))), map((/**\n         * @return {?}\n         */\n        () => ɵfirebaseAppFactory(options, zone, nameOrConfig))), map((/**\n         * @param {?} app\n         * @return {?}\n         */\n        app => app.messaging())));\n        if (!isPlatformServer(platformId)) {\n            this.requestPermission = messaging.pipe(observeOn(schedulers.outsideAngular), \n            // tslint:disable-next-line\n            switchMap((/**\n             * @param {?} messaging\n             * @return {?}\n             */\n            messaging => messaging.requestPermission())));\n        }\n        else {\n            this.requestPermission = throwError('Not available on server platform.');\n        }\n        this.getToken = messaging.pipe(observeOn(schedulers.outsideAngular), switchMap((/**\n         * @param {?} messaging\n         * @return {?}\n         */\n        messaging => messaging.getToken())), defaultIfEmpty(null));\n        /** @type {?} */\n        const tokenChanges = messaging.pipe(observeOn(schedulers.outsideAngular), switchMap((/**\n         * @param {?} messaging\n         * @return {?}\n         */\n        messaging => new Observable(messaging.onTokenRefresh.bind(messaging)).pipe(switchMap((/**\n         * @return {?}\n         */\n        () => messaging.getToken()))))));\n        this.tokenChanges = concat(messaging.pipe(observeOn(schedulers.outsideAngular), switchMap((/**\n         * @param {?} messaging\n         * @return {?}\n         */\n        messaging => messaging.getToken()))), tokenChanges);\n        this.messages = messaging.pipe(observeOn(schedulers.outsideAngular), switchMap((/**\n         * @param {?} messaging\n         * @return {?}\n         */\n        messaging => new Observable(messaging.onMessage.bind(messaging)))));\n        this.requestToken = of(undefined).pipe(switchMap((/**\n         * @return {?}\n         */\n        () => this.requestPermission)), catchError((/**\n         * @return {?}\n         */\n        () => of(null))), mergeMap((/**\n         * @return {?}\n         */\n        () => this.tokenChanges)));\n        this.deleteToken = (/**\n         * @param {?} token\n         * @return {?}\n         */\n        (token) => messaging.pipe(observeOn(schedulers.outsideAngular), switchMap((/**\n         * @param {?} messaging\n         * @return {?}\n         */\n        messaging => messaging.deleteToken(token))), defaultIfEmpty(false)));\n        return ɵlazySDKProxy(this, messaging, zone);\n    }\n}\nAngularFireMessaging.decorators = [\n    { type: Injectable, args: [{\n                providedIn: 'any'\n            },] }\n];\n/** @nocollapse */\nAngularFireMessaging.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [FIREBASE_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FIREBASE_APP_NAME,] }] },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: NgZone }\n];\n/** @nocollapse */ AngularFireMessaging.ɵprov = ɵɵdefineInjectable({ factory: function AngularFireMessaging_Factory() { return new AngularFireMessaging(ɵɵinject(FIREBASE_OPTIONS), ɵɵinject(FIREBASE_APP_NAME, 8), ɵɵinject(PLATFORM_ID), ɵɵinject(NgZone)); }, token: AngularFireMessaging, providedIn: \"any\" });\nif (false) {\n    /** @type {?} */\n    AngularFireMessaging.prototype.requestPermission;\n    /** @type {?} */\n    AngularFireMessaging.prototype.getToken;\n    /** @type {?} */\n    AngularFireMessaging.prototype.tokenChanges;\n    /** @type {?} */\n    AngularFireMessaging.prototype.messages;\n    /** @type {?} */\n    AngularFireMessaging.prototype.requestToken;\n    /** @type {?} */\n    AngularFireMessaging.prototype.deleteToken;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass AngularFireMessagingModule {\n}\nAngularFireMessagingModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [AngularFireMessaging]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { AngularFireMessaging, AngularFireMessagingModule };\n"]}