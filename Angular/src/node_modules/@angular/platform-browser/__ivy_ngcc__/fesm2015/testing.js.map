{"version":3,"sources":["D:/370/FinalFrontend/node_modules/@angular/platform-browser/fesm2015/testing.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkYC;;;;;;;;;;;;0BAUC","file":"testing.js","sourcesContent":["/**\r\n * @license Angular v9.0.0\r\n * (c) 2010-2020 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { ɵglobal, NgZone, PLATFORM_INITIALIZER, createPlatformFactory, platformCore, NgModule, APP_ID } from '@angular/core';\r\nimport { ɵBrowserDomAdapter, BrowserModule, ɵELEMENT_PROBE_PROVIDERS } from '@angular/platform-browser';\r\nimport { ɵgetDOM } from '@angular/common';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: packages/platform-browser/testing/src/browser_util.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass BrowserDetection {\r\n    /**\r\n     * @param {?} ua\r\n     */\r\n    constructor(ua) { this._overrideUa = ua; }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    get _ua() {\r\n        if (typeof this._overrideUa === 'string') {\r\n            return this._overrideUa;\r\n        }\r\n        return ɵgetDOM() ? ɵgetDOM().getUserAgent() : '';\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static setup() { return new BrowserDetection(null); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get isFirefox() { return this._ua.indexOf('Firefox') > -1; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get isAndroid() {\r\n        return this._ua.indexOf('Mozilla/5.0') > -1 && this._ua.indexOf('Android') > -1 &&\r\n            this._ua.indexOf('AppleWebKit') > -1 && this._ua.indexOf('Chrome') == -1 &&\r\n            this._ua.indexOf('IEMobile') == -1;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get isEdge() { return this._ua.indexOf('Edge') > -1; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get isIE() { return this._ua.indexOf('Trident') > -1; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get isWebkit() {\r\n        return this._ua.indexOf('AppleWebKit') > -1 && this._ua.indexOf('Edge') == -1 &&\r\n            this._ua.indexOf('IEMobile') == -1;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get isIOS7() {\r\n        return (this._ua.indexOf('iPhone OS 7') > -1 || this._ua.indexOf('iPad OS 7') > -1) &&\r\n            this._ua.indexOf('IEMobile') == -1;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get isSlow() { return this.isAndroid || this.isIE || this.isIOS7; }\r\n    // The Intl API is only natively supported in Chrome, Firefox, IE11 and Edge.\r\n    // This detector is needed in tests to make the difference between:\r\n    // 1) IE11/Edge: they have a native Intl API, but with some discrepancies\r\n    // 2) IE9/IE10: they use the polyfill, and so no discrepancies\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get supportsNativeIntlApi() {\r\n        return !!((/** @type {?} */ (ɵglobal))).Intl && ((/** @type {?} */ (ɵglobal))).Intl !== ((/** @type {?} */ (ɵglobal))).IntlPolyfill;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get isChromeDesktop() {\r\n        return this._ua.indexOf('Chrome') > -1 && this._ua.indexOf('Mobile Safari') == -1 &&\r\n            this._ua.indexOf('Edge') == -1;\r\n    }\r\n    // \"Old Chrome\" means Chrome 3X, where there are some discrepancies in the Intl API.\r\n    // Android 4.4 and 5.X have such browsers by default (respectively 30 and 39).\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get isOldChrome() {\r\n        return this._ua.indexOf('Chrome') > -1 && this._ua.indexOf('Chrome/3') > -1 &&\r\n            this._ua.indexOf('Edge') == -1;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get supportsCustomElements() { return (typeof ((/** @type {?} */ (ɵglobal))).customElements !== 'undefined'); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get supportsDeprecatedCustomCustomElementsV0() {\r\n        return (typeof ((/** @type {?} */ (document))).registerElement !== 'undefined');\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get supportsRegExUnicodeFlag() { return RegExp.prototype.hasOwnProperty('unicode'); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get supportsShadowDom() {\r\n        /** @type {?} */\r\n        const testEl = document.createElement('div');\r\n        return (typeof testEl.attachShadow !== 'undefined');\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get supportsDeprecatedShadowDomV0() {\r\n        /** @type {?} */\r\n        const testEl = (/** @type {?} */ (document.createElement('div')));\r\n        return (typeof testEl.createShadowRoot !== 'undefined');\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    BrowserDetection.prototype._overrideUa;\r\n}\r\n/** @type {?} */\r\nconst browserDetection = BrowserDetection.setup();\r\n/**\r\n * @param {?} element\r\n * @param {?} eventType\r\n * @return {?}\r\n */\r\nfunction dispatchEvent(element, eventType) {\r\n    /** @type {?} */\r\n    const evt = ɵgetDOM().getDefaultDocument().createEvent('Event');\r\n    evt.initEvent(eventType, true, true);\r\n    ɵgetDOM().dispatchEvent(element, evt);\r\n}\r\n/**\r\n * @param {?} eventType\r\n * @return {?}\r\n */\r\nfunction createMouseEvent(eventType) {\r\n    /** @type {?} */\r\n    const evt = ɵgetDOM().getDefaultDocument().createEvent('MouseEvent');\r\n    evt.initEvent(eventType, true, true);\r\n    return evt;\r\n}\r\n/**\r\n * @param {?} html\r\n * @return {?}\r\n */\r\nfunction el(html) {\r\n    return (/** @type {?} */ (getContent(createTemplate(html)).firstChild));\r\n}\r\n/**\r\n * @param {?} css\r\n * @return {?}\r\n */\r\nfunction normalizeCSS(css) {\r\n    return css.replace(/\\s+/g, ' ')\r\n        .replace(/:\\s/g, ':')\r\n        .replace(/'/g, '\"')\r\n        .replace(/ }/g, '}')\r\n        .replace(/url\\((\\\"|\\s)(.+)(\\\"|\\s)\\)(\\s*)/g, (/**\r\n     * @param {...?} match\r\n     * @return {?}\r\n     */\r\n    (...match) => `url(\"${match[2]}\")`))\r\n        .replace(/\\[(.+)=([^\"\\]]+)\\]/g, (/**\r\n     * @param {...?} match\r\n     * @return {?}\r\n     */\r\n    (...match) => `[${match[1]}=\"${match[2]}\"]`));\r\n}\r\n/**\r\n * @param {?} element\r\n * @return {?}\r\n */\r\nfunction getAttributeMap(element) {\r\n    /** @type {?} */\r\n    const res = new Map();\r\n    /** @type {?} */\r\n    const elAttrs = element.attributes;\r\n    for (let i = 0; i < elAttrs.length; i++) {\r\n        /** @type {?} */\r\n        const attrib = elAttrs.item(i);\r\n        res.set(attrib.name, attrib.value);\r\n    }\r\n    return res;\r\n}\r\n/** @type {?} */\r\nconst _selfClosingTags = ['br', 'hr', 'input'];\r\n/**\r\n * @param {?} el\r\n * @return {?}\r\n */\r\nfunction stringifyElement(el /** TODO #9100 */) {\r\n    /** @type {?} */\r\n    let result = '';\r\n    if (ɵgetDOM().isElementNode(el)) {\r\n        /** @type {?} */\r\n        const tagName = el.tagName.toLowerCase();\r\n        // Opening tag\r\n        result += `<${tagName}`;\r\n        // Attributes in an ordered way\r\n        /** @type {?} */\r\n        const attributeMap = getAttributeMap(el);\r\n        /** @type {?} */\r\n        const sortedKeys = Array.from(attributeMap.keys()).sort();\r\n        for (const key of sortedKeys) {\r\n            /** @type {?} */\r\n            const lowerCaseKey = key.toLowerCase();\r\n            /** @type {?} */\r\n            let attValue = attributeMap.get(key);\r\n            if (typeof attValue !== 'string') {\r\n                result += ` ${lowerCaseKey}`;\r\n            }\r\n            else {\r\n                // Browsers order style rules differently. Order them alphabetically for consistency.\r\n                if (lowerCaseKey === 'style') {\r\n                    attValue = attValue.split(/; ?/).filter((/**\r\n                     * @param {?} s\r\n                     * @return {?}\r\n                     */\r\n                    s => !!s)).sort().map((/**\r\n                     * @param {?} s\r\n                     * @return {?}\r\n                     */\r\n                    s => `${s};`)).join(' ');\r\n                }\r\n                result += ` ${lowerCaseKey}=\"${attValue}\"`;\r\n            }\r\n        }\r\n        result += '>';\r\n        // Children\r\n        /** @type {?} */\r\n        const childrenRoot = templateAwareRoot(el);\r\n        /** @type {?} */\r\n        const children = childrenRoot ? childrenRoot.childNodes : [];\r\n        for (let j = 0; j < children.length; j++) {\r\n            result += stringifyElement(children[j]);\r\n        }\r\n        // Closing tag\r\n        if (_selfClosingTags.indexOf(tagName) == -1) {\r\n            result += `</${tagName}>`;\r\n        }\r\n    }\r\n    else if (isCommentNode(el)) {\r\n        result += `<!--${el.nodeValue}-->`;\r\n    }\r\n    else {\r\n        result += el.textContent;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction createNgZone() {\r\n    return new NgZone({ enableLongStackTrace: true, shouldCoalesceEventChangeDetection: false });\r\n}\r\n/**\r\n * @param {?} node\r\n * @return {?}\r\n */\r\nfunction isCommentNode(node) {\r\n    return node.nodeType === Node.COMMENT_NODE;\r\n}\r\n/**\r\n * @param {?} node\r\n * @return {?}\r\n */\r\nfunction isTextNode(node) {\r\n    return node.nodeType === Node.TEXT_NODE;\r\n}\r\n/**\r\n * @param {?} node\r\n * @return {?}\r\n */\r\nfunction getContent(node) {\r\n    if ('content' in node) {\r\n        return ((/** @type {?} */ (node))).content;\r\n    }\r\n    else {\r\n        return node;\r\n    }\r\n}\r\n/**\r\n * @param {?} el\r\n * @return {?}\r\n */\r\nfunction templateAwareRoot(el) {\r\n    return ɵgetDOM().isElementNode(el) && el.nodeName === 'TEMPLATE' ? getContent(el) : el;\r\n}\r\n/**\r\n * @param {?} name\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction setCookie(name, value) {\r\n    // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does\r\n    // not clear other cookies.\r\n    document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction supportsWebAnimation() {\r\n    return typeof ((/** @type {?} */ (Element))).prototype['animate'] === 'function';\r\n}\r\n/**\r\n * @param {?} element\r\n * @param {?} styleName\r\n * @param {?=} styleValue\r\n * @return {?}\r\n */\r\nfunction hasStyle(element, styleName, styleValue) {\r\n    /** @type {?} */\r\n    const value = element.style[styleName] || '';\r\n    return styleValue ? value == styleValue : value.length > 0;\r\n}\r\n/**\r\n * @param {?} element\r\n * @param {?} className\r\n * @return {?}\r\n */\r\nfunction hasClass(element, className) {\r\n    return element.classList.contains(className);\r\n}\r\n/**\r\n * @param {?} element\r\n * @return {?}\r\n */\r\nfunction sortedClassList(element) {\r\n    return Array.prototype.slice.call(element.classList, 0).sort();\r\n}\r\n/**\r\n * @param {?} html\r\n * @return {?}\r\n */\r\nfunction createTemplate(html) {\r\n    /** @type {?} */\r\n    const t = ɵgetDOM().getDefaultDocument().createElement('template');\r\n    t.innerHTML = html;\r\n    return t;\r\n}\r\n/**\r\n * @param {?} el\r\n * @return {?}\r\n */\r\nfunction childNodesAsList(el) {\r\n    /** @type {?} */\r\n    const childNodes = el.childNodes;\r\n    /** @type {?} */\r\n    const res = [];\r\n    for (let i = 0; i < childNodes.length; i++) {\r\n        res[i] = childNodes[i];\r\n    }\r\n    return res;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: packages/platform-browser/testing/src/browser.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @return {?}\r\n */\r\nfunction initBrowserTests() {\r\n    ɵBrowserDomAdapter.makeCurrent();\r\n    BrowserDetection.setup();\r\n}\r\n/** @type {?} */\r\nconst _TEST_BROWSER_PLATFORM_PROVIDERS = [{ provide: PLATFORM_INITIALIZER, useValue: initBrowserTests, multi: true }];\r\n/**\r\n * Platform for testing\r\n *\r\n * \\@publicApi\r\n * @type {?}\r\n */\r\nconst platformBrowserTesting = createPlatformFactory(platformCore, 'browserTesting', _TEST_BROWSER_PLATFORM_PROVIDERS);\r\nconst ɵ0 = createNgZone;\r\n/**\r\n * NgModule for testing.\r\n *\r\n * \\@publicApi\r\n */\r\nclass BrowserTestingModule {\r\n}\r\nBrowserTestingModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                exports: [BrowserModule],\r\n                providers: [\r\n                    { provide: APP_ID, useValue: 'a' },\r\n                    ɵELEMENT_PROBE_PROVIDERS,\r\n                    { provide: NgZone, useFactory: ɵ0 },\r\n                ]\r\n            },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: packages/platform-browser/testing/src/testing.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: packages/platform-browser/testing/public_api.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: packages/platform-browser/testing/index.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { BrowserTestingModule, platformBrowserTesting, createNgZone as ɵangular_packages_platform_browser_testing_testing_a };\r\n\r\n"]}