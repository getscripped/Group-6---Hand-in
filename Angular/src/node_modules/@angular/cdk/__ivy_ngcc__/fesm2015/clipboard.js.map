{"version":3,"sources":["D:/370/FinalFrontend/node_modules/@angular/cdk/fesm2015/clipboard.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoHC,0GAGC;;;;;;;;;;;;kCAKqL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8GtL,gMAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+CD;;;;;;;;;0BAOC","file":"clipboard.js","sourcesContent":["import { DOCUMENT, CommonModule } from '@angular/common';\r\nimport { Injectable, Inject, ɵɵdefineInjectable, ɵɵinject, InjectionToken, EventEmitter, Directive, NgZone, Optional, Input, Output, NgModule } from '@angular/core';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/cdk/clipboard/pending-copy.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A pending copy-to-clipboard operation.\r\n *\r\n * The implementation of copying text to the clipboard modifies the DOM and\r\n * forces a relayout. This relayout can take too long if the string is large,\r\n * causing the execCommand('copy') to happen too long after the user clicked.\r\n * This results in the browser refusing to copy. This object lets the\r\n * relayout happen in a separate tick from copying by providing a copy function\r\n * that can be called later.\r\n *\r\n * Destroy must be called when no longer in use, regardless of whether `copy` is\r\n * called.\r\n */\r\nclass PendingCopy {\r\n    /**\r\n     * @param {?} text\r\n     * @param {?} _document\r\n     */\r\n    constructor(text, _document) {\r\n        this._document = _document;\r\n        /** @type {?} */\r\n        const textarea = this._textarea = this._document.createElement('textarea');\r\n        /** @type {?} */\r\n        const styles = textarea.style;\r\n        // Hide the element for display and accessibility. Set an\r\n        // absolute position so the page layout isn't affected.\r\n        styles.opacity = '0';\r\n        styles.position = 'absolute';\r\n        styles.left = styles.top = '-999em';\r\n        textarea.setAttribute('aria-hidden', 'true');\r\n        textarea.value = text;\r\n        this._document.body.appendChild(textarea);\r\n    }\r\n    /**\r\n     * Finishes copying the text.\r\n     * @return {?}\r\n     */\r\n    copy() {\r\n        /** @type {?} */\r\n        const textarea = this._textarea;\r\n        /** @type {?} */\r\n        let successful = false;\r\n        try { // Older browsers could throw if copy is not supported.\r\n            if (textarea) {\r\n                /** @type {?} */\r\n                const currentFocus = this._document.activeElement;\r\n                textarea.select();\r\n                textarea.setSelectionRange(0, textarea.value.length);\r\n                successful = this._document.execCommand('copy');\r\n                if (currentFocus && currentFocus instanceof HTMLElement) {\r\n                    currentFocus.focus();\r\n                }\r\n            }\r\n        }\r\n        catch (_a) {\r\n            // Discard error.\r\n            // Initial setting of {@code successful} will represent failure here.\r\n        }\r\n        return successful;\r\n    }\r\n    /**\r\n     * Cleans up DOM changes used to perform the copy operation.\r\n     * @return {?}\r\n     */\r\n    destroy() {\r\n        /** @type {?} */\r\n        const textarea = this._textarea;\r\n        if (textarea) {\r\n            if (textarea.parentNode) {\r\n                textarea.parentNode.removeChild(textarea);\r\n            }\r\n            this._textarea = undefined;\r\n        }\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    PendingCopy.prototype._textarea;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    PendingCopy.prototype._document;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/cdk/clipboard/clipboard.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A service for copying text to the clipboard.\r\n */\r\nclass Clipboard {\r\n    /**\r\n     * @param {?} document\r\n     */\r\n    constructor(document) {\r\n        this._document = document;\r\n    }\r\n    /**\r\n     * Copies the provided text into the user's clipboard.\r\n     *\r\n     * @param {?} text The string to copy.\r\n     * @return {?} Whether the operation was successful.\r\n     */\r\n    copy(text) {\r\n        /** @type {?} */\r\n        const pendingCopy = this.beginCopy(text);\r\n        /** @type {?} */\r\n        const successful = pendingCopy.copy();\r\n        pendingCopy.destroy();\r\n        return successful;\r\n    }\r\n    /**\r\n     * Prepares a string to be copied later. This is useful for large strings\r\n     * which take too long to successfully render and be copied in the same tick.\r\n     *\r\n     * The caller must call `destroy` on the returned `PendingCopy`.\r\n     *\r\n     * @param {?} text The string to copy.\r\n     * @return {?} the pending copy operation.\r\n     */\r\n    beginCopy(text) {\r\n        return new PendingCopy(text, this._document);\r\n    }\r\n}\r\nClipboard.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\n/** @nocollapse */\r\nClipboard.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\n/** @nocollapse */ Clipboard.ɵprov = ɵɵdefineInjectable({ factory: function Clipboard_Factory() { return new Clipboard(ɵɵinject(DOCUMENT)); }, token: Clipboard, providedIn: \"root\" });\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    Clipboard.prototype._document;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/cdk/clipboard/copy-to-clipboard.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Object that can be used to configure the default options for `CdkCopyToClipboard`.\r\n * @record\r\n */\r\nfunction CdkCopyToClipboardConfig() { }\r\nif (false) {\r\n    /**\r\n     * Default number of attempts to make when copying text to the clipboard.\r\n     * @type {?|undefined}\r\n     */\r\n    CdkCopyToClipboardConfig.prototype.attempts;\r\n}\r\n/**\r\n * Injection token that can be used to provide the default options to `CdkCopyToClipboard`.\r\n * @type {?}\r\n */\r\nconst CKD_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CKD_COPY_TO_CLIPBOARD_CONFIG');\r\n/**\r\n * Provides behavior for a button that when clicked copies content into user's\r\n * clipboard.\r\n */\r\nclass CdkCopyToClipboard {\r\n    /**\r\n     * @param {?} _clipboard\r\n     * @param {?=} _ngZone\r\n     * @param {?=} config\r\n     */\r\n    constructor(_clipboard, _ngZone, config) {\r\n        this._clipboard = _clipboard;\r\n        this._ngZone = _ngZone;\r\n        /**\r\n         * Content to be copied.\r\n         */\r\n        this.text = '';\r\n        /**\r\n         * How many times to attempt to copy the text. This may be necessary for longer text, because\r\n         * the browser needs time to fill an intermediate textarea element and copy the content.\r\n         */\r\n        this.attempts = 1;\r\n        /**\r\n         * Emits when some text is copied to the clipboard. The\r\n         * emitted value indicates whether copying was successful.\r\n         */\r\n        this.copied = new EventEmitter();\r\n        /**\r\n         * Emits when some text is copied to the clipboard. The\r\n         * emitted value indicates whether copying was successful.\r\n         * @deprecated Use `cdkCopyToClipboardCopied` instead.\r\n         * \\@breaking-change 10.0.0\r\n         */\r\n        this._deprecatedCopied = this.copied;\r\n        if (config && config.attempts != null) {\r\n            this.attempts = config.attempts;\r\n        }\r\n    }\r\n    /**\r\n     * Copies the current text to the clipboard.\r\n     * @param {?=} attempts\r\n     * @return {?}\r\n     */\r\n    copy(attempts = this.attempts) {\r\n        if (attempts > 1) {\r\n            /** @type {?} */\r\n            let remainingAttempts = attempts;\r\n            /** @type {?} */\r\n            const pending = this._clipboard.beginCopy(this.text);\r\n            /** @type {?} */\r\n            const attempt = (/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                /** @type {?} */\r\n                const successful = pending.copy();\r\n                if (!successful && --remainingAttempts) {\r\n                    // @breaking-change 10.0.0 Remove null check for `_ngZone`.\r\n                    if (this._ngZone) {\r\n                        this._ngZone.runOutsideAngular((/**\r\n                         * @return {?}\r\n                         */\r\n                        () => setTimeout(attempt)));\r\n                    }\r\n                    else {\r\n                        setTimeout(attempt);\r\n                    }\r\n                }\r\n                else {\r\n                    pending.destroy();\r\n                    this.copied.emit(successful);\r\n                }\r\n            });\r\n            attempt();\r\n        }\r\n        else {\r\n            this.copied.emit(this._clipboard.copy(this.text));\r\n        }\r\n    }\r\n}\r\nCdkCopyToClipboard.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[cdkCopyToClipboard]',\r\n                host: {\r\n                    '(click)': 'copy()',\r\n                }\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nCdkCopyToClipboard.ctorParameters = () => [\r\n    { type: Clipboard },\r\n    { type: NgZone },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CKD_COPY_TO_CLIPBOARD_CONFIG,] }] }\r\n];\r\nCdkCopyToClipboard.propDecorators = {\r\n    text: [{ type: Input, args: ['cdkCopyToClipboard',] }],\r\n    attempts: [{ type: Input, args: ['cdkCopyToClipboardAttempts',] }],\r\n    copied: [{ type: Output, args: ['cdkCopyToClipboardCopied',] }],\r\n    _deprecatedCopied: [{ type: Output, args: ['copied',] }]\r\n};\r\nif (false) {\r\n    /**\r\n     * Content to be copied.\r\n     * @type {?}\r\n     */\r\n    CdkCopyToClipboard.prototype.text;\r\n    /**\r\n     * How many times to attempt to copy the text. This may be necessary for longer text, because\r\n     * the browser needs time to fill an intermediate textarea element and copy the content.\r\n     * @type {?}\r\n     */\r\n    CdkCopyToClipboard.prototype.attempts;\r\n    /**\r\n     * Emits when some text is copied to the clipboard. The\r\n     * emitted value indicates whether copying was successful.\r\n     * @type {?}\r\n     */\r\n    CdkCopyToClipboard.prototype.copied;\r\n    /**\r\n     * Emits when some text is copied to the clipboard. The\r\n     * emitted value indicates whether copying was successful.\r\n     * @deprecated Use `cdkCopyToClipboardCopied` instead.\r\n     * \\@breaking-change 10.0.0\r\n     * @type {?}\r\n     */\r\n    CdkCopyToClipboard.prototype._deprecatedCopied;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    CdkCopyToClipboard.prototype._clipboard;\r\n    /**\r\n     * @deprecated _ngZone parameter to become required.\r\n     * \\@breaking-change 10.0.0\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    CdkCopyToClipboard.prototype._ngZone;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/cdk/clipboard/clipboard-module.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass ClipboardModule {\r\n}\r\nClipboardModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: [CdkCopyToClipboard],\r\n                imports: [CommonModule],\r\n                exports: [CdkCopyToClipboard],\r\n            },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/cdk/clipboard/public-api.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { CKD_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };\r\n\r\n"]}