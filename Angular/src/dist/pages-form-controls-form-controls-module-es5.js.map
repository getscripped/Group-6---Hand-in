{"version":3,"sources":["webpack:///src/app/pages/form-controls/autocomplete/autocomplete.component.html","webpack:///src/app/pages/form-controls/checkbox/checkbox.component.html","webpack:///src/app/pages/form-controls/datepicker/datepicker.component.html","webpack:///src/app/pages/form-controls/form-field/form-field.component.html","webpack:///src/app/pages/form-controls/input/input.component.html","webpack:///src/app/pages/form-controls/radio-button/radio-button.component.html","webpack:///src/app/pages/form-controls/select/select.component.html","webpack:///src/app/pages/form-controls/slide-toggle/slide-toggle.component.html","webpack:///src/app/pages/form-controls/slider/slider.component.html","webpack:///src/app/pages/form-controls/autocomplete/autocomplete.component.ts","webpack:///src/app/pages/form-controls/checkbox/checkbox.component.ts","webpack:///src/app/pages/form-controls/datepicker/datepicker.component.scss","webpack:///src/app/pages/form-controls/datepicker/datepicker.component.ts","webpack:///src/app/pages/form-controls/form-controls.module.ts","webpack:///src/app/pages/form-controls/form-field/form-field.component.ts","webpack:///src/app/pages/form-controls/input/input.component.ts","webpack:///src/app/pages/form-controls/radio-button/radio-button.component.scss","webpack:///src/app/pages/form-controls/radio-button/radio-button.component.ts","webpack:///src/app/pages/form-controls/select/select.component.ts","webpack:///src/app/pages/form-controls/slide-toggle/slide-toggle.component.ts","webpack:///src/app/pages/form-controls/slider/slider.component.scss","webpack:///src/app/pages/form-controls/slider/slider.component.ts"],"names":["AutocompleteComponent","appSettings","myControl","options","filteredControl","settings","filteredOptions","valueChanges","pipe","val","filter","option","toLowerCase","indexOf","selector","template","CheckboxComponent","checked","indeterminate","labelPosition","disabled","DatepickerComponent","startDate","Date","minDate","maxDate","myFilter","d","day","getDay","events","type","event","push","value","routes","path","redirectTo","pathMatch","component","data","breadcrumb","FormControlsModule","imports","forChild","declarations","FormFieldComponent","formBuilder","email","required","hide","group","hideRequired","floatLabel","themingForm","min","hasError","Math","max","fontSize","InputComponent","emailFormControl","matcher","MyErrorStateMatcher","control","form","isSubmitted","submitted","invalid","dirty","touched","RadioButtonComponent","seasons","SelectComponent","foods","viewValue","pokemonControl","pokemonGroups","name","pokemon","toppings","toppingList","toppings2","toppingList2","SlideToggleComponent","color","SliderComponent","autoTicks","invert","showTicks","step","thumbLabel","vertical","_tickInterval","v","Number"],"mappings":"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","file":"pages-form-controls-form-controls-module-es5.js","sourcesContent":["export default \"<div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row wrap\\\"> \\r\\n    <div fxFlex=\\\"50\\\" class=\\\"flex-p\\\"> \\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Simple autocomplete</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutAlign=\\\"center\\\">\\r\\n                <form>\\r\\n                    <mat-form-field>\\r\\n                        <input type=\\\"text\\\" placeholder=\\\"Pick one\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto\\\">\\r\\n                        <mat-autocomplete #auto=\\\"matAutocomplete\\\">\\r\\n                            <mat-option *ngFor=\\\"let option of options\\\" [value]=\\\"option\\\">\\r\\n                                {{ option }}\\r\\n                            </mat-option>\\r\\n                        </mat-autocomplete>\\r\\n                    </mat-form-field>\\r\\n                </form>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>   \\r\\n    <div fxFlex=\\\"50\\\" class=\\\"flex-p\\\"> \\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Filter autocomplete</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutAlign=\\\"center\\\">\\r\\n                <form>\\r\\n                    <mat-form-field>\\r\\n                        <input type=\\\"text\\\" placeholder=\\\"Pick one\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"filteredControl\\\" [matAutocomplete]=\\\"auto\\\">\\r\\n                        <mat-autocomplete #auto=\\\"matAutocomplete\\\">\\r\\n                            <mat-option *ngFor=\\\"let option of filteredOptions | async\\\" [value]=\\\"option\\\">\\r\\n                              {{ option }}\\r\\n                            </mat-option>\\r\\n                        </mat-autocomplete>\\r\\n                    </mat-form-field>\\r\\n                </form>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>           \\r\\n</div>\";","export default \"<div fxLayout=\\\"column\\\">\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header>                \\r\\n                <mat-card-subtitle><h2>Checkbox configuration</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <mat-checkbox [(ngModel)]=\\\"checked\\\" class=\\\"mx-1\\\">Checked</mat-checkbox>\\r\\n                    <mat-checkbox [(ngModel)]=\\\"indeterminate\\\" class=\\\"mx-1\\\">Indeterminate</mat-checkbox>\\r\\n                </section>\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <label>Label position:</label>\\r\\n                    <mat-radio-group [(ngModel)]=\\\"labelPosition\\\">\\r\\n                        <mat-radio-button value=\\\"after\\\" class=\\\"mx-1\\\">After</mat-radio-button>\\r\\n                        <mat-radio-button value=\\\"before\\\" class=\\\"mx-1\\\">Before</mat-radio-button>\\r\\n                    </mat-radio-group>\\r\\n                </section>\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <mat-checkbox [(ngModel)]=\\\"disabled\\\">Disabled</mat-checkbox>\\r\\n                </section>\\r\\n                <hr>\\r\\n                <h2 class=\\\"py-1\\\">Result</h2>\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <mat-checkbox\\r\\n                        [(ngModel)]=\\\"checked\\\"\\r\\n                        [(indeterminate)]=\\\"indeterminate\\\"\\r\\n                        [labelPosition]=\\\"labelPosition\\\"\\r\\n                        [disabled]=\\\"disabled\\\">\\r\\n                      I'm a checkbox\\r\\n                    </mat-checkbox>\\r\\n                </section>               \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n</div>\";","export default \"<div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row wrap\\\"> \\r\\n    <div fxFlex=\\\"50\\\" class=\\\"flex-p\\\"> \\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Basic datepicker</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutAlign=\\\"center\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput [matDatepicker]=\\\"picker1\\\" placeholder=\\\"Choose a date\\\">\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #picker1></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>   \\r\\n    <div fxFlex=\\\"50\\\" class=\\\"flex-p\\\"> \\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Datepicker start date</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutAlign=\\\"center\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput [matDatepicker]=\\\"picker2\\\" placeholder=\\\"Choose a date\\\">\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"picker2\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #picker2 startView=\\\"year\\\" [startAt]=\\\"startDate\\\"></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <div fxFlex=\\\"50\\\" class=\\\"flex-p\\\"> \\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Datepicker with min & max validation</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutAlign=\\\"center\\\">\\r\\n                <mat-form-field class=\\\"example-full-width\\\">\\r\\n                    <input matInput [min]=\\\"minDate\\\" [max]=\\\"maxDate\\\" [matDatepicker]=\\\"picker3\\\" placeholder=\\\"Choose a date\\\">\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"picker3\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #picker3></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>  \\r\\n    <div fxFlex=\\\"50\\\" class=\\\"flex-p\\\"> \\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Datepicker with filter validation</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutAlign=\\\"center\\\">\\r\\n                <mat-form-field class=\\\"example-full-width\\\">\\r\\n                    <input matInput [matDatepickerFilter]=\\\"myFilter\\\" [matDatepicker]=\\\"picker4\\\" placeholder=\\\"Choose a date\\\">\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"picker4\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #picker4></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n    <div fxFlex=\\\"50\\\" class=\\\"flex-p\\\"> \\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Datepicker input and change events</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput [matDatepicker]=\\\"picker5\\\" placeholder=\\\"Input & change events\\\"\\r\\n                          (dateInput)=\\\"addEvent('input', $event)\\\" (dateChange)=\\\"addEvent('change', $event)\\\">\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"picker5\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #picker5></mat-datepicker>\\r\\n                </mat-form-field>                \\r\\n                <div class=\\\"w-100 mat-elevation-z4 p-1 events-list\\\" perfectScrollbar> \\r\\n                    <div *ngFor=\\\"let e of events\\\">{{e}}</div>\\r\\n                </div>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <div fxFlex=\\\"50\\\" class=\\\"flex-p\\\"> \\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Disabled datepicker</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\">             \\r\\n                <mat-form-field>\\r\\n                    <input matInput [matDatepicker]=\\\"dp1\\\" placeholder=\\\"Completely disabled\\\" disabled>\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"dp1\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #dp1></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field>\\r\\n                    <input matInput [matDatepicker]=\\\"dp2\\\" placeholder=\\\"Popup disabled\\\">\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"dp2\\\" disabled></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #dp2></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field>\\r\\n                    <input matInput [matDatepicker]=\\\"dp3\\\" placeholder=\\\"Input disabled\\\" disabled>\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"dp3\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #dp3 disabled=\\\"false\\\"></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n    <div fxFlex=\\\"50\\\" class=\\\"flex-p\\\"> \\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Datepicker touch UI</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutAlign=\\\"center\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput [matDatepicker]=\\\"picker6\\\" placeholder=\\\"Choose a date\\\">\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"picker6\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker touchUi=\\\"true\\\" #picker6></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n    <div fxFlex=\\\"50\\\" class=\\\"flex-p\\\"> \\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Datepicker open method</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutAlign=\\\"center center\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput [matDatepicker]=\\\"picker7\\\" placeholder=\\\"Choose a date\\\">\\r\\n                    <mat-datepicker #picker7></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n                <button mat-raised-button (click)=\\\"picker7.open()\\\">Open</button>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>                                 \\r\\n</div>\";","export default \"<div fxLayout=\\\"column\\\">\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Simple form field</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Input\\\">\\r\\n                </mat-form-field>\\r\\n                <mat-form-field>\\r\\n                    <textarea matInput placeholder=\\\"Textarea\\\"></textarea>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field>\\r\\n                    <mat-select placeholder=\\\"Select\\\">\\r\\n                        <mat-option value=\\\"option\\\">Option</mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>                               \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Form field with placeholder</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                <form [formGroup]=\\\"options\\\">\\r\\n                    <mat-checkbox formControlName=\\\"hideRequired\\\">Hide required marker</mat-checkbox>\\r\\n                    <div class=\\\"py-1\\\">\\r\\n                        <label>Float label: </label>\\r\\n                        <mat-radio-group formControlName=\\\"floatLabel\\\">\\r\\n                            <mat-radio-button value=\\\"auto\\\" class=\\\"mx-1\\\">Auto</mat-radio-button>\\r\\n                            <mat-radio-button value=\\\"always\\\" class=\\\"mx-1\\\">Always</mat-radio-button>\\r\\n                            <mat-radio-button value=\\\"never\\\" class=\\\"mx-1\\\">Never</mat-radio-button>\\r\\n                        </mat-radio-group>\\r\\n                    </div>\\r\\n                </form>\\r\\n                <mat-form-field [hideRequiredMarker]=\\\"options.value.hideRequired\\\"\\r\\n                                [floatLabel]=\\\"options.value.floatLabel\\\">\\r\\n                    <input matInput placeholder=\\\"Simple placeholder\\\" required>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field [hideRequiredMarker]=\\\"options.value.hideRequired\\\"\\r\\n                                [floatLabel]=\\\"options.value.floatLabel\\\">\\r\\n                    <mat-select required>\\r\\n                        <mat-option>-- None --</mat-option>\\r\\n                        <mat-option value=\\\"option\\\">Option</mat-option>\\r\\n                    </mat-select>\\r\\n                    <mat-placeholder><mat-icon>favorite</mat-icon> <b> Fancy</b> <i> placeholder</i></mat-placeholder>\\r\\n                </mat-form-field>               \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Form field with hints</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                <mat-form-field hintLabel=\\\"Max 10 characters\\\">\\r\\n                    <input matInput #input maxlength=\\\"10\\\" placeholder=\\\"Enter some input\\\">\\r\\n                    <mat-hint align=\\\"end\\\">{{input.value?.length || 0}}/10</mat-hint>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field>\\r\\n                    <mat-select placeholder=\\\"Select me\\\">\\r\\n                      <mat-option value=\\\"option\\\">Option</mat-option>\\r\\n                    </mat-select>\\r\\n                    <mat-hint align=\\\"end\\\">Here's the dropdown arrow ^</mat-hint>\\r\\n                </mat-form-field>                            \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Form field with error messages</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Enter your email\\\" [formControl]=\\\"email\\\" required>\\r\\n                    <mat-error *ngIf=\\\"email.invalid\\\">{{getErrorMessage()}}</mat-error>\\r\\n                </mat-form-field>                           \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Form field with prefix & suffix</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Enter your password\\\" [type]=\\\"hide ? 'password' : 'text'\\\">\\r\\n                    <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Amount\\\" type=\\\"number\\\" [style.text-align]=\\\"'right'\\\">\\r\\n                    <span matPrefix>$&nbsp;</span>\\r\\n                    <span matSuffix>.00</span>\\r\\n                </mat-form-field>                        \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Form field theming</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n                <form [formGroup]=\\\"themingForm\\\" [style.fontSize.px]=\\\"getFontSize()\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                    <mat-form-field [color]=\\\"themingForm.value.color\\\">\\r\\n                        <mat-select placeholder=\\\"Color\\\" formControlName=\\\"color\\\">\\r\\n                            <mat-option value=\\\"primary\\\">Primary</mat-option>\\r\\n                            <mat-option value=\\\"accent\\\">Accent</mat-option>\\r\\n                            <mat-option value=\\\"warn\\\">Warn</mat-option>\\r\\n                        </mat-select>\\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field [color]=\\\"themingForm.value.color\\\">\\r\\n                        <input matInput type=\\\"number\\\" placeholder=\\\"Font size (px)\\\" formControlName=\\\"fontSize\\\" min=\\\"10\\\">\\r\\n                        <mat-error *ngIf=\\\"themingForm.get('fontSize')?.invalid\\\">Min size: 10px</mat-error>\\r\\n                    </mat-form-field>\\r\\n                </form>     \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>  \\r\\n</div>\";","export default \"<div fxLayout=\\\"column\\\">\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Basic Inputs</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n                <form fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput placeholder=\\\"Favorite food\\\" value=\\\"Sushi\\\">\\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field>\\r\\n                        <textarea matInput placeholder=\\\"Leave a comment\\\"></textarea>\\r\\n                    </mat-form-field>\\r\\n                </form>                              \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Input with a custom ErrorStateMatcher</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n                <form fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput placeholder=\\\"Email\\\" [formControl]=\\\"emailFormControl\\\" [errorStateMatcher]=\\\"matcher\\\">\\r\\n                        <mat-hint>Errors appear instantly!</mat-hint>\\r\\n                        <mat-error *ngIf=\\\"emailFormControl.hasError('email') && !emailFormControl.hasError('required')\\\">Please enter a valid email address</mat-error>\\r\\n                        <mat-error *ngIf=\\\"emailFormControl.hasError('required')\\\">Email is <strong>required</strong></mat-error>\\r\\n                    </mat-form-field>\\r\\n                </form>                              \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Auto-resizing textarea</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                <mat-form-field>\\r\\n                    <textarea matInput \\r\\n                              placeholder=\\\"Autosize textarea\\\" \\r\\n                              matTextareaAutosize \\r\\n                              matAutosizeMinRows=\\\"2\\\"\\r\\n                              matAutosizeMaxRows=\\\"5\\\"></textarea>\\r\\n                </mat-form-field>                       \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Input with a clear button</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput type=\\\"text\\\" placeholder=\\\"Clearable input\\\" [(ngModel)]=\\\"value\\\"/>\\r\\n                    <button mat-button *ngIf=\\\"value\\\" matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"value=''\\\">\\r\\n                        <mat-icon>close</mat-icon>\\r\\n                    </button>\\r\\n                </mat-form-field>                       \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Inputs in a form</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n                <form fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                  \\r\\n                    <mat-form-field>\\r\\n                        <input matInput placeholder=\\\"Company (disabled)\\\" disabled value=\\\"Google\\\">\\r\\n                    </mat-form-field>\\r\\n\\r\\n                    <table cellspacing=\\\"0\\\" class=\\\"w-100\\\">\\r\\n                        <tr>\\r\\n                            <td>\\r\\n                                <mat-form-field class=\\\"w-100\\\">\\r\\n                                    <input matInput placeholder=\\\"First name\\\">\\r\\n                                </mat-form-field>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                                <mat-form-field class=\\\"w-100\\\">\\r\\n                                    <input matInput placeholder=\\\"Long Last Name That Will Be Truncated\\\">\\r\\n                                </mat-form-field>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                    </table>\\r\\n                    \\r\\n                    <mat-form-field class=\\\"w-100\\\">\\r\\n                        <textarea matInput placeholder=\\\"Address\\\">1600 Amphitheatre Pkwy</textarea>\\r\\n                    </mat-form-field>\\r\\n\\r\\n                    <mat-form-field class=\\\"w-100\\\">\\r\\n                        <textarea matInput placeholder=\\\"Address 2\\\"></textarea>\\r\\n                    </mat-form-field>                   \\r\\n\\r\\n                    <table cellspacing=\\\"0\\\" class=\\\"w-100\\\">\\r\\n                        <tr>\\r\\n                            <td>\\r\\n                                <mat-form-field class=\\\"w-100\\\">\\r\\n                                    <input matInput placeholder=\\\"City\\\">\\r\\n                                </mat-form-field>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                                <mat-form-field class=\\\"w-100\\\">\\r\\n                                    <input matInput placeholder=\\\"State\\\">\\r\\n                                </mat-form-field>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                                <mat-form-field class=\\\"w-100\\\">\\r\\n                                    <input matInput #postalCode maxlength=\\\"5\\\" placeholder=\\\"Postal Code\\\" value=\\\"94043\\\">\\r\\n                                    <mat-hint align=\\\"end\\\">{{postalCode.value.length}} / 5</mat-hint>\\r\\n                                </mat-form-field>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                    </table>\\r\\n\\r\\n                </form>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n</div>\\r\\n\";","export default \"<div fxLayout=\\\"column\\\">\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header>                \\r\\n                <mat-card-subtitle><h2>Basic radios</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n                <mat-radio-group>\\r\\n                    <mat-radio-button value=\\\"1\\\" class=\\\"mx-1\\\">Option 1</mat-radio-button>\\r\\n                    <mat-radio-button value=\\\"2\\\" class=\\\"mx-1\\\">Option 2</mat-radio-button>\\r\\n                </mat-radio-group>   \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header>                \\r\\n                <mat-card-subtitle><h2>Radios with ngModel</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n                <mat-radio-group [(ngModel)]=\\\"favoriteSeason\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                    <mat-radio-button *ngFor=\\\"let season of seasons\\\" [value]=\\\"season\\\" class=\\\"season-item\\\">\\r\\n                      {{season}}\\r\\n                    </mat-radio-button>\\r\\n                </mat-radio-group>\\r\\n                <div class=\\\"py-1\\\">Your favorite season is: <b> {{favoriteSeason}} </b></div>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n</div>\";","export default \"<div fxLayout=\\\"column\\\">\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header>                \\r\\n                <mat-card-subtitle><h2>Basic select</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content >\\r\\n                <mat-form-field>\\r\\n                    <mat-select placeholder=\\\"Favorite food\\\" [(ngModel)]=\\\"selectedValue\\\" name=\\\"food\\\">\\r\\n                        <mat-option *ngFor=\\\"let food of foods\\\" [value]=\\\"food.value\\\">\\r\\n                            {{food.viewValue}}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n                <p class=\\\"py-1\\\"> Selected value: <b>{{selectedValue}}</b> </p>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header>                \\r\\n                <mat-card-subtitle><h2>Select with option groups</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content >\\r\\n                <mat-form-field>\\r\\n                    <mat-select placeholder=\\\"Pokemon\\\" [formControl]=\\\"pokemonControl\\\">\\r\\n                        <mat-option>-- None --</mat-option>\\r\\n                        <mat-optgroup *ngFor=\\\"let group of pokemonGroups\\\" [label]=\\\"group.name\\\" [disabled]=\\\"group.disabled\\\">\\r\\n                            <mat-option *ngFor=\\\"let pokemon of group.pokemon\\\" [value]=\\\"pokemon.value\\\">\\r\\n                                {{ pokemon.viewValue }}\\r\\n                            </mat-option>\\r\\n                        </mat-optgroup>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header>                \\r\\n                <mat-card-subtitle><h2>Select with multiple selection</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content >\\r\\n                <mat-form-field>\\r\\n                    <mat-select placeholder=\\\"Toppings\\\" [formControl]=\\\"toppings\\\" multiple>\\r\\n                        <mat-option *ngFor=\\\"let topping of toppingList\\\" [value]=\\\"topping\\\">{{topping}}</mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header>                \\r\\n                <mat-card-subtitle><h2>Select with custom trigger text</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content >\\r\\n                <mat-form-field>\\r\\n                    <mat-select placeholder=\\\"Toppings\\\" [formControl]=\\\"toppings2\\\" multiple>\\r\\n                        <mat-select-trigger>\\r\\n                          {{toppings2.value ? toppings2.value[0] : ''}}\\r\\n                          <small *ngIf=\\\"toppings2.value?.length > 1\\\">\\r\\n                            (+{{toppings2.value.length - 1}} others)\\r\\n                          </small>\\r\\n                        </mat-select-trigger>\\r\\n                        <mat-option *ngFor=\\\"let topping of toppingList2\\\" [value]=\\\"topping\\\">{{topping}}</mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n</div>\";","export default \"<div fxLayout=\\\"column\\\">\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header>                \\r\\n                <mat-card-subtitle><h2>Slide-toggle configuration</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <label>Color:</label>\\r\\n                    <mat-radio-group [(ngModel)]=\\\"color\\\">\\r\\n                        <mat-radio-button value=\\\"primary\\\" class=\\\"mx-1\\\">Primary</mat-radio-button>\\r\\n                        <mat-radio-button value=\\\"accent\\\" class=\\\"mx-1\\\">Accent</mat-radio-button>\\r\\n                        <mat-radio-button value=\\\"warn\\\" class=\\\"mx-1\\\">Warn</mat-radio-button>\\r\\n                    </mat-radio-group>\\r\\n                </section>\\r\\n\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <mat-checkbox [(ngModel)]=\\\"checked\\\">Checked</mat-checkbox>\\r\\n                </section>\\r\\n\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <mat-checkbox [(ngModel)]=\\\"disabled\\\">Disabled</mat-checkbox>\\r\\n                </section>\\r\\n\\r\\n                <hr>\\r\\n\\r\\n                <h2 class=\\\"py-1\\\">Result</h2>\\r\\n\\r\\n                <mat-slide-toggle\\r\\n                    [color]=\\\"color\\\"\\r\\n                    [checked]=\\\"checked\\\"\\r\\n                    [disabled]=\\\"disabled\\\">\\r\\n                  Slide me!\\r\\n                </mat-slide-toggle>\\r\\n                            \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n</div>\";","export default \"<div fxLayout=\\\"column\\\">\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header>                \\r\\n                <mat-card-subtitle><h2>Slider configuration</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput type=\\\"number\\\" placeholder=\\\"Value\\\" [(ngModel)]=\\\"value\\\">\\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field>\\r\\n                        <input matInput type=\\\"number\\\" placeholder=\\\"Min value\\\" [(ngModel)]=\\\"min\\\">\\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field>\\r\\n                        <input matInput type=\\\"number\\\" placeholder=\\\"Max value\\\" [(ngModel)]=\\\"max\\\">\\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field>\\r\\n                        <input matInput type=\\\"number\\\" placeholder=\\\"Step size\\\" [(ngModel)]=\\\"step\\\">\\r\\n                    </mat-form-field>\\r\\n                </section>\\r\\n\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <mat-checkbox [(ngModel)]=\\\"showTicks\\\" class=\\\"mx-1\\\">Show ticks</mat-checkbox>\\r\\n                    <mat-checkbox [(ngModel)]=\\\"autoTicks\\\" *ngIf=\\\"showTicks\\\" class=\\\"mx-1\\\">Auto ticks</mat-checkbox>\\r\\n                    <mat-form-field *ngIf=\\\"showTicks && !autoTicks\\\" class=\\\"mx-1\\\">\\r\\n                        <input matInput type=\\\"number\\\" placeholder=\\\"Tick interval\\\" [(ngModel)]=\\\"tickInterval\\\">\\r\\n                    </mat-form-field>\\r\\n                </section>\\r\\n\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <mat-checkbox [(ngModel)]=\\\"thumbLabel\\\" class=\\\"mx-1\\\">Show thumb label</mat-checkbox>\\r\\n                </section>\\r\\n\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <mat-checkbox [(ngModel)]=\\\"vertical\\\" class=\\\"mx-1\\\">Vertical</mat-checkbox>\\r\\n                    <mat-checkbox [(ngModel)]=\\\"invert\\\" class=\\\"mx-1\\\">Inverted</mat-checkbox>\\r\\n                </section>\\r\\n\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <mat-checkbox [(ngModel)]=\\\"disabled\\\" class=\\\"mx-1\\\">Disabled</mat-checkbox>\\r\\n                </section>\\r\\n\\r\\n                <hr>\\r\\n\\r\\n                <h2 class=\\\"py-1\\\">Result</h2>\\r\\n\\r\\n                <mat-slider class=\\\"custom-slider\\\"\\r\\n                    [disabled]=\\\"disabled\\\"\\r\\n                    [invert]=\\\"invert\\\"\\r\\n                    [max]=\\\"max\\\"\\r\\n                    [min]=\\\"min\\\"\\r\\n                    [step]=\\\"step\\\"\\r\\n                    [thumbLabel]=\\\"thumbLabel\\\"\\r\\n                    [tickInterval]=\\\"tickInterval\\\"\\r\\n                    [(ngModel)]=\\\"value\\\"\\r\\n                    [vertical]=\\\"vertical\\\">\\r\\n                </mat-slider>\\r\\n                            \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n</div>\";","import { Component } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { AppSettings } from '../../../app.settings';\r\nimport { Settings } from '../../../app.settings.model';\r\n\r\n@Component({\r\n  selector: 'app-autocomplete',\r\n  templateUrl: './autocomplete.component.html'\r\n})\r\nexport class AutocompleteComponent {\r\n  myControl: FormControl = new FormControl();\r\n  options = [\r\n    'One',\r\n    'Two',\r\n    'Three'\r\n  ];\r\n  filteredControl: FormControl = new FormControl();\r\n  filteredOptions: Observable<string[]>;\r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings) {\r\n    this.settings = this.appSettings.settings; \r\n  }\r\n\r\n  ngOnInit() {\r\n    this.filteredOptions = this.filteredControl.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n        map(val => this.filter(val))\r\n      );\r\n  }\r\n\r\n  filter(val): string[] {\r\n    return this.options.filter(option => option.toLowerCase().indexOf(val.toLowerCase()) === 0);\r\n  }\r\n}","import { Component } from '@angular/core';\r\nimport { AppSettings } from '../../../app.settings';\r\nimport { Settings } from '../../../app.settings.model';\r\n\r\n@Component({\r\n  selector: 'app-checkbox',\r\n  templateUrl: './checkbox.component.html'\r\n})\r\nexport class CheckboxComponent {\r\n  checked = false;\r\n  indeterminate = false;\r\n  labelPosition = 'after';\r\n  disabled = false;\r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings) {\r\n    this.settings = this.appSettings.settings; \r\n  }\r\n}","export default \".events-list {\\n  height: 97px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvZm9ybS1jb250cm9scy9kYXRlcGlja2VyL0Q6XFwzNzBcXEZpbmFsRnJvbnRlbmQvc3JjXFxhcHBcXHBhZ2VzXFxmb3JtLWNvbnRyb2xzXFxkYXRlcGlja2VyXFxkYXRlcGlja2VyLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9wYWdlcy9mb3JtLWNvbnRyb2xzL2RhdGVwaWNrZXIvZGF0ZXBpY2tlci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFlBQUE7QUNDSiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2Zvcm0tY29udHJvbHMvZGF0ZXBpY2tlci9kYXRlcGlja2VyLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmV2ZW50cy1saXN0e1xyXG4gICAgaGVpZ2h0OiA5N3B4O1xyXG59IiwiLmV2ZW50cy1saXN0IHtcbiAgaGVpZ2h0OiA5N3B4O1xufSJdfQ== */\";","import { Component } from '@angular/core';\r\nimport { MatDatepickerInputEvent } from '@angular/material/datepicker';\r\nimport { AppSettings } from '../../../app.settings';\r\nimport { Settings } from '../../../app.settings.model';\r\n\r\n@Component({\r\n  selector: 'app-datepicker',\r\n  templateUrl: './datepicker.component.html',\r\n  styleUrls: ['./datepicker.component.scss']\r\n})\r\nexport class DatepickerComponent {  \r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings) {\r\n    this.settings = this.appSettings.settings; \r\n  }\r\n\r\n  //Datepicker start date\r\n  startDate = new Date(1990, 0, 1);\r\n\r\n  //Datepicker with min & max validation\r\n  minDate = new Date(2010, 0, 1);\r\n  maxDate = new Date(2020, 0, 1);\r\n\r\n  //Datepicker with filter validation\r\n  myFilter = (d: Date): boolean => {\r\n    const day = d.getDay();\r\n    return day !== 0 && day !== 6;\r\n  }\r\n\r\n  //Datepicker input and change events\r\n  events: string[] = [];\r\n  addEvent(type: string, event: MatDatepickerInputEvent<Date>) {\r\n    this.events.push(`${type}: ${event.value}`);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { PerfectScrollbarModule } from 'ngx-perfect-scrollbar';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { AutocompleteComponent } from './autocomplete/autocomplete.component';\r\nimport { CheckboxComponent } from './checkbox/checkbox.component';\r\nimport { DatepickerComponent } from './datepicker/datepicker.component';\r\nimport { FormFieldComponent } from './form-field/form-field.component';\r\nimport { InputComponent } from './input/input.component';\r\nimport { RadioButtonComponent } from './radio-button/radio-button.component';\r\nimport { SelectComponent } from './select/select.component';\r\nimport { SliderComponent } from './slider/slider.component';\r\nimport { SlideToggleComponent } from './slide-toggle/slide-toggle.component';\r\n\r\nexport const routes = [\r\n  { path: '', redirectTo: 'autocomplete', pathMatch: 'full'},\r\n  { path: 'autocomplete', component: AutocompleteComponent, data: { breadcrumb: 'Autocomplete' } },\r\n  { path: 'checkbox', component: CheckboxComponent, data: { breadcrumb: 'Checkbox' } },\r\n  { path: 'datepicker', component: DatepickerComponent, data: { breadcrumb: 'Datepicker' } },\r\n  { path: 'form-field', component: FormFieldComponent, data: { breadcrumb: 'Form Field' } },\r\n  { path: 'input', component: InputComponent, data: { breadcrumb: 'Input' } },\r\n  { path: 'radio-button', component: RadioButtonComponent, data: { breadcrumb: 'Radio Button' } },\r\n  { path: 'select', component: SelectComponent, data: { breadcrumb: 'Select' } },\r\n  { path: 'slider', component: SliderComponent, data: { breadcrumb: 'Slider' } },\r\n  { path: 'slide-toggle', component: SlideToggleComponent, data: { breadcrumb: 'Slide Toggle' } }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    PerfectScrollbarModule,\r\n    SharedModule\r\n  ],\r\n  declarations: [\r\n    AutocompleteComponent, \r\n    CheckboxComponent, \r\n    DatepickerComponent, \r\n    FormFieldComponent, \r\n    InputComponent, \r\n    RadioButtonComponent, \r\n    SelectComponent, \r\n    SliderComponent, \r\n    SlideToggleComponent\r\n  ]\r\n})\r\nexport class FormControlsModule { }","import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { AppSettings } from '../../../app.settings';\r\nimport { Settings } from '../../../app.settings.model';\r\n\r\n@Component({\r\n  selector: 'app-form-field',\r\n  templateUrl: './form-field.component.html'\r\n})\r\nexport class FormFieldComponent {\r\n  options: FormGroup;\r\n  email = new FormControl('', [Validators.required, Validators.email]);\r\n  hide:boolean = true;\r\n  themingForm: FormGroup;\r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings, public formBuilder:FormBuilder) {\r\n    this.settings = this.appSettings.settings;     \r\n  }\r\n\r\n  ngOnInit(){\r\n    this.options = this.formBuilder.group({\r\n      hideRequired: false,\r\n      floatLabel: 'auto',\r\n    });\r\n    this.themingForm = this.formBuilder.group({\r\n      'color': 'primary',\r\n      'fontSize': [16, Validators.min(10)],\r\n    });\r\n  }\r\n  \r\n  getErrorMessage() {\r\n    return this.email.hasError('required') ? 'You must enter a value' :\r\n        this.email.hasError('email') ? 'Not a valid email' :\r\n            '';\r\n  }\r\n\r\n  getFontSize() {\r\n    return Math.max(10, this.themingForm.value.fontSize);\r\n  }\r\n\r\n}","import { Component } from '@angular/core';\r\nimport { FormControl, FormGroupDirective, NgForm, Validators } from '@angular/forms';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { AppSettings } from '../../../app.settings';\r\nimport { Settings } from '../../../app.settings.model';\r\n\r\n@Component({\r\n  selector: 'app-input',\r\n  templateUrl: './input.component.html'\r\n})\r\nexport class InputComponent {\r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings) {\r\n    this.settings = this.appSettings.settings;     \r\n  }\r\n\r\n  //Input with a custom ErrorStateMatcher\r\n  emailFormControl = new FormControl('', [\r\n    Validators.required,\r\n    Validators.email,\r\n  ]);\r\n  matcher = new MyErrorStateMatcher();\r\n\r\n  //Input with a clear button\r\n  value = 'Clear me';\r\n}\r\n\r\n\r\n/** Error when invalid control is dirty, touched, or submitted. */\r\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n    const isSubmitted = form && form.submitted;\r\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\r\n  }\r\n}","export default \".season-item {\\n  margin-bottom: 6px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvZm9ybS1jb250cm9scy9yYWRpby1idXR0b24vRDpcXDM3MFxcRmluYWxGcm9udGVuZC9zcmNcXGFwcFxccGFnZXNcXGZvcm0tY29udHJvbHNcXHJhZGlvLWJ1dHRvblxccmFkaW8tYnV0dG9uLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9wYWdlcy9mb3JtLWNvbnRyb2xzL3JhZGlvLWJ1dHRvbi9yYWRpby1idXR0b24uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxrQkFBQTtBQ0NKIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvZm9ybS1jb250cm9scy9yYWRpby1idXR0b24vcmFkaW8tYnV0dG9uLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnNlYXNvbi1pdGVte1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNnB4O1xyXG59IiwiLnNlYXNvbi1pdGVtIHtcbiAgbWFyZ2luLWJvdHRvbTogNnB4O1xufSJdfQ== */\";","import { Component } from '@angular/core';\r\nimport { AppSettings } from '../../../app.settings';\r\nimport { Settings } from '../../../app.settings.model';\r\n\r\n@Component({\r\n  selector: 'app-radio-button',\r\n  templateUrl: './radio-button.component.html',\r\n  styleUrls: ['./radio-button.component.scss']\r\n})\r\nexport class RadioButtonComponent {\r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings) {\r\n    this.settings = this.appSettings.settings;     \r\n  }\r\n\r\n  favoriteSeason: string;\r\n  seasons = [\r\n    'Winter',\r\n    'Spring',\r\n    'Summer',\r\n    'Autumn',\r\n  ];\r\n}","import { Component } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { AppSettings } from '../../../app.settings';\r\nimport { Settings } from '../../../app.settings.model';\r\n\r\n@Component({\r\n  selector: 'app-select',\r\n  templateUrl: './select.component.html'\r\n})\r\nexport class SelectComponent {\r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings) {\r\n    this.settings = this.appSettings.settings;     \r\n  }\r\n\r\n  //Basic select\r\n  selectedValue: string;\r\n  foods = [\r\n    {value: 'steak-0', viewValue: 'Steak'},\r\n    {value: 'pizza-1', viewValue: 'Pizza'},\r\n    {value: 'tacos-2', viewValue: 'Tacos'}\r\n  ];\r\n\r\n  //Select with option groups\r\n  pokemonControl = new FormControl();\r\n  pokemonGroups = [\r\n    {\r\n      name: 'Grass',\r\n      pokemon: [\r\n        { value: 'bulbasaur-0', viewValue: 'Bulbasaur' },\r\n        { value: 'oddish-1', viewValue: 'Oddish' },\r\n        { value: 'bellsprout-2', viewValue: 'Bellsprout' }\r\n      ]\r\n    },\r\n    {\r\n      name: 'Water',\r\n      pokemon: [\r\n        { value: 'squirtle-3', viewValue: 'Squirtle' },\r\n        { value: 'psyduck-4', viewValue: 'Psyduck' },\r\n        { value: 'horsea-5', viewValue: 'Horsea' }\r\n      ]\r\n    },\r\n    {\r\n      name: 'Fire',\r\n      disabled: true,\r\n      pokemon: [\r\n        { value: 'charmander-6', viewValue: 'Charmander' },\r\n        { value: 'vulpix-7', viewValue: 'Vulpix' },\r\n        { value: 'flareon-8', viewValue: 'Flareon' }\r\n      ]\r\n    },\r\n    {\r\n      name: 'Psychic',\r\n      pokemon: [\r\n        { value: 'mew-9', viewValue: 'Mew' },\r\n        { value: 'mewtwo-10', viewValue: 'Mewtwo' },\r\n      ]\r\n    }\r\n  ];\r\n\r\n  //Select with multiple selection\r\n  toppings = new FormControl();\r\n  toppingList = ['Extra cheese', 'Mushroom', 'Onion', 'Pepperoni', 'Sausage', 'Tomato'];\r\n\r\n  //Select with custom trigger text\r\n  toppings2 = new FormControl();\r\n  toppingList2 = ['Extra cheese', 'Mushroom', 'Onion', 'Pepperoni', 'Sausage', 'Tomato'];\r\n\r\n}","import { Component } from '@angular/core';\r\nimport { AppSettings } from '../../../app.settings';\r\nimport { Settings } from '../../../app.settings.model';\r\n\r\n@Component({\r\n  selector: 'app-slide-toggle',\r\n  templateUrl: './slide-toggle.component.html'\r\n})\r\nexport class SlideToggleComponent {\r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings) {\r\n    this.settings = this.appSettings.settings;     \r\n  }\r\n\r\n  color = 'accent';\r\n  checked = false;\r\n  disabled = false;\r\n\r\n}","export default \".custom-slider {\\n  width: 250px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvZm9ybS1jb250cm9scy9zbGlkZXIvRDpcXDM3MFxcRmluYWxGcm9udGVuZC9zcmNcXGFwcFxccGFnZXNcXGZvcm0tY29udHJvbHNcXHNsaWRlclxcc2xpZGVyLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9wYWdlcy9mb3JtLWNvbnRyb2xzL3NsaWRlci9zbGlkZXIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxZQUFBO0FDQ0oiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy9mb3JtLWNvbnRyb2xzL3NsaWRlci9zbGlkZXIuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY3VzdG9tLXNsaWRlcntcclxuICAgIHdpZHRoOiAyNTBweDtcclxufSIsIi5jdXN0b20tc2xpZGVyIHtcbiAgd2lkdGg6IDI1MHB4O1xufSJdfQ== */\";","import { Component } from '@angular/core';\r\nimport { AppSettings } from '../../../app.settings';\r\nimport { Settings } from '../../../app.settings.model';\r\n\r\n@Component({\r\n  selector: 'app-slider',\r\n  templateUrl: './slider.component.html',\r\n  styleUrls: ['./slider.component.scss']\r\n})\r\nexport class SliderComponent {\r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings) {\r\n    this.settings = this.appSettings.settings;     \r\n  }\r\n\r\n\r\n  autoTicks = false;\r\n  disabled = false;\r\n  invert = false;\r\n  max = 100;\r\n  min = 0;\r\n  showTicks = false;\r\n  step = 1;\r\n  thumbLabel = false;\r\n  value = 0;\r\n  vertical = false;\r\n\r\n  get tickInterval(): number | 'auto' {\r\n    return this.showTicks ? (this.autoTicks ? 'auto' : this._tickInterval) : 0;\r\n  }\r\n  set tickInterval(v) {\r\n    this._tickInterval = Number(v);\r\n  }\r\n  private _tickInterval = 1;\r\n\r\n}\r\n"]}